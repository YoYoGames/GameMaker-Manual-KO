<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>그림</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="사람들에게 사물을 그리는 방법을 보여주는 몇 가지 기본 코드." />
  <meta name="rh-index-keywords" content="빠른 시작 - 그리기" />
  <meta name="search-keywords" content="그림,추첨 이벤트,GUI 레이어" />
  <meta name="robots" content="NOODP" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 그림</h1><p> 이 섹션(및 <a href="Movement_And_Controls.htm">이동 및 제어</a> 에 대한 다음 섹션)은 첫 번째 게임 프로젝트를 최대한 빨리 시작할 수 있도록 GML 또는 GML Visual의 실용적인 예를 제공하는 것을 목표로 합니다. 우리는 당신이 가능한 한 빨리 물건을 만들기 시작하기를 원하기 때문에 너무 깊이 설명하지 않을 것입니다. 따라서 진행하면서 모든 링크를 탐색하고 매뉴얼의 &quot;검색&quot; 기능을 사용하여 볼 것을 권장합니다. 확실하지 않은 항목에 대한 추가 정보는</p><p> 이 섹션에서는 단순히 정보를 텍스트와 이미지로 화면에 그리는 데 집중하고 다양한 <strong>그리기 이벤트</strong>, 특히 기본 <strong>그리기</strong> 이벤트와 <strong>그리기 GUI</strong> 이벤트에 대해 조금 더 설명합니다. 일부 예에서는 다른 이벤트를 추가해야 하지만 이러한 이벤트가 발생하면 이에 대해 설명하겠습니다.</p><p><img alt="The Draw Events" class="center" src="../assets/Images/QS_Guide/QS_DrawEvents.png" /></p><p> 더 진행하기 전에 <a href="../Introduction/The_Start_Page.htm">시작 페이지</a> 에서 새 프로젝트(GML 또는 GML Visual)를 만들고 몇 가지 스프라이트와 개체를 추가(또는 생성)할 수 있습니다. 이를 사용하여 테스트할 수 있는 코드입니다. 지금은 흰색 사각형도 우리 개체의 스프라이트로 작동합니다!</p><p> 이제 <a href="Objects_And_Instances.htm">개체 및 인스턴스</a> 섹션에서 언급했듯이 개체에 그리기 이벤트를 추가하지 않으면 <span data-keyref="GameMaker Name">GameMaker</span> 가 기본적으로 그리기를 수행합니다. 즉, 개체에 할당된 스프라이트가 있는 경우 이 스프라이트가 그려지고 추가된 모든 변환. 변환이란 무엇을 의미합니까? 음, 각 개체에는 기본 드로잉 시 개체의 인스턴스가 스프라이트를 그리는 방법을 제어하는 내장 <a class="glossterm" data-glossterm="변하기 쉬운" href="#">변수</a> <span class="glossextra">s</span> 가 있으며, 게임이 실행되면서 이러한 변수를 변경하여 스프라이트가 그려지는 방식을 변경할 수 있습니다.</p><p class="note"> <strong>참고</strong>: <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm">여기에서</a> 인스턴스 스프라이트를 변환하는 데 사용할 수 있는 모든 내장 변수 목록을 찾을 수 있습니다. GML Visual 사용자는 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Drawing_Actions.htm">여기</a> 에서 찾을 수 있는 이러한 변수에 영향을 미치는 몇 가지 전용 작업을 가지고 있으며 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Variable.htm">Get Instance Variable</a> 및 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Variable.htm">Set Instance Variable</a> 작업과 함께 실제 변수 자체를 사용할 수도 있습니다.</p><p> 몇 가지 예를 살펴보겠습니다.</p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">알파 변경(투명도)</a></p><div class="droptext" data-targetname="drop_down"><p class="dropspot"> <strong>알파</strong> 값은 그려지는 것의 투명도를 제어하는 <span data-keyref="GameMaker Name">것이며 GameMaker</span> 에서 다음을 사용할 수 있습니다. <span class="inline">image_alpha</span> 할당된 스프라이트의 투명도를 변경하는 내장 변수. 이것이 어떻게 작동하는지 보려면 객체를 열고(또는 생성하고), 스프라이트를 할당한 다음, 객체에 <strong>Create Event</strong> 를 제공하십시오. 이벤트 만들기에서 다음 GML Visual 또는 GML을 추가하기만 하면 됩니다.</p><p class="dropspot"><img alt="GML VisualDraw Example For Transparency" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_1.png" /></p><p class="code">var _val = random(1);
      <br />
      image_alpha = _val;
    </p><p class="dropspot"> 이미지 알파는 0에서 1 사이의 값으로 계산되며, 여기서 0은 완전히 투명하고 1은 완전히 불투명합니다(기본적으로 1로 설정됨). 따라서 이 예에서는 이미지 알파를 0에서 1 사이의 임의의 십진수 값으로 설정하는 것뿐입니다. 이 개체의 인스턴스를 방에 몇 개 배치한 다음 <strong>재생</strong> 버튼을 클릭합니다.<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /> IDE 상단에 있습니다.</p><p class="dropspot"> 개체의 각 인스턴스가 다른 투명도로 스프라이트를 그리는 것을 볼 수 있습니다. 예:</p><p class="dropspot"><img alt="Example Of Sprites Drawn With Different Alpha Values" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_1.png" /></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">색상 혼합 변경(색조)</a></p><div class="droptext" data-targetname="drop_down1"><p class="dropspot"> 개체가 기본적으로 스프라이트를 그리는 경우 이 스프라이트는 실제로 색상과 <strong>혼합</strong> (또는 <strong>착색</strong> )되어 그려지며 이 색상 값은 <span class="inline">image_blend</span> 내장 변수. 기본적으로 이 색상은 흰색으로, 기본적으로 스프라이트가 화면에 표시될 때 색상이 추가되지 않음을 의미합니다. 그러나 다른 색상을 사용하여 특수 효과를 얻을 수 있습니다. 예를 들어 빨간색을 사용하여 인스턴스가 약간의 손상을 입었음을 표시할 수 있습니다.</p><p class="dropspot"> 이 예에서는 키를 누르고 있는 동안 스프라이트와 다른 색상을 혼합할 것이므로 개체를 열고(또는 생성) 스프라이트를 할당한 다음 개체에 <strong>Key Down &lt;Space&gt; 이벤트</strong>.</p><p class="dropspot"><img alt="Add Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p><p class="dropspot"> 이 키 다운 이벤트에서 다음 GML Visual 또는 GML을 추가합니다.</p><p class="dropspot"><img alt="GML VisualExample Using Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_2.png" /></p><p class="code">var _col = choose(c_red, c_green, c_blue, c_yellow, c_fuchsia, c_orange);
      <br />
      image_blend = _col;
    </p><p class="dropspot"> 방에 이 개체의 몇 가지 인스턴스를 배치한 다음 재생 버튼을 클릭합니다.<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /> IDE 상단에서 <em>Space</em> 키를 눌렀다가 떼는 것을 테스트합니다. 키를 누르고 있는 동안 각 인스턴스의 색상이 빠르게 변경되고 키를 놓으면 변경이 중지됨을 확인해야 합니다.</p><p class="dropspot"><img alt="Example Showing Colour Blending" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_2.png" /></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">스케일 변경</a></p><div class="droptext" data-targetname="drop_down2"><p class="dropspot"> 스프라이트에 대해 변경할 수 있는 또 다른 속성은 <strong>스케일</strong> 값으로, 원할 때마다 더 크거나 작게 그릴 수 있습니다. 척도는 두 개의 개별 변수에 의해 X 및 Y 축을 따라 독립적으로 계산됩니다. <span class="inline">image_xscale</span> 변수와 <span class="inline">image_yscale</span> 변하기 쉬운. 기본적으로 이들은 1로 설정되고 <strong>승수</strong> 처럼 작동하므로 값 0.5는 절반 크기이고 값 2는 크기의 두 배입니다.</p><p class="note"> <strong>중요한!</strong> 이러한 변수 <strong>를 사용하여 할당된 스프라이트 크기를 변경하면 경계 상자의 크기도 일치하도록 변경됩니다.</strong> 즉, 스프라이트의 충돌 감지 영역도 확장됩니다.</p><p class="dropspot"> 이 예제에서는 몇 가지 간단한 수학을 사용하여 인스턴스가 루프에서 스프라이트를 위아래로 조정하도록 할 것입니다. 시작하려면 객체를 열고(또는 생성), 스프라이트를 할당한 다음 객체에 <strong>Create Event</strong> 를 지정합니다. 이 이벤트에서 다음을 추가합니다.</p><p class="dropspot"><img alt="GML VisualSet Variable Example" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_1.png" /></p><p class="code">timer = 0;</p><p class="dropspot"> 이제 다음을 사용하여 개체에 <strong>단계 이벤트</strong> 를 추가합니다.</p><p class="dropspot"><img alt="GML VisualActions To Change Sprite Scale" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_2.png" /></p><p class="code">timer = timer + 1;
      <br />
      var _val = dsin(timer);
      <br />
      image_xscale = 1 + _val;
      <br />
      image_yscale = 1 + _val;
    </p><p class="dropspot"> 여기서 우리는 수학 함수를 사용하고 있습니다. <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dsin.htm"><span class="inline">dsin()</span></a> 타이머 변수를 사용하여 -1과 1 사이의 값을 생성한 다음 스케일 변수에 적용합니다. 일부 인스턴스를 방에 배치하고 <strong>재생</strong> 버튼을 누른 후<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" />, 인스턴스가 0 스케일에서 2 스케일로 확장 및 축소된 다음 다시 축소되는 방식을 확인해야 합니다.</p><p class="dropspot"><img class="center" src="../assets/Images/QS_Guide/QS_DrawExample_3.gif" title="Animation Showing Sprite Scaling" /></p><p class="dropspot"> 마지막으로 한 가지... &quot;를 변경하십시오. <span class="inline">image_yscale</span> &quot; 섹션에 &quot; <span class="inline">1 - _val</span> &quot;그리고 무슨 일이 일어나는지보십시오!</p><p class="dropspot"></p></div><p></p><p> 위의 예는 <span data-keyref="GameMaker Name">GameMaker</span> 가 기본 그리기일 때 개체 스프라이트를 조작할 수 있는 여러 방법 중 일부를 보여주지만 개체에 대해 둘 이상의 것을 그리려면 어떻게 해야 합니까? 이러한 경우 <strong>그리기 이벤트</strong> 를 사용하여 무엇을 그릴 <span data-keyref="GameMaker Name">지 GameMaker</span> 에 명시적으로 알려야 합니다. 이는 다음 예에서 수행할 작업입니다.</p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">두 개(또는 그 이상)의 스프라이트를 함께 그리기</a></p><div class="droptext" data-targetname="drop_down3"><p class="dropspot"> 이 예에서는 두 개의 스프라이트와 하나의 개체가 필요합니다. 스프라이트를 호출하십시오 &quot; <span class="inline">spr_One</span> &quot; 그리고 &quot; <span class="inline">spr_Two</span> &quot;를 설정한 다음 &quot; <span class="inline">spr_One</span> &quot; 원점을 중심으로 &quot; <span class="inline">spr_Two</span> &quot; 원점을 왼쪽 가운데로 설정합니다.</p><p class="dropspot"><img alt="Show Origins For Sprites" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_1.png" /> 첫 번째 스프라이트(&quot; <span class="inline">spr_One</span> &quot; 중심 원점 포함)을 생성한 개체에 추가한 다음 <strong>Create</strong> Event t를 추가합니다. Create Event에서 다음 GML Visual 또는 GML을 추가합니다.</p><p class="dropspot"><img alt="Set Draw Angle Variable In DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_1.png" /></p><p class="code">draw_angle = 0;</p><p class="dropspot"> 이 변수를 사용하여 &quot; <span class="inline">spr_Two</span> &quot; 시간이 지남에 따라 개체에 할당된 스프라이트에 오버레이되어 그립니다(&quot; <span class="inline">spr_One</span> &quot;). 이렇게 하려면 개체에 <strong>그리기 이벤트</strong> 를 추가해야 합니다. 이렇게 하면 <span data-keyref="GameMaker Name">GameMaker</span> 에 인스턴스가 그리는 것을 인계받기를 원한다는 것을 알립니다. 즉, 코드에 <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_self.htm"><span class="inline">draw_self()</span></a> 기능 또는 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Self.htm"><strong>Draw Self</strong></a> 액션. 이 작업은 그리기 이벤트가 없을 때 개체가 수행하는 작업을 단순히 복제하고 할당된 스프라이트를 그리는 것이 기본입니다. 그런 다음 회전하는 오버레이 스프라이트로 사용하려는 두 번째 스프라이트를 그립니다. GML Visual 및 GML은 다음과 같습니다.</p><p class="dropspot"><img alt="Draw Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_2.png" /></p><p class="code">draw_self();
      <br />
      draw_angle = draw_angle + 0.5;
      <br />
      draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);
    </p><p class="dropspot"> 방 편집기에 개체의 여러 인스턴스를 추가한 다음 <strong>재생</strong> 버튼을 누릅니다.<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /> <a class="glossterm" data-glossterm="IDE" href="#">IDE</a> 상단에 있습니다. 모든 것이 올바르게 진행되었다면 이제 다음과 같이 표시되어야 합니다.</p><p class="dropspot"><img alt="Animation Drawing Two Sprites Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_2.gif" /></p><p class="dropspot"> 이 예제를 떠나기 전에 &quot; <span class="inline">spr_Two</span> &quot; 간단히 회전하면 마우스 위치를 가리키게 됩니다. 이를 위해 Draw Event GML Visual 또는 GML을 다음과 같이 변경해야 합니다.</p><p class="dropspot"><img alt="Edited Draw Code For Drawing Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_3.png" /></p><p class="code">draw_self();
      <br />
      draw_angle = point_direction(x, y, mouse_x, mouse_y);
      <br />
      draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);
    </p><p class="dropspot"> 프로젝트를 다시 실행하면 이번에는 매우 다른 것을 볼 수 있습니다!</p><p class="dropspot"><img alt="Animation Drawing Two Sprites Pointing At Mouse" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_3.gif" /> 이제 스프라이트는 이동 위치에 관계없이 마우스를 가리킵니다! 보시다시피, 레이어링 스프라이트는 개체에 세부 정보를 추가하거나 개체에 할당된 &quot;기본&quot; 스프라이트와 독립적으로 무언가를 이동시키는 좋은 방법이며, 아마도 스스로 많이 사용하게 될 강력한 도구입니다. 프로젝트.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down4" href="#">스프라이트 이외의 것을 그리기</a></p><div class="droptext" data-targetname="drop_down4"><p class="dropspot"> 그리기 이벤트에서 스프라이트 이외의 텍스트나 모양과 같은 것들을 그릴 수도 있습니다. 이 예에서는 GML Visual 또는 GML을 사용합니다. <span class="inline">draw_self()</span> 객체 스프라이트를 그리는 함수이지만 일부 <strong>text</strong> 로 시작하여 다른 항목도 그릴 것입니다. 이 예에서는 스프라이트와 개체(스프라이트가 할당된 개체)가 필요합니다. 개체에서 먼저 이 GML Visual 또는 GML을 사용하여 <strong>이벤트 만들기</strong> 를 추가합니다.</p><p class="dropspot"><img alt="Setting Variables Using DnD" class="center" height="506" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1_1.png" width="317" /></p><p class="code">name = choose(&quot;Fred&quot;, &quot;Jonas&quot;, &quot;Sharon&quot;, &quot;Kate&quot;, &quot;Frank&quot;, &quot;John&quot;, &quot;Monica&quot;, &quot;Amanda&quot;);
      <br />
      number = irandom(100);
    </p><p class="dropspot"> 이 모든 작업은 <span data-keyref="GameMaker Name">GameMaker</span> 에게 나열된 이름 중 하나를 선택하여 변수에 할당하고 개체의 각 인스턴스에 대해 0에서 100 사이의 임의의 숫자를 생성하도록 지시하는 것입니다. 이 값을 화면에 그리려면 이제 <strong>Draw Event</strong> 를 추가하고 여기에 다음 GML Visual 또는 GML을 추가해야 합니다.</p><p class="dropspot"><img alt="Drawing Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1.png" /></p><p class="code">draw_self();
      <br />
      draw_set_halign(fa_center);
      <br />
      draw_text(x, y + 32, &quot;My name is &quot; + name);
      <br />
      draw_text(x, y + 48, &quot;My number is &quot; + string(number));
    </p><p class="dropspot"> 위의 코드에서 우리가 사용하는<a href="../GameMaker_Language/GML_Reference/Strings/string.htm"><span class="inline">string()</span></a> 우리가 그리려는 &quot;숫자&quot; 변수에 대한 함수 또는 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Number_To_String.htm"><strong>숫자를 문자열</strong></a> 로 작업. 이는 모든 텍스트가 값이 아닌 <em>문자</em> 로 구성되어야 하기 때문에 이 함수/액션을 사용하여 숫자 값을 우리가 그리고 싶은 문자로 변환해야 하기 때문입니다. 이 경우 생성한 난수를 그릴 수 있는 &quot;문자열&quot;로 변환합니다. 또한 텍스트 <strong>정렬</strong> 을 설정했습니다. 이것은 단순히 주어진 위치를 기준으로 텍스트 그리기를 시작할 위치를 <span data-keyref="GameMaker Name">GameMaker</span> 에 알려주고 이 경우 텍스트가 x축을 따라 중앙에 오도록 합니다.</p><p class="dropspot"> 방 편집기에 개체의 여러 인스턴스를 추가한 다음 재생 버튼을 누릅니다.<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /> IDE 상단에 있습니다. 다음과 같이 표시되어야 합니다.</p><p class="dropspot"><img alt="Sprites Being Drawn Along With Text" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_1.png" /></p><p class="dropspot"> 지금까지의 모든 예에서 우리는 인스턴스에 할당된 스프라이트를 그렸지만 항상 그런 것은 아닙니다. 할당된 스프라이트에 관계없이 그리기 이벤트에서 <strong>원하는 모든 것을 그릴 수 있습니다</strong>. 이 점을 설명하기 위해 현재 가지고 있는 코드를 변경합니다. <span class="inline">draw_self()</span> 다음과 같이 색이 지정된 타원을 그리는 함수로 호출하고 바꿉니다.</p><p class="dropspot"><img alt="Drawing Shapes Along With Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_2.png" /></p><p class="code">draw_ellipse_colour(x - 50, y - 32, x + 50, y + 32, c_fuchsia, c_lime, false);
      <br />
      draw_set_halign(fa_center);
      <br />
      draw_text(x, y + 32, &quot;My name is &quot; + name);
      <br />
      draw_text(x, y + 48, &quot;My number is &quot; + string(number));
    </p><p class="dropspot"> 프로젝트를 다시 실행하면 다음이 표시됩니다.</p><p class="dropspot"><img alt="Example Of Drawing Shapes And Text Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_2.png" /></p><p class="dropspot"> 이것에 대해 주목해야 할 한 가지 중요한 점은 할당된 스프라이트를 그리지 않더라도 <strong>여전히 충돌 감지에 사용된다는 것입니다</strong>. 따라서 한 가지를 그릴 수 있는 동안에도 충돌은 할당된 스프라이트를 기반으로 인스턴스와 함께 방에 배치된 것처럼 표시되지 않는 경우에도 계속 계산됩니다. 이것은 실제로 매우 편리합니다. 다른 스프라이트를 그릴 수 있지만 할당된 스프라이트를 기반으로 단일 <strong>충돌 마스크</strong> 를 유지할 수 있기 때문입니다. 또한 X/Y 스케일과 같은 다른 변환을 계속 적용할 수 있으며 이를 표시하기 위해 그려지는 것이 없더라도 충돌은 변경된 크기를 기반으로 합니다.</p></div><p></p><p></p><h1> GUI 계층</h1><p> 페이지 상단에서 <strong>Draw GUI 이벤트</strong> 와 Draw 이벤트에 대해 언급했으므로 이제 살펴보겠습니다. GUI 이벤트 그리기는 방의 인스턴스 위에 그려지는 고정 너비와 높이의 특수 그리기 레이어인 <strong><a class="glossterm" data-glossterm="GUI" href="#">GUI</a> 레이어</strong> 에서 작동합니다. GUI 레이어의 가장 좋은 점은 <em>방 카메라와 함께 움직이지 않는다는 것입니다</em>. 따라서 게임에서 사용자와 통신하는 데 필요한 점수, 체력 표시줄 및 기타 정보와 같은 정적 GUI 항목을 추가하기에 이상적인 위치입니다. 매뉴얼의 <a href="../The_Asset_Editors/Object_Properties/Draw_Events.htm">이벤트 그리기</a> 섹션에서 GUI 계층에 대한 자세한 정보를 찾을 수 있습니다.</p><p class="note"> <strong>참고</strong>: 방은 화면 크기보다 클 수 있으므로 플레이어가 이동할 수 있는 큰 레벨을 가질 수 있습니다. 즉, 방 편집기(또는 코드에서)에서 게임의 동작을 따라가는 <strong>카메라</strong> 를 정의해야 합니다.. 이것은 기본적으로 예를 들어 방의 플레이어 위치에 따라 더 큰 방의 다른 부분을 표시하도록 화면의 고정 영역을 설정하는 방법이며 많은 게임에서 사용됩니다. Mario나 Zelda와 같은 고전 게임에서 뷰가 항상 주인공을 따라가는 방식을 생각해 보십시오. 그것은 카메라로 이루어집니다. 자세한 내용은 매뉴얼의 룸 편집기 섹션에서 <a href="../The_Asset_Editors/Room_Properties/Room_Properties.htm">룸 속성</a> 섹션을 참조하십시오.</p><p> 다음 예제는 모두 <strong>Draw GUI</strong> 이벤트를 사용할 것이므로 개체를 만들고 해당 이벤트를 개체에 추가해야 합니다. 기본적으로 아무것도 그리는 것을 원하지 않고 충돌을 감지하는 데 필요하지도 않기 때문에 객체에는 할당된 스프라이트가 필요하지 않습니다. 사물을 그리거나 게임의 특정 측면을 제어하기 위해 설계된 이와 같은 개체를 종종 <strong>컨트롤러 개체</strong> 라고 합니다. 또한 모든 예제에 대해 동일한 개체를 사용할 것이므로 하나씩 살펴보는 것이 좋습니다(꼭 필요한 것은 아니지만).</p><p><img alt="Draw GUI Event In An Object" class="center" src="../assets/Images/QS_Guide/QS_DrawGUIObject.png" /> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down5" href="#">텍스트 그리기</a></p><div class="droptext" data-targetname="drop_down5"><p class="dropspot"> GUI 레이어에 그릴 때 왼쪽 위 모서리가 원점 위치이고 오른쪽이 +X, 아래가 +Y입니다. 이 예제에서 볼 수 있는 것처럼 텍스트와 그래픽을 매우 쉽게 배치할 수 있습니다. 여기서 우리가 할 일은 플레이어 점수를 나타내는 값을 그리는 것뿐이므로 객체에서 다음과 같이 이 값을 보유할 변수를 초기화하기 위해 <strong>Create Event</strong> 를 추가해야 합니다.</p><p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_1.png" /></p><p class="code">player_score = 0;</p><p class="dropspot"> 또한 개체에 <strong>Keyboard Down &lt;Space&gt; 이벤트</strong> 를 추가하려고 합니다. Space 키를 누를 때마다 점수를 증가시키는 데 사용할 것이기 때문입니다.</p><p class="dropspot"><img alt="Adding A Space Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p><p class="dropspot"> 이 이벤트에서 다음을 추가합니다.</p><p class="dropspot"><img alt="GML VisualActions In The Space Key Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_2.png" /></p><p class="code">var _val = irandom(100);
      <br />
      player_score = player_score + _val;
    </p><p class="dropspot"> 마지막으로 Draw GUI 이벤트에서 다음과 같이 점수 값을 그려봅시다.</p><p class="dropspot"> 이 이벤트에서 다음을 추가합니다.</p><p class="dropspot"><img alt="Drawing Text To The GUI Layer Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_3.png" /></p><p class="code">draw_set_halign(fa_left);
      <br />
      draw_set_colour(c_yellow);
      <br />
      draw_text(32, 32, &quot;SCORE:&quot;);
      <br />
      draw_set_colour(c_white);
      <br />
      var _str = string(player_score);
      <br />
      draw_text_transformed(32, 48, _str, 2, 2, 0);
    </p><p class="dropspot"> GUI에 그릴 때 인스턴스에 상대적일 필요가 없기 때문에 그릴 텍스트의 x/y 위치에 대해 <a class="glossterm" data-glossterm="하드 코딩된" href="#">하드 코딩된</a> (또는 고정된) 값을 어떻게 사용했는지 알 수 있습니다. 층. 또한 &quot;색상 설정&quot; 기능을 사용하여 텍스트 색상을 변경하고 &quot;변환된&quot; 기능을 사용하여 실제 점수 값을 더 크게 만들었습니다. 이는 자신의 게임에서 텍스트 요소를 사용자 정의하는 방법을 보여줍니다.</p><p class="dropspot"> 지금 방에 이 개체의 단일 인스턴스를 추가한 다음 <strong>재생</strong> 버튼을 누르십시오.<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" />. 게임이 실행되면 눌렀다 떼십시오. <span class="inline">&lt;Space&gt;</span> 키를 누르면 점수 값이 증가하는 것을 볼 수 있습니다.</p><p class="dropspot"><img alt="Animation Showing Text Being Drawn To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_6.gif" /></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down6" href="#">스프라이트 그리기</a></p><div class="droptext" data-targetname="drop_down6"><p class="dropspot"> 이 예에서는 GUI 계층을 사용하여 일부 스프라이트를 그립니다. 이것의 가장 확실한 용도는 플레이어의 삶을 그리는 것이므로 계속 진행하십시오! 이 예제에서는 스프라이트가 필요합니다. 크기는 약 64x64픽셀이어야 합니다. 그러나 우리가 직접 그릴 것이기 때문에 개체에 할당해서는 안 됩니다.</p><p class="dropspot"> 시작하려면 <strong>Create Event</strong> 의 객체에 몇 가지 새로운 변수를 추가해야 합니다(이전 예제를 완료했다면 이미 있는 것 아래에 다음을 추가하세요).</p><p class="dropspot"><img alt="Defining Variables Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_1.png" /></p><p class="code">player_lives = 3;
      <br />
      gui_w = display_get_gui_width();
    </p><p class="dropspot"> 이 코드에서 우리는 플레이어의 삶에 대한 변수를 초기화하지만 GUI 레이어의 너비를 유지하는 변수도 생성하여 화면 오른쪽을 기준으로 사물을 올바르게 배치할 수 있습니다. 값을 코드에 하드코딩하여 사용할 수 있지만 이는 방 크기를 변경하거나 카메라 등을 나중에 추가하는 경우... 코드를 작성하고 모든 곳에서 값을 변경합니다. 사용 <a href="../GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_width.htm"><span class="inline">display_get_gui_width()</span></a> 대신 기능은 코드가 GUI 레이어가 끝나는 크기에 따라 자동으로 조정되기 때문에 이와 같은 향후 변경 사항에 대해 걱정할 필요가 없음을 의미합니다.</p><p class="dropspot"> 다음으로 <strong>키보드 누름 &lt;Enter&gt; 이벤트</strong> 를 개체에 추가하려고 합니다. Enter 키를 누를 때마다 생명의 수를 변경하는 데 사용할 것이기 때문입니다.</p><p class="dropspot"><img alt="Adding An Enter Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_EnterKeyPressEvent.png" /></p><p class="dropspot"> 이 이벤트에서 다음을 추가합니다.</p><p class="dropspot"><img alt="GML VisualIn The Enter Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_2.png" /></p><p class="code">player_lives = player_lives - 1;
      <br />
      <br />
      if player_lives &lt; 0
      <br />
      {
      <br />
      player_lives = 3;
      <br />
      }
    </p><p class="dropspot"> 마지막으로 디스플레이에 스프라이트를 그려야 합니다. 이를 위해 우리는 &quot; <span class="inline">for</span> &quot; 루프( <a href="../GameMaker_Language/GML_Overview/Language_Features/for.htm">여기서는</a> GML Visual용 정보), GUI 너비 변수와 함께 화면의 오른쪽 상단 모서리에 모든 것을 배치 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Loops/For.htm">합니다</a>. 따라서 이것을 Draw Gui 이벤트에 추가합니다(다른 모든 작업 후에 이전 예에서):</p><p class="dropspot"><img alt="GML VisualActions To Draw Sprites To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_3.png" /></p><p class="code">for (var i = 0; i &lt; player_lives; i += 1)
      <br />
      {
      <br />
      var _xx = gui_w - 48 - (i * 70);
      <br />
      draw_sprite(spr_Heart, 0, _xx, 48);
      <br />
      }
    </p><p class="dropspot"> 이 개체의 인스턴스를 아직 방에 추가하지 않았다면 지금 추가하고(하나만!) <strong>재생</strong> 버튼을 누르십시오.<img alt="Play Icon" class="icon" height="24" src="../assets/Images/Icons/Icon_PlayGame.png" width="24" />. 게임이 실행되면 <span class="inline">&lt;Enter&gt;</span> 삶의 변화를 보기 위해 여러 번 키를 누르십시오.</p><p class="dropspot"><img alt="Animation Drawing Sprites To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_7.gif" /></p><p class="dropspot"> 이 예를 떠나기 전에 생명의 수를 실험하고 어떤 일이 일어나는지 확인해야 합니다. 현재 3으로 설정되어 있지만 Create Event 및 Key Pressed 이벤트를 변경하여 값을 5 또는 10으로 설정합니다... 모든 것을 올바르게 수행했다면 코드가 적응하고 모두 올바르게 그려야 합니다!</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down7" href="#">헬스바 그리기</a></p><div class="droptext" data-targetname="drop_down7"><p class="dropspot"> 이 마지막 예제에서는 GUI 계층에 상태 표시줄을 그리는 방법을 다룹니다. 이를 수행할 수 있는 방법은 여러 가지가 있지만 <span data-keyref="GameMaker Name">GameMaker</span> 에는 특히 체력 표시줄을 위한 기능이 내장되어 있으므로 여기에서 사용할 것입니다. 스프라이트나 모양을 사용하여 직접 만들 수도 있습니다. 시작하려면 이전과 같이 상태 값을 유지하기 위해 변수를 초기화해야 하므로 다음 GML Visual 또는 GML을 개체의 <strong>이벤트 만들기</strong> 에 추가합니다(이미 있을 수 있는 다른 코드 뒤에).</p><p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_1.png" /></p><p class="code">player_health = 100;</p><p class="dropspot"> 우리는 화살표 키를 사용하여 어떤 화살표 키를 눌렀는지에 따라 건강 값을 위 또는 아래로 변경하려고 하며 두 개의 <strong>Keyboard Pressed &lt;Arrow&gt;</strong> 이벤트를 추가하여 그렇게 할 수 있지만 <strong>단계 이벤트</strong> 와 일부 이벤트를 사용하는 것이 더 쉬울 것입니다. 코드를 사용하여 키를 확인하므로 다음 GML Visual 또는 GML을 사용하여 지금 <strong>단계 이벤트</strong> 를 추가하십시오.</p><p class="dropspot"><img alt="Step Event GML VisualActions" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_2.png" /></p><p class="code">if keyboard_check(vk_up)<br />
      {<br />
          if (player_health &lt; 100)<br />
          {<br />
              player_health = player_health + 1;<br />
          }<br />
      }<br />
      <br />
      if (keyboard_check(vk_down))<br />
      {<br />
          if (player_health &gt; 0)<br />
          {<br />
              player_health = player_health - 1;<br />
          }<br />
      }
    </p><p class="dropspot"> 이 작업이 완료되면 Draw GUI 이벤트에서 수행되는 체력 표시줄을 그릴 수 있으며 다음을 추가합니다(이미 있는 다른 항목 뒤에).</p><p class="dropspot"><img alt="GML VisualFor The Draw GUI Event To Draw A Healthbar" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_3.png" /></p><p class="code">var _xx = display_get_gui_width() / 2;<br />
      <br />
      draw_healthbar(_xx - 50, 24, _xx + 50, 40, player_health, c_black, c_red, c_lime, 0, true, true);
    </p><p class="dropspot"> 아직 방에 이 개체의 인스턴스를 추가하지 않은 경우(하나만!) 방에 추가한 다음 <strong>재생</strong> 버튼을 누릅니다.<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" />. 게임이 실행되면 <span class="inline">&lt;Up Arrow&gt;</span> 그리고 <span class="inline">&lt;Down Arrow&gt;</span> 키를 여러 번 눌러 건강 변화를 확인하십시오.</p><p class="dropspot"><img alt="Animation Of Drawing A Healthbar" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_8.gif" /></p></div><p></p><p> 이 예제를 수행한 후에 <span data-keyref="GameMaker Name">GameMaker</span> 를 사용할 때 좀 더 자신감을 갖고 모든 것이 어떻게 작동하는지 더 잘 이해할 수 있기를 바랍니다. 다음 섹션에서는 사용자 입력을 수락하고 응답할 뿐만 아니라 방을 움직이기 위해 그렸던 이러한 항목을 가져오는 방법을 살펴봅니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Content.htm">인덱스</a></div><div style="float:right"> 다음: <a href="Movement_And_Controls.htm">이동 및 제어</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Drawing
Drawing Examples
Quick Start Drawing
-->
  <!-- TAGS
qs_drawing
-->
</body>
</html>