<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>프로그래밍이란?</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="일반적으로 그리고 구체적으로 GameMaker를 사용하여 프로그램을 만드는 요소에 대한 간략한 설명입니다." />
  <meta name="rh-index-keywords" content="빠른 시작 - 프로그래밍이란?" />
  <meta name="search-keywords" content="프로그램 작성" />
  <meta name="robots" content="NOODP" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 프로그래밍이란?</h1><p> <a href="Quick_Start_Guide.htm">이전 섹션</a> 에서 <span data-keyref="GameMaker Name">GameMaker</span> 가 게임을 생성하는 방법에 대해 설명했지만 추가한 스프라이트, 개체 또는 방에 관계없이 발생하도록 <strong>프로그래밍</strong> 하지 않으면 아무 일도 일어나지 않습니다. 하지만, 프로그램이란 무엇입니까?</p><p> 일반적으로 프로그램은 특정 작업을 수행하도록 컴퓨터에 지시하는 명령(또는 <strong><a class="glossterm" data-glossterm="성명" href="#">명령문</a></strong> <span class="glossextra">s</span> )의 집합입니다. 이러한 작업은 단순히 컴퓨터에 화면에 무언가를 그리라고 지시하는 것부터 일부 사용자 입력을 기반으로 값을 계산한 다음 이에 반응하는 것까지 매우 다양할 수 있지만 모든 경우에 어느 정도 결과를 제공하는 논리적 구조입니다. 이전 페이지에서 우리는 객체의 인스턴스를 오른쪽으로 2픽셀 이동하는 것에 대해 이야기 했으므로 그렇게 하는 실제 프로그램을 살펴보겠습니다.</p><p> <span data-keyref="GML_Visual">GML Visual</span> 에서는 다음과 같이 보일 것입니다.</p><p><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p><p> 그리고 <span data-keyref="GML_Code">GML 코드</span> 를 사용하면 다음과 같이 보일 것입니다.</p><p class="code">x = x + 2;</p><p> 위에서 무슨 일이 일어나고 있는지 이해하려면 먼저 <strong>Variables</strong> 에 대해 이야기해야 하고, 그런 다음 <strong>Functions</strong> 와 마지막으로 <strong>Conditionals</strong> 에 대해 논의할 것입니다. 이 세 가지는 일반적으로 모든 프로그램의 대부분을 구성하기 때문입니다.</p><p></p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#">변수</a></p><div class="droptext" data-targetname="drop_down"><p class="dropspot"> 변수는 <strong>기능</strong> 과 함께 프로그래밍의 초석입니다(잠시 후에 간단히 다룰 예정입니다). 변수는 단순히 <em>명명된 값</em> 이며 위의 경우 변수를 &quot;<span class="inline">x</span> &quot;. 지금, &quot;<span class="inline">x</span> &quot;는 -126, 583 또는 1.56378과 같은 모든 값일 수 있지만 실제 값 &quot;<span class="inline">x</span> &quot;는 다를 수 있으므로 관련이 없습니다(따라서 &quot;변수&quot;라는 이름). 중요한 것은 &quot;<span class="inline">x</span> &quot;에 2를 더합니다. 이 경우 주목할 가치가 있습니다.&quot;<span class="inline">x</span> &quot;는 <strong>내장 변수</strong> 로, 모든 개체에 대해 <span data-keyref="GameMaker Name">GameMaker</span> 에서 생성한 변수이지만 사용자 고유의 변수도 생성할 수 있습니다.</p><p class="dropspot"> 변수를 생성하려면 변수를 <strong>선언</strong> 해야 사용할 수 있습니다. 변수를 선언하는 것은 <span data-keyref="GameMaker Name">GameMaker</span> 에 이 새로운 변수가 존재하고 초기 값이 있음을 알리는 것입니다. 변수를 선언하려면 다음과 같이 하면 됩니다.</p><p class="dropspot"><img alt="Declare GML VisualVariables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png" /></p><p class="dropspot"> 또는:</p><p class="code">points = 0;</p><p class="dropspot"> 변수가 선언되면 추가로 프로그래밍된 코드 또는 작업에서 사용할 수 있습니다. 변수의 가장 큰 장점은 값이 무엇인지 실제로 걱정할 필요 없이 여러 위치에서 값을 &quot;재사용&quot;할 수 있다는 것입니다. 예를 들어 &quot;<span class="inline">damage</span> &quot; 변수를 사용하고 <span data-keyref="GameMaker Name">GameMaker</span> 에 게임의 다른 개체에 일정량의 피해를 입히도록 지시하기 위해 다양한 위치에서 사용합니다. 우리는 &quot;<span class="inline">damage</span> &quot;로 20으로 지정했지만 나중에 이것이 너무 큰 값이라고 판단하여 10으로 변경하려고 합니다. 변수 대신 값 20을 사용했다면 모든 코드 또는 작업을 살펴보고 변경해야 합니다. 시간이 많이 걸리고 오류가 발생하기 쉬운 20에서 10이지만 변수를 사용하면 변수를 선언할 때 <em>한 번만</em> 10으로 변경하면 나머지 코드 또는 작업에서 이 새 값을 사용합니다.</p><p class="dropspot"> 다양한 유형의 변수가 있으며 각각 사용되는 방식이 약간 다르다는 점은 주목할 가치가 있습니다. 여기에서 다루지는 않겠지만 매뉴얼의 <a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm">GameMaker 언어 개요</a> 섹션에서 더 많은 정보를 찾을 수 있습니다.</p><p class="dropspot"> 그러나 변수는 이야기의 첫 부분일 뿐입니다. 다음 부분은 함수의 사용입니다...</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#">기능</a></p><div class="droptext" data-targetname="drop_down1"><p class="dropspot"> 프로그래밍에서 다음으로 중요한 부분은 변수와 함께 <strong>함수</strong> 를 사용하는 것입니다. 함수는 단순히 컴퓨터가 무언가를 하도록 지시하는 것일 뿐이며 입력 값과 출력 값을 모두 가질 수 있습니다(예: 함수에 값을 줄 수 있으며 일부 작업을 수행한 다음 다른 값을 반환함). 모든 기능에 입력이 필요한 것은 아니며 출력도 없습니다. 이를 더 잘 이해하기 위해 <span data-keyref="GameMaker Name">GameMaker</span> 의 내장 함수를 살펴보겠습니다.</p><p class="dropspot"> 우리가 살펴볼 기능은 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>, GML Visual에서 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">Get Instance Count</a> 작업입니다. 이 함수/액션은 게임 룸에서 주어진 개체의 인스턴스 수를 검색하며 다음과 같이 사용합니다.</p><p class="dropspot"><img alt="Get Instance Count GML VisualAction" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png" /></p><p class="dropspot"> 또는:</p><p class="code">number = instance_number(obj_Enemy);</p><p class="dropspot"> 위의 두 예에서 함수는 개체 ID를 입력 값( <strong><a class="glossterm" data-glossterm="논쟁" href="#">인수</a></strong> 또는 <strong>매개 변수</strong> )으로 사용하고 출력 값( <strong>반환</strong> 값)을 제공합니다. 함수/액션이 호출되었습니다. 반환된 값을 저장하기 위해 변수를 사용한다는 점에 유의하십시오.<span class="inline">number</span> &quot;. 이 변수는 이 코드가 실행되기 전에 선언될 수 있으며, 또는 코드가 실행될 때 선언된 것으로 간주되고 함수/액션의 반환 값이 할당됩니다.</p><p class="dropspot"> 내장된 GameMaker Language 또는 GML Visual 작업을 사용하는 것에 국한되지 않고 프로그래밍할 때 가능한 것을 확장하는 데 사용할 고유한 기능을 실제로 구성할 수 있다는 점에 주목할 가치가 있습니다( <a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">여기</a> 에서 GML 및 <a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">GML</a> Visual용).</p><p class="dropspot"> 함수와 변수로 많은 일을 할 수 있지만 프로그래밍 이야기의 마지막 중요한 부분인 <strong>조건문</strong> 없이는 거의 쓸모가 없습니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#">조건부</a></p><div class="droptext" data-targetname="drop_down2"><p class="dropspot"> 프로그래밍의 상당 부분은 질문으로 구성됩니다. 이러한 질문은 일반적으로 참 또는 거짓으로 평가할 수 있는 간단한 질문이며 <strong>조건문</strong> (및 <span class="inline">true </span> 그리고 <span class="inline">false </span> <strong>부울</strong> 값이라고 함). 가장 일반적이고 널리 사용되는 조건문은 &quot;<span class="inline">if</span> &quot;, 어떤 것이 있는지 확인하는 데 사용됩니다. <span class="inline">true </span> 또는 <span class="inline">false </span> 그런 다음 그에 따라 행동합니다. 간단한 예는 캐릭터의 건강이 0 아래로 떨어지면 게임에서 제거하는 것입니다. 이는 일반 언어로 다음과 같이 표현됩니다.</p><p class="code">if the character variable &quot;hp&quot; is less than or equal to zero, then destroy it.</p><p class="dropspot"> 위의 코드를 코드로 만들려면 다음과 같이 하십시오.</p><p class="dropspot"><img alt="GML VisualConditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png" /></p><p class="dropspot"> 또는:</p><p class="code">if (hp &lt;= 0)<br />
      {<br />
      <br />
          instance_destroy();<br />
      <br />
      }
    </p><p class="dropspot"> 따라서 위에서 &quot;hp 변수가 0보다 작거나 같은 경우&quot;라는 질문을 하고 그것이 true로 평가되면 함수를 호출합니다. <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a> 또는 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">Destroy Object Instance</a> 작업. &quot;<span class="inline">then</span> &quot;(if something... then something...)은 <em>암시적</em> 이며 추가할 필요가 없으며 GML 코드에서 중괄호를 사용합니다. <span class="inline">{} </span> &quot; <span class="inline">if</span> &quot;로 평가한다. <span class="inline">true </span> ( <em>GML</em> Visual에서 이것은 액션을 &quot;<span class="inline">If</span> &quot; action). 중괄호 사이에 추가된 모든 것은 &quot; <span class="inline">if</span> &quot;로 평가한다. <span class="inline">true</span>, 따라서 단일 &quot;블록&quot;에서 둘 이상의 명령문을 실행할 수 있습니다.</p><p class="dropspot"> &quot;를 사용할 때 주의할 사항이 하나 더 있습니다.<span class="inline">if</span> &quot; 조건부로 추가할 수 있습니다 &quot;<span class="inline">else</span> &quot;에 대한 진술도 있으므로 조건문은 &quot;만약 무언가가 다음과 같이 평가된다면&quot;이 될 것입니다. <span class="inline">true </span> 그런 다음 무언가를 하고, <em>그렇지 않으면 다른</em> 것을 하십시오.&quot; 이런 식으로 반환되는 조건식을 처리할 수 있습니다. <span class="inline">true </span> <em>또는</em> <span class="inline">false</span>. 그 예도 들어보겠습니다.</p><p class="dropspot"><img alt="GML VisualIf... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png" /></p><p class="dropspot"> 또는:</p><p class="code">if (countdown &lt;= 0)<br />
      {<br />
      <br />
          instance_create_layer(x, y, &quot;Instances&quot;, obj_Bullet);<br />
      <br />
          countdown = 30;<br />
      <br />
      }<br />
      else<br />
      {<br />
      <br />
          countdown = countdown - 1;<br />
      <br />
      }
    </p><p class="dropspot"> 위의 코드는 일반 언어로 다음과 같이 번역됩니다.</p><p class="code">if the countdown variable is less than or equal to zero then:<br />
      <br />
          create an instance of the object &quot;obj_Bullet&quot; at the current x/y position on the layer &quot;instances&quot;,<br />
      <br />
          reset the countdown variable to 30.<br />
      <br />
      else:<br />
      <br />
          subtract one from the countdown variable.
    </p><p class="dropspot"> 위 코드의 실제 인스턴스 생성 부분에 대해 너무 걱정하지 마십시오. 다음 섹션에서 더 자세히 다룰 것입니다. 여기서 이해해야 할 중요한 점은 무언가가 있는지 확인하는 조건식을 생성할 수 있다는 것입니다. <span class="inline">true </span> 또는 <span class="inline">false </span> 프로그램이 다양한 방식으로 응답하도록 합니다. 이것은 매우 간단해 보일 수 있지만 실제로는 믿을 수 없을 정도로 강력하며 <span data-keyref="GameMaker Name">GameMaker</span> 에서 프로그래밍할 때 수행하는 거의 모든 작업의 기초를 형성합니다.</p></div><p></p><p> 따라서 &quot;프로그래밍이란 무엇입니까?&quot;라는 질문에 답하기 위해 <strong>프로그래밍</strong> 은 <strong><a class="glossterm" data-glossterm="변하기 쉬운" href="#">변수</a></strong> <span class="glossextra">s</span> 를 사용할 수 있는 <strong>명령문</strong> 조합을 사용하고 있다고 말할 수 있습니다.<strong> </strong><strong><a class="glossterm" data-glossterm="표현" href="#">표현식</a></strong> 을 형성하기 위해 <span class="glossextra">s</span>, 작업을 수행하기 위한 <strong>함수</strong> 및 질문하기 위해 <strong><a class="glossterm" data-glossterm="가정 어구" href="#">조건부</a></strong> <span class="glossextra">s</span> - 그런 다음 목표를 달성하기 위해 이러한 명령문을 동시에 실행합니다. 아래에서 GML Visual 및 GML에서 약간 더 복잡한 프로그램을 볼 수 있습니다. 당신은 그것이 무엇을하는지 추측 할 수 있습니까?</p><p><img alt="GML VisualFinal Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png" /></p><p> 또는:</p><p class="code">if mouse_check_button_pressed(mb_left) == true<br />
    {<br />
    <br />
        x = mouse_x<br />
    <br />
        y = mouse_y<br />
    <br />
        image_blend = c_red;<br />
    <br />
    }<br />
    else<br />
    {<br />
    <br />
        if (mouse_check_button_released(mb_left) == true) <br />
        {<br />
    <br />
            image_blend = c_white;<br />
    <br />
        }<br />
    <br />
    }
  </p><p> <a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#">스포일러</a> <span class="expandtext" data-targetname="expanding">위의 코드 <strong>는</strong> 먼저 눌려진 마우스 버튼을 확인합니다(상수 &quot; <span class="inline">mb_left</span> &quot;), 눌려진 경우 코드를 실행하는 인스턴스를 현재 마우스 위치(내장 변수 &quot;를 사용하여 정의됨)로 이동합니다. <span class="inline">mouse_x</span> &quot; 그리고 &quot; <span class="inline">mouse_y</span> &quot;) 또한 인스턴스 블렌드 색상을 <strong>빨간색</strong> 으로 설정합니다. 마우스 버튼을 누르지 않은 경우 마우스 버튼을 놓았는지 확인하고, <strong>해제된</strong> 경우 인스턴스 블렌드 색상을 흰색으로 재설정합니다., 우리는 몇 가지 내장 <strong>상수</strong> 를 사용합니다 - &quot; <span class="inline">c_red</span> &quot; 그리고 &quot; <span class="inline">c_white</span> &quot; - 색상을 쉽게 정의).</span></p><p></p><p> 이제 프로그래밍이 무엇인지에 대해 조금 더 알게 되셨기를 바랍니다. <span data-keyref="GameMaker Name">이제 GameMaker</span> <a class="glossterm" data-glossterm="IDE" href="#">IDE</a> 를 탐색하고 게임에 필요한 <em>스프라이트</em>, <em>개체</em> 및 기타 중요한 리소스와 같은 자산을 추가하는 방법을 살펴보겠습니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Content.htm">인덱스</a></div><div style="float:right"> 다음: <a href="Creating_Sprites.htm">스프라이트 생성</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
What is Programming?
Quick Start: Programming
-->
  <!-- TAGS
qs_programming
-->
</body>
</html>