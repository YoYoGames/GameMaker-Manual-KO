<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>오디오 이미터</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="오디오 이미터와 관련된 다양한 기능 및 변수를 설명하는 페이지" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="오디오 이미터" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> <span data-field="title" data-format="default">오디오 이미터</span></h1><p> 오디오 이미터는 <span data-keyref="GameMaker Name">GameMaker</span> 오디오 엔진의 유연성을 높이기 위해 제공되며, 이를 통해 피치 및 도플러 변형과 같은 오디오 자산에 실시간 효과를 추가할 수 있을 뿐만 아니라 3D 오디오 공간 내에서 사운드를 배치하고 그들에게 현실적인 모션 효과. 이러한 모든 기능은 오디오 환경 내에서 <i>청취자</i> 의 위치에 영향을 받으므로 청취자 위치, 속도 및 방향도 변경하기 위해 제공된 기능을 사용해야 합니다( - <a href="../Audio_Listeners/Audio_Listeners.htm">오디오 청취자</a> 참조).</p><h2> 오디오 이미터 및 리스너 사용</h2><p> 오디오 이미터와 리스너를 결합하여 풍부하고 활기찬 환경을 만들 수 있습니다. 이것을 설정하는 것은 다소 복잡할 수 있으므로 이 부분에서는 이미터와 기본 리스너가 있는 전체 시스템을 설정하기 위해 수행해야 하는 작업을 살펴보겠습니다.</p><h3> 폴오프 모델 설정</h3><p> 오디오 이미터로 작업할 때(그리고 <span data-keyref="Position_Origin">(0, 0, 0)</span> 이 아닌 다른 위치에서 <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a> 를 사용하여 재생된 사운드로) 가장 먼저 할 일은 다음을 사용하여 폴오프 모델을 설정하는 것입니다. <span class="inline"><a href="../audio_falloff_set_model.htm">audio_falloff_set_model()</a></span>. 폴오프 모델은 청취자에서 방사체까지의 거리에 따라 재생되는 사운드의 볼륨이 어떻게 변하는지를 결정합니다.</p><p> 반드시 설정할 필요는 없지만 이 함수를 호출하지 않으면 사용된 모델이 기본값이 됩니다.<span class="inline">audio_fa<span class="inline"></span> lloff_none. 이것은 게인이 1로 설정되어 소리의 볼륨이 청취자에서 방출자까지의 거리에 따라 변하지 않음을 의미합니다.</p><p class="note"><span data-conref="../../../../../assets/snippets/Tag_note.hts"> </span>소리가 더 이상 최대 거리 이상으로 들리지 않도록 하려면 다음으로 끝나는 폴오프 모델 중 하나를 설정해야 합니다. <span class="inline">_scaled</span>.</p><h3> 리스너 업데이트</h3><p> 기본 오디오 리스너는 <span data-keyref="Position_Origin">(0, 0, 0)</span> 위치에 있습니다. <a href="../audio_play_sound.htm"><span class="notranslate">audio_play_sound</span></a> 는 청취자의 위치에서 소리를 재생합니다. 따라서 기본적으로 이러한 방식으로 재생되는 사운드는 오른쪽과 왼쪽의 두 스피커를 통해 들을 수 있습니다.</p><p> 사운드 또는 이미터에 대한 리스너의 상대 위치가 변경되는 순간부터(리스너 또는 이미터 위치를 변경하여) 더 이상 그렇지 않습니다.</p><p> 그것은 <strong>위치</strong> 를 가질 뿐만 아니라, <a href="../Audio_Listeners/audio_listener_orientation.htm"><span class="notranslate">audio_listener_orientation</span></a> 을 사용하여 변경할 수 있는 <strong>방향</strong> 도 가지고 있습니다. 그러나 기본적으로 그 방향은 거꾸로 되어 있습니다! 기본 방향은 위쪽 벡터가 <span data-keyref="Unit_Vector_Y">(0, 1, 0)</span> 으로 설정되어 있지만 <span data-keyref="GameMaker Name">GameMaker</span> 의 y 축이 아래쪽을 가리키기 때문에 청취자가 방에 거꾸로 서 있다는 의미입니다.</p><p> 왼쪽 스피커에서 들을 것으로 예상하는 모든 것이 실제로 오른쪽 스피커에서 들리고 그 반대의 경우도 마찬가지입니다(이가 어떻게 보이는지 이미지는 <a href="../Audio_Listeners/audio_listener_orientation.htm"><span class="notranslate">audio_listener_orientation</span></a> 페이지 참조). 따라서 이미터와 리스너를 움직이기 시작하면 리스너의 방향을 다음으로 설정해야 합니다.</p><p class="code">audio_listener_orientation(0, 0, 1, 0, -1, 0);</p><p> 위의 코드 줄은 기본 리스너의 방향을 설정 <strong>하여 화면</strong> 을 <strong>바라보고 위로 향</strong> 하도록 합니다. 따라서 이것은 화면을 보고 있는 컴퓨터에 서 있거나 앉아 있는 청취자에 해당합니다.</p><p> 하향식 게임을 만들 때 청취자의 방향이 플레이어(또는 다른 &quot;청취자&quot;)가 향하고 있는 방향을 따르도록 하는 것이 더 흥미로울 수 있습니다. 다음 코드 줄로 수행할 수 있습니다.</p><p class="code">audio_listener_orientation(0, 0, 1, lengthdir_x(1, direction), lengthdir_y(1, direction), 0);</p><p> 이 코드 줄에서는 전혀 변경되지 않는 위쪽 벡터(y = -1 항상)를 사용하는 대신 플레이어의 방향에 따라 변경합니다. 이를 수행하는 가장 간단한 방법은 <a href="../../../Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm"><span class="notranslate">lengthdir_x</span></a> 및 <a href="../../../Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm"><span class="notranslate">lengthdir_y</span></a> 함수를 사용하는 것입니다. 리스너가 여전히 화면을 보고 있기 때문에 벡터를 보는 것은 동일하게 유지될 수 있습니다.</p><h3> 소리 재생</h3><p> 폴오프 모델을 설정하고 청취자의 위치와 방향이 올바르게 업데이트되었는지 확인한 후 <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a> 를 사용하여 3D 오디오 공간에서 사운드 재생을 시작할 수 있습니다.</p><p class="code">sound_instance = audio_play_sound_at(snd_Explosion, x, y, 0, 100, 300, 1, true, 1);</p><p> 위의 코드 줄은 폴오프 참조 거리가 100이고 폴오프 최대 거리가 300이고 폴오프 계수가 1인 위치 (x, y, 0) <strong>에서</strong> 사운드 &quot;snd_Explosion&quot;을 재생합니다.</p><p> 위의 <span class="inline">snd_Bird>sound_instance</span> 변수를 통해 액세스할 수 있으므로 사운드의 특정 속성을 변경할 수 있습니다. 그러나 이는 게인, 오프셋 및 피치와 같은 사운드 자체의 속성일 뿐입니다. <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a> 를 사용하여 재생되는 사운드의 위치나 속도를 변경할 수 있는 방법은 없습니다.</p><p> 대체로 <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a> 는 3D 오디오 공간에서 간단한 사운드를 재생하는 좋은 방법이지만 제한적입니다. 사운드가 재생되면 위치, 속도 또는 폴오프 매개변수를 변경할 수 없습니다. 위치 및 폴오프 매개변수 <i>는</i> 함수에 전달되지만 이후에는 변경할 수 없습니다.</p><p> 사운드 재생 방법을 더 자세히 제어하려면 오디오 이미터를 사용하십시오.</p><h3> 이미터 추가</h3><p> 오디오 이미터는 <a href="audio_emitter_create.htm"><span class="notranslate">audio_emitter_create</span></a> 를 사용하여 추가됩니다. 그것들은 <span data-keyref="Position_Origin">(0, 0, 0)</span> 에 배치되고, 0의 속도와 기본 폴오프 설정을 갖습니다.</p><p class="code">emitter = audio_emitter_create();</p><h3> 이미터 업데이트</h3><p> 오디오 이미터는 소리를 &quot;발산&quot;합니다. 현실 세계의 스피커에 비유할 수 있습니다.</p><p> <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a> 에 비해 이미터는 <a href="audio_play_sound_on.htm"><span class="notranslate">audio_play_sound_on</span></a> 을 사용하여 사운드 재생을 시작한 후 위치, 속도, 리스너 마스크 및 폴오프 매개변수를 변경할 수 있습니다.</p><p> 이미터의 위치는 <a href="audio_emitter_position.htm"><span class="notranslate">audio_emitter_position</span></a> 을 사용하여 업데이트할 수 있습니다. 이것은 인스턴스의 위치로 설정할 수 있습니다.</p><p class="code">audio_emitter_position(emitter, x, y, 0);</p><p> 이미터의 속도는 <a href="audio_emitter_velocity.htm"><span class="notranslate">audio_emitter_velocity</span></a> 를 사용하여 업데이트됩니다. 속도를 설정하는 가장 쉬운 방법은 다음과 같이 인스턴스의 <a href="../../Instances/Instance_Variables/hspeed.htm"><span class="notranslate">hspeed</span></a> 및 <a href="../../Instances/Instance_Variables/vspeed.htm"><span class="notranslate">vspeed</span></a> 로 설정하는 것입니다. </p><p class="code">audio_emitter_velocity(emitter, hspeed, vspeed, 0);</p><p class="note"><span data-conref="../../../../../assets/snippets/Tag_note.hts"> </span>오디오 이미터의 <i>속도</i> 는 <i>단계당 픽셀</i> 로 표시됩니다.<span><span></span></span></p><h3> <span data-keyref="GameMaker Name">GameMaker</span> 에서 만든 오디오 이미터</h3><p> <a href="../../Sequences/Sequences.htm">시퀀스</a> 로 작업할 때 <span data-keyref="GameMaker Name">GameMaker</span> 는 시퀀스의 모든 오디오 트랙( <span> <span class="inline">audio_listener_set_>seqtracktype_audio</span> )에 대해 오디오 이미터를 추가합니다.</span> 이 이미터의 ID는 <a href="../../Sequences/Sequence_Structs/The_Sequence_Instance_Struct.htm">시퀀스 인스턴스의</a> <span class="inline">audio_listener_>activeTracks[i].emitterIndex</span> 속성에서 찾을 수 있습니다.</p><p> <span data-keyref="GameMaker Name">GameMaker</span> 는 이러한 이미터의 위치를 자동으로 업데이트합니다. 오디오 트랙 이미터의 속도를 업데이트하지는 않지만 <a href="../../Sequences/Sequence_Events_Moments_Broadcast.htm">시퀀스 단계 이벤트</a> 중 하나에서 <a href="audio_emitter_velocity.htm"><span class="notranslate">audio_emitter_velocity</span></a> 를 호출하여 직접 수행할 수 있습니다.</p><h3> 이미터에서 사운드 재생</h3><p> <a href="audio_play_sound_on.htm"><span class="notranslate">audio_play_sound_on</span></a> 을 사용하여 이미터 <strong>에서</strong> 사운드를 재생할 수 있습니다.</p><p class="code">sound_instance = audio_play_sound_on(snd_Explosion, x, y, 0, 100, 300, 1, true, 1);<br />
    <span></span>
  </p><h3> 사운드 인스턴스 재생 추적</h3><p> <a href="../audio_play_sound.htm"><span class="notranslate">audio_play_sound</span></a>, <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a> 또는 <a href="audio_play_sound_on.htm"><span class="notranslate">audio_play_sound_on</span></a> 중 하나를 호출할 때마다 새 사운드 <strong>인스턴스</strong> 를 만듭니다.</p><p> 재생 중인 사운드 인스턴스는 위치가 청취자로부터 너무 멀리 떨어져 있는 등 여러 가지 이유로 들리지 않을 수 있습니다. 그러나 항상 존재합니다.</p><p> 사운드 인스턴스의 속성을 변경하려면 다음과 같이 반환 값을 변수에 할당해야 합니다.</p><p class="code">sound_instance = audio_play_sound_at(snd_Explosion, x, y, 0, 100, 300, 1, true, 1);</p><p> 어느 시점에서 꽤 많은 사운드 인스턴스가 재생될 수 있습니다. 이 경우 다음과 같이 배열에 저장할 수 있습니다.</p><p class="code">var _x = random(room_width);<br />
    var _y = random(room_height);<br />
    var _new_sound_instance = audio_play_sound_at(snd_Bird, _x, _y, 0, 200, 400, true, 10);<br />
    array_push(bird_sounds, _new_sound_instance);</p><p> 위의 코드가 실행될 때마다 새로 생성된 사운드 인스턴스의 ID가 <span class="inline2">bird_sounds</span> 배열에 추가됩니다.</p><p> 이 방법으로 모든 사운드 인스턴스(<span class="inline"></span> 위의 예에서) 재생 중입니다.</p><p class="note"><span data-conref="../../../../../assets/snippets/Tag_important.hts"> </span>소리가 &quot;재생&quot;되고 있다고 해서 반드시 듣는 사람이 들을 수 있는 것은 아닙니다. 재생을 멈춘 사운드, 청취자에게서 너무 멀리 떨어져 있거나 너무 낮은 게인 세트가 있는(또는 너무 낮은 게인 세트가 있는 이미터에서 재생되는) 사운드는 들리지 않습니다.</p><h3> 추가 리스너</h3><p> 추가 리스너를 사용하려면 먼저 시스템이 <a href="../Audio_Listeners/audio_get_listener_count.htm"><span class="notranslate">audio_get_listener_count</span></a> 를 사용하여 여러 리스너를 지원하는지 확인해야 합니다.</p><p> 리스너가 둘 이상인 경우 <a href="../Audio_Listeners/audio_get_listener_info.htm"><span class="notranslate">audio_get_listener_info</span></a> 를 사용하여 모든 리스너의 이름, 리스너 마스크 및 인덱스를 가져올 수 있습니다.</p><p> 리스너 인덱스를 알고 있다면 다음으로 시작하는 기능을 사용하여 설정(위치, 속도 및 방향)을 변경할 수 있습니다.<span class="inline"></span> 대신에<span class="inline"></span>.</p><h2> 기능</h2><p> 오디오 이미터를 처리하기 위해 다음과 같은 기능이 있습니다.</p><ul class="colour"><li> <a href="audio_emitter_create.htm"><span class="notranslate">audio_emitter_create</span></a></li><li> <a href="audio_emitter_exists.htm"><span class="notranslate">audio_emitter_exists</span></a></li><li> <a href="audio_emitter_position.htm"><span class="notranslate">audio_emitter_position</span></a></li><li> <a href="audio_emitter_velocity.htm"><span class="notranslate">audio_emitter_velocity</span></a></li><li> <a href="audio_emitter_falloff.htm"><span class="notranslate">audio_emitter_falloff</span></a></li><li> <a href="audio_emitter_gain.htm"><span class="notranslate">audio_emitter_gain</span></a></li><li> <a href="audio_emitter_pitch.htm"><span class="notranslate">audio_emitter_pitch</span></a></li><li> <a href="audio_emitter_set_listener_mask.htm"><span class="notranslate">audio_emitter_set_listener_mask</span></a></li><li> <a href="audio_emitter_free.htm"><span class="notranslate">audio_emitter_free</span></a></li><li> <a href="audio_play_sound_on.htm"><span class="notranslate">audio_play_sound_on</span></a></li><li> <a href="audio_emitter_get_gain.htm"><span class="notranslate">audio_emitter_get_gain</span></a></li><li> <a href="audio_emitter_get_pitch.htm"><span class="notranslate">audio_emitter_get_pitch</span></a></li><li> <a href="audio_emitter_get_x.htm"><span class="notranslate">audio_emitter_get_x</span></a></li><li> <a href="audio_emitter_get_y.htm"><span class="notranslate">audio_emitter_get_y</span></a></li><li> <a href="audio_emitter_get_z.htm"><span class="notranslate">audio_emitter_get_z</span></a></li><li> <a href="audio_emitter_get_vx.htm"><span class="notranslate">audio_emitter_get_vx</span></a></li><li> <a href="audio_emitter_get_vy.htm"><span class="notranslate">audio_emitter_get_vy</span></a></li><li> <a href="audio_emitter_get_vz.htm"><span class="notranslate">audio_emitter_get_vz</span></a></li><li> <a href="audio_emitter_get_listener_mask.htm"><span class="notranslate">audio_emitter_get_listener_mask</span></a></li> </ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Audio.htm">오디오</a></div><div style="float:right"> 다음: <a href="../Audio_Listeners/Audio_Listeners.htm">오디오 리스너</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Audio Emitters
-->
  <!-- TAGS
audio_emitter_functions
-->
</body>
</html>