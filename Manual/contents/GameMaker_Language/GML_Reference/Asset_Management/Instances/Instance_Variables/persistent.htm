<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>persistent</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="영구 변수를 설명하는 페이지" />
  <meta name="rh-index-keywords" content="persistent" />
  <meta name="search-keywords" content="persistent" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>persistent</h1><p> 이 변수는 인스턴스가 다음과 같이 플래그가 지정되었는지 알아보기 위해 읽을 수 있습니다. <span class="inline">persistent</span> 또는 지속성을 설정하는 데 사용할 수 있습니다. <span class="inline">true</span> (지속적) 또는 <span class="inline">false</span> (영구적이지 않음) 인스턴스에 대한. 영구 인스턴스는 방에서 방으로 &quot;이동&quot;되는 인스턴스로, 예를 들어 게임 시작 시 한 번만 생성하면 나머지 모든 방에 존재한다는 의미입니다. 지속성 인스턴스는 나중에 게임 개발에서 문제로 이어질 수 있으므로 추적을 잃기 쉽기 때문에 지속성에 주의해야 합니다.</p><p> 방에서 지속성이 활성화된 인스턴스를 만들 때 이 변수는 다음으로 설정됩니다. <span class="inline">true</span> 레이어 또는 깊이가 할당됩니다(객체의 인스턴스를 만드는 데 사용한 기능에 따라 다름). 룸이 변경되고 다음 룸에 할당된 것과 동일한 이름이나 깊이를 가진 레이어가 <i>없으면</i> 룸 전체에 지속되는 인스턴스에 대해 새 레이어가 생성됩니다. 인스턴스를 생성할 때 명명된 레이어를 지정했다면 새 레이어의 이름도 원래 레이어와 동일하게 지정되고, 인스턴스에 깊이를 지정했다면 새 레이어의 이름은 &quot;<span class="inline">_layer_XXX</span> &quot;, 여기서 &quot;XXX&quot;는 레이어에 고유한 이름을 지정하는 데 사용되는 16진수 값입니다. 이러한 레이어는 Room End의 룸에서 제거됩니다. 레이어 및 영구 인스턴스에 대해 주의해야 할 또 다른 사항은 인스턴스에 이름을 지정한 경우 생성할 때 레이어가 생성되고 다음 룸에 같은 이름의 다른 레이어가 있는 경우 레이어 <i>의 깊이에 관계없이</i> 동일한 이름의 레이어에 지속 인스턴스가 할당됩니다.마지막으로 지속 인스턴스가 방으로 이동하는 경우 인스턴스가 생성된 것과 동일한 깊이의 레이어가 있는 경우 이 레이어에 할당 <i>되지 않고</i> 대신 동일한 깊이에서 새 레이어가 생성됩니다(이전에 설명한 명명 규칙에 따름).</p><p> 영구 개체는 여전히 <b>Game Start</b>, <b>Game End</b>, <b>Room Start</b> 및 <b>Room End</b> 이벤트가 트리거되지만 게임을 다시 시작하면(예: <span class="inline">game_restart()</span> 기능) 모든 영구 개체는 제거되고 게임에서 다시 생성될 때만 존재합니다. 또한 영구 개체를 비활성화하면 Room End 이벤트가 트리거되기 전에 다시 활성화되지 않는 한 더 이상 한 방에서 다른 방으로 전달되지 않습니다.</p><p></p><h4> 통사론:</h4><p class="code">persistent;</p><p></p><h4> 보고:</h4><p class="code"><span data-keyref="Type_Bool"></span></p><p></p><h4> 예시:</h4><p class="code">if !persistent<br />
    {<br />
        persistent = true;<br />
    }</p><p> 위의 코드는 인스턴스를 확인하여 지속성에 플래그가 지정되어 있는지 확인합니다. <span class="inline">false</span> 인스턴스가 지속적이지 않은 경우 지속성 플래그가 다음으로 설정됩니다. <span class="inline">true</span>. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="Instance_Variables.htm">인스턴스 변수</a></div><div style="float:right"> 다음: <a href="depth.htm"><span class="notranslate">depth</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
persistent
-->
  <!-- TAGS
persistent
-->
</body>
</html>