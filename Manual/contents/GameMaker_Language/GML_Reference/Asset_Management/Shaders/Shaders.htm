<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>셰이더</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="셰이더와 관련된 다양한 기능 및 변수를 설명하는 페이지" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="셰이더,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 셰이더</h1><p> 셰이더는 그래픽 카드가 화면에 무엇을 어떻게 <a class="glossterm" data-glossterm="렌더링" href="#">렌더링</a> 하는지 조작하는 매우 강력한 도구입니다. 이 작은 프로그램은 실제로 그래픽 카드 자체에서 실행되기 때문에 처리 속도가 매우 빨라서 더 많은 게임 논리를 위한 귀중한 CPU 주기를 확보할 수 있습니다.</p><p> 셰이더를 생성하려면 <a href="../../../../The_Asset_Editors/Shaders.htm">셰이더 편집기</a> 를 사용하여 <b>정점 셰이더</b> 와 <b>조각 셰이더</b> ( <b>픽셀 셰이더</b> 라고도 함)를 모두 작성해야 하며, 예를 들어 인스턴스의 정점 위치만 변경하려는 경우에도 또는 픽셀의 색상 값만 변경하려는 경우 완전한 셰이더가 작동하려면 <b>두</b> 프로그램이 모두 필요합니다.</p><p class="note"> <span class="note">참고</span> 셰이더는 전달한 변수의 값을 변경하는 것을 허용하지 <b>않으므로</b> 이를 참조하는 모든 문서에서 <b>셰이더 상수</b> 라고 합니다.</p><p> 셰이더 자체를 프로그래밍하는 데 사용할 수 있는 사용 가능한 GLSL ES 함수 및 변수에 대한 전체 개요는 <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_cm_spec_2.0.pdf" target="_blank">OpenGL ES Shading Language(GLSL ES) 참조 페이지</a> 를 참조하십시오. 다음 링크는 OpenGL ES API에 대한 몇 가지 빠른 참조 카드가 포함되어 있으므로 유용합니다(표시된 마지막 두 카드만 <span data-keyref="GameMaker Name">GameMaker</span> 에 적용할 수 있음): <a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">OpenGL ES 참조 카드</a>.</p><p> 프로젝트에서 셰이더를 사용하는 것은 매우 간단하며 가장 기본적인 사용법을 얻기 위해 몇 줄의 코드만 있으면 됩니다.</p><p class="code">shader_set(myShader);<br />
    draw_self();<br />
    shader_reset();</p><p> 보시다시피 블렌드 모드 및 표면과 유사한 방식으로 사용되며, 먼저 셰이더를 선택(설정)하고 이를 사용하여 원하는 것을 그린 다음 나중에 그리기 대상을 다시 재설정합니다. 단일 스프라이트나 배경이 아닌 셰이더를 통해 전체 화면을 렌더링하려면 현재 보기를 포착하도록 표면을 설정한 다음 이를 셰이더에 전달해야 합니다(자세한 내용은 <a href="../../Drawing/Surfaces/Surfaces.htm">표면</a> 참조)..</p><p class="note"> <b>참고</b>: 그리기와 관련된 모든 것과 마찬가지로 셰이더 <b>는 그리기 이벤트에서만 사용할</b> 수 있습니다. 또한 셰이더에서 색상 값을 사용하려고 할 때 개체에 텍스처가 없으면 결과가 검은색으로 나타납니다.</p><p> 사용 중인 셰이더에 입력 값이 있는 경우 이 값은 <i>균일</i> 함수를 사용하여 설정됩니다. 함수를 사용하여 먼저 유니폼 <i>핸들</i> (기본적으로 설정할 유니폼의 ID 값임)을 얻습니다.<a href="shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a> 셰이더를 사용하여 인스턴스의 <b>이벤트 만들기</b> 에서 다음과 같이 이러한 핸들을 변수에 저장합니다.</p><p class="code">colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br />
    colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);</p><p> 균일한 핸들이 있으면 다음과 같이 <b>그리기 이벤트</b> 에 대한 셰이더 코드에서 설정할 수 있습니다.</p><p class="code">shader_set(sShaderDemo5);<br />
    shader_set_uniform_f(colour_to_find, 1,1,1 );<br />
    shader_set_uniform_f(colour_to_set, 1,0,0 );<br />
    draw_sprite(sprite_index,image_index,x+24, y);<br />
    shader_reset();</p><p> 마지막으로 셰이더는 모든 플랫폼에서 허용되지만 여전히 장치에 따라 다르며 장치의 하드웨어나 소프트웨어에서 셰이더를 사용할 수 없는 경우 오류가 발생합니다. 따라서 다음과 같이 유니폼을 설정하거나 셰이더 자체를 사용하기 전에 셰이더가 컴파일되었는지 확인하는 것이 좋습니다.</p><p class="code">if (shader_is_compiled(myShader))<br />
    {<br />
        shader_set(myShader);<br />
        draw_self();<br />
        shader_reset();<br />
    }<br />
    else show_debug_message(&quot;Shader failed&quot;);</p><p> 추가 확인으로 함수를 호출할 수도 있습니다.<a href="shaders_are_supported.htm"><span class="inline">shaders_are_supported()</span></a> 하드웨어가 셰이더를 지원하는지 확인합니다. 일반적으로 게임 시작 시 이러한 검사를 수행하고 결과를 <a href="../../../GML_Overview/Variables/Global_Variables.htm">전역 변수</a> 로 저장하여 나중에 확인할 수 있습니다.</p><p> <span data-keyref="GameMaker Name">GameMaker</span> 는 GLSL ES 셰이더 내에서 사용할 수 있는 일부 조건부 컴파일 <b>매크로</b> 도 지원하므로 특정 지원 플랫폼에서 대체 코드를 수행할 수 있습니다. 매크로와 매크로가 생성될 플랫폼은 아래 표에 나와 있습니다.</p><p></p><table><tbody><tr><th> 셰이더 매크로</th><th> 값</th><th> 대상 플랫폼</th></tr><tr><td> _YY_GLSLES_</td><td> 1</td><td> 모든 대상 플랫폼</td></tr><tr><td> _YY_GLSL_</td><td> 2</td><td> 맥과 우분투(리눅스)</td></tr><tr><td> _YY_HLSL11_</td><td> 삼</td><td> 윈도우, UWP, 엑스박스원</td></tr><tr><td> _YY_PSSL_</td><td> 4</td><td> PS4</td></tr></tbody></table><p></p><p> GLSL ES 형식 셰이더를 사용하여 나열된 플랫폼 중 하나에서 <span data-keyref="GameMaker Name">GameMaker</span> 프로젝트를 컴파일하면 위의 매크로 <i>중 하나</i> 가 생성되며 다음과 같이 셰이더 코드에서 확인할 수 있습니다.</p><p class="code">#ifdef _YY_HLSL11_<br />
    // HLSL shader code here<br />
    #else<br />
    // GLSL shader code here<br />
    #endif</p><p> 셰이더를 처음 사용하거나 <span data-keyref="GameMaker Name">GameMaker</span> 를 사용하여 셰이더를 만들고 사용하는 방법에 대한 더 완전한 가이드를 원하는 경우 다음 매뉴얼 페이지를 참조하십시오.</p><ul class="colour"><li> <a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm">셰이더 사용 가이드</a></li></ul><p></p><p> 다음 기능은 셰이더를 그리고 설정하는 데 사용할 수 있습니다.</p><p></p><ul class="colour"><li> <a href="shader_get_name.htm"><span class="notranslate">shader_get_name</span></a></li><li> <a href="shader_get_uniform.htm"><span class="notranslate">shader_get_uniform</span></a></li><li> <a href="shader_get_sampler_index.htm"><span class="notranslate">shader_get_sampler_index</span></a></li><li> <a href="shader_set.htm"><span class="notranslate">shader_set</span></a></li><li> <a href="shader_set_uniform_f.htm"><span class="notranslate">shader_set_uniform_f</span></a></li><li> <a href="shader_set_uniform_f_array.htm"><span class="notranslate">shader_set_uniform_f_array</span></a></li><li> <a href="shader_set_uniform_i.htm"><span class="notranslate">shader_set_uniform_i</span></a></li><li> <a href="shader_set_uniform_i_array.htm"><span class="notranslate">shader_set_uniform_i_array</span></a></li><li> <a href="shader_set_uniform_matrix.htm"><span class="notranslate">shader_set_uniform_matrix</span></a></li><li> <a href="shader_set_uniform_matrix_array.htm"><span class="notranslate">shader_set_uniform_matrix_array</span></a></li><li> <a href="shader_reset.htm"><span class="notranslate">shader_reset</span></a></li><li> <a href="shader_is_compiled.htm"><span class="notranslate">shader_is_compiled</span></a></li><li> <a href="shaders_are_supported.htm"><span class="notranslate">shaders_are_supported</span></a></li><li> <a href="shader_current.htm"><span class="notranslate">shader_current</span></a></li></ul><p></p><p> 또한 모든 셰이더에 대한 전역 상태를 정의하는 특수 기능이 있습니다.</p><ul><li> <a href="shader_enable_corner_id.htm"><span class="notranslate">shader_enable_corner_id</span></a></li></ul><p></p><p> 셰이더에서 텍스처 샘플러로 작업할 때 사용 중인 텍스처에 대한 정보가 필요하며 이 경우 다음 기능을 사용할 수 있습니다.</p><p></p><ul class="colour"><li> <a href="../Sprites/Sprite_Information/sprite_get_texture.htm"><span class="notranslate">sprite_get_texture</span></a></li><li> <a href="../Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="notranslate">sprite_get_uvs</span></a></li><li> <a href="../Fonts/font_get_texture.htm"><span class="notranslate">font_get_texture</span></a></li><li> <a href="../Fonts/font_get_uvs.htm"><span class="notranslate">font_get_uvs</span></a></li><li> <a href="../../Drawing/Textures/texture_get_width.htm"><span class="notranslate">texture_get_width</span></a></li><li> <a href="../../Drawing/Textures/texture_get_height.htm"><span class="notranslate">texture_get_height</span></a></li><li> <a href="../../Drawing/Textures/texture_get_texel_width.htm"><span class="notranslate">texture_get_texel_width</span></a></li><li> <a href="../../Drawing/Textures/texture_get_texel_height.htm"><span class="notranslate">texture_get_texel_height</span></a></li><li> <a href="../../Drawing/Textures/texture_set_stage.htm"><span class="notranslate">texture_set_stage</span></a></li><li> <a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm"><span class="notranslate">gpu_set_texfilter_ext</span></a></li><li> <a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm"><span class="notranslate">gpu_set_texrepeat</span></a></li></ul><p></p><p> 이 설명서는 Open GL 셰이더 기능 및 변수를 다루지 <b>않지만</b> <span data-keyref="GameMaker Name">GameMaker</span> 에 고유한 기능 및 변수 목록을 포함합니다. 이러한 상수는 셰이더에 대한 Open GL 사양의 일부가 아니며 프로젝트 내에서 셰이더 통합을 단순화하기 위해 제공됩니다.</p><ul class="colour"><li> <a href="Shader_Constants.htm">셰이더 상수</a></li></ul><p></p><p> 마지막으로 <span data-keyref="GameMaker Name">GameMaker</span> 를 사용하면 고유한 사용자 정의 프리미티브를 생성할 수 있는 고유한 <b>정점 형식</b> 을 정의할 수 있습니다. 이것은 셰이더 작업의 속도를 크게 높이거나 기능을 확장하고 놀라운 효과를 만드는 데 사용할 수 있습니다. 다음 섹션에서 이에 대한 정보를 찾을 수 있습니다.</p><ul class="colour"><li> <a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">기본체 및 정점 형식</a> </li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Asset_Management.htm">자산 관리</a></div><div style="float:right"> 다음: <a href="../Sequences/Sequences.htm">시퀀스</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
shader_functions
-->
</body>
</html>