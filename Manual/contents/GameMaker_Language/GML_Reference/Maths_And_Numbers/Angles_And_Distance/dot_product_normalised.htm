<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>dot_product_normalised</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="dot_product_normalised에 대한 참조 페이지" />
  <meta name="rh-index-keywords" content="dot_product_normalised,dot_product_normalized" />
  <meta name="search-keywords" content="dot_product_normalised,dot_product_normalized" />
  <meta name="is_pure" content="true" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>dot_product_normalised</h1><p> 내적은 두 벡터 사이의 각도 관계를 나타내는 값으로 두 벡터를 취하여 곱한 다음 결과를 더하여 구합니다. &quot;내적&quot;이라는 이름은 이 연산을 지정하는 데 자주 사용되는 중심 점 &quot;·&quot;에서 파생되었습니다(대체 이름 &quot;스칼라 곱&quot;은 결과의 벡터 특성보다 스칼라를 강조합니다).</p><p> 실제 수학 공식은 다음과 같이 작성할 수 있습니다.</p><p><img alt="Dot Product formula" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image.png" /> 따라서 2D에서 벡터의 내적 <span class="inline">a[x1,y1]</span> 그리고 <span class="inline">b[x2,2]</span> ~이다 <span class="inline">x1x2 + y1y2</span>, 즉 GameMaker의 <span data-keyref="GameMaker Name">dot_product</span> 는 다음과 같이 계산됩니다.</p><p class="code">a · b = (x1*x2)+(y1*y2);</p><p> <i>정규화된</i> 내적은 어떻습니까? 정규화된 내적은 반환 값을 -1과 1의 범위로 가져오는 방식으로 수정되었습니다(자세한 내용은 <a href="../../../../Additional_Information/Vectors.htm">벡터</a> 섹션 참조). 이는 특히 조명을 다룰 때 많은 상황에서 매우 유용합니다. 및 기타 3D 기능.</p><p></p><h4> <b>통사론:</b></h4><p class="code">dot_product_normalised(x1, y1, x2, y2)</p><table><tbody><tr><th> 논쟁</th><th> 유형</th><th> 설명</th></tr><tr><td> <span class="notranslate">x1</span></td><td><span data-keyref="Type_Real"></span></td><td> <span class="notranslate">The x coordinate of the first vector.</span></td></tr><tr><td> <span class="notranslate">y1</span></td><td><span data-keyref="Type_Real"></span></td><td> <span class="notranslate">The y coordinate of the first vector.</span></td></tr><tr><td> <span class="notranslate">x2</span></td><td><span data-keyref="Type_Real"></span></td><td> <span class="notranslate">The x coordinate of the second vector.</span></td></tr><tr><td> <span class="notranslate">y2</span></td><td><span data-keyref="Type_Real"></span></td><td> <span class="notranslate">The y coordinate of the second vector.</span></td></tr></tbody></table><p></p><h4> 보고:</h4><p class="code"><span data-keyref="Type_Real"></span></p><p></p><h4> 예시:</h4><p class="code">var x1, y1, x2, y2;<br/> x1 = lengthdir_x(1, image_angle);<br/> y1 = lengthdir_y(1, image_angle);<br/> x2 = o_Player.x - x;<br/> y2 = o_Player.y - y;<br/> if dot_product_normalised(x1, y1, x2, y2) &gt; 0 seen=true else seen=false;</p><p> 위의 코드는 인스턴스 이미지 각도를 사용하여 벡터를 만든 다음 플레이어 개체 &quot;o_Player&quot;의 벡터를 자체적으로 가져옵니다. 마지막으로 이 두 벡터의 내적을 계산하고 0보다 크면 &quot;보는&quot; 변수를 참으로 설정하고 0보다 작거나 같으면 &quot;거짓&quot;으로 설정합니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤: <a href="Angles_And_Distance.htm">각도와 거리</a></div><div style="float:right"> 다음: <a href="dot_product_3d_normalised.htm"><span class="notranslate">dot_product_3d_normalised</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
dot_product_normalised
dot_product_normalized
-->
  <!-- TAGS
dot_product_normalised
-->
</body>
</html>