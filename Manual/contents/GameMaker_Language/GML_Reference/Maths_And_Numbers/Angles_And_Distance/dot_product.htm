<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>dot_product</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"/>
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="dot_product에 대한 참조 페이지"/>
  <meta name="rh-index-keywords" content="dot_product"/>
  <meta name="search-keywords" content="dot_product"/>
  <meta name="is_pure" content="true" />
</head>

<body><!--<div class="body-scroll" style="top: 150px;">--><h1>dot_product</h1><p> 내적은 두 벡터 사이의 각도 관계를 나타내는 값으로 두 벡터를 취하여 곱한 다음 결과를 더하여 구합니다. &quot;내적&quot;이라는 이름은 이 연산을 지정하는 데 자주 사용되는 중심 점 &quot;·&quot;에서 파생되었습니다(대체 이름 &quot;스칼라 곱&quot;은 결과의 벡터 특성보다 스칼라를 강조합니다).</p><p> 실제 수학 공식은 다음과 같이 작성할 수 있습니다.</p><p><img alt="Dot Product formula" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image.png"/></p><p> 따라서 2D에서 벡터의 내적 <span class="inline">a[x1,y1]</span> 그리고 <span class="inline">b[x2,2]</span> ~이다 <span class="inline">x1x2 + y1y2</span>, 즉 GameMaker의 <span data-keyref="GameMaker Name">dot_product</span> 는 다음과 같이 계산됩니다.</p><p class="code">a · b = (x1*x2)+(y1*y2);</p><p> 내적에 대한 흥미로운 점은 다음과 같이 표현될 수 있는 입력 벡터에 의해 형성된 각도와의 관계입니다.</p><p class="code">a · b = (length of a) * (length of b) * cos(angle)</p><p> 즉, 두 벡터의 내적은 해당 벡터 사이의 각도의 코사인에 각 벡터의 길이를 곱한 값과 같습니다. 다음은 설명할 이미지입니다.</p><p><img alt="Dot Product ilustration" class="center" height="143" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image_2.png" width="406"/></p><p class="note"> <strong>참고</strong>: 벡터에 대한 자세한 내용은 <a href="../../../../Additional_Information/Vectors.htm">여기</a> 를 참조하십시오.</p><p> 이제 두 벡터의 내적 결과와 관련하여 두 벡터에서 말할 수 있는 몇 가지 사항이 있습니다.</p><ul class="colour"><li> 와 b가 수직이면(서로 90도에서) 내적의 결과는 0이 됩니다. <span class="inline">cos(ang)</span> 0이 될 것이다</li><li> 와 b 사이의 각도가 90도보다 작으면 내적은 양수(0보다 큼)가 됩니다. <span class="inline">cos(ang)</span> 긍정적일 것이다</li><li> 와 b 사이의 각도가 90도보다 크면 내적은 음수(0보다 작음)가 됩니다. <span class="inline">cos(ang)</span> 음수일 것이다</li></ul><p> 게임을 만드는 우리에게 이것이 의미하는 바는 무엇입니까? 글쎄, 이 수학적 관계는 꽤 많은 상황에서 사용될 수 있지만, 그것을 보는 가장 좋은 방법은 실제 시나리오를 만들고 무슨 일이 일어나고 있는지 직접 보는 것입니다. 이를 수행하는 가장 간단한 방법 중 하나는 플랫폼 게임에서 적에 대한 간단한 &quot;시선&quot; 확인을 생성하여 적이 플레이어의 양쪽 측면에서 90° 이내에 있는 경우 플레이어를 &quot;볼&quot; 수 있도록 하는 것입니다. 벡터 <i>노멀</i>.</p><p><img alt="Dot product example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image_1.png"/> 기본적으로 적의 벡터 법선(즉, 방향과 시야 거리로 구성)을 가져와야 하고 플레이어의 벡터를 적으로 가져와야 합니다. 그런 다음 이 벡터의 dot_product를 얻을 것이며 결과가 양수이면 플레이어를 본 적이 있고 음수이면 보지 않았습니다. 이 작업을 수행하는 실제 코드는 아래 예제에 나와 있습니다.</p><p></p><h4> <b>통사론:</b></h4><p class="code">dot_product(x1, y1, x2, y2)</p><table><tbody><tr><th> 논쟁</th><th> 유형</th><th> 설명</th></tr><tr><td> <span class="notranslate">x1</span></td><td><span data-keyref="Type_Real"></span></td><td> <span class="notranslate">The x coordinate of the first vector.</span></td></tr><tr><td> <span class="notranslate">y1</span></td><td><span data-keyref="Type_Real"></span></td><td> <span class="notranslate">The y coordinate of the first vector.</span></td></tr><tr><td> <span class="notranslate">x2</span></td><td><span data-keyref="Type_Real"></span></td><td> <span class="notranslate">The x coordinate of the second vector.</span></td></tr><tr><td> <span class="notranslate">y2</span></td><td><span data-keyref="Type_Real"></span></td><td> <span class="notranslate">The y coordinate of the second vector.</span></td></tr></tbody></table><p></p><h4> 보고:</h4><p class="code"><span data-keyref="Type_Real"></span></p><p></p><h4> 예시:</h4><p class="code">var x1, y1, x2, y2;<br/> x1 = lengthdir_x(1, image_angle);<br/> y1 = lengthdir_y(1, image_angle);<br/> x2 = o_Player.x - x;<br/> y2 = o_Player.y - y;<br/> if dot_product(x1, y1, x2, y2) &gt; 0 seen=true else seen=false;</p><p> 위의 코드는 인스턴스 이미지 각도를 사용하여 벡터를 만든 다음 플레이어 개체 &quot;o_Player&quot;의 벡터를 자체적으로 가져옵니다. 마지막으로 이 두 벡터의 내적을 계산하고 0보다 크면 &quot;보는&quot; 변수를 참으로 설정하고 0보다 작거나 같으면 &quot;거짓&quot;으로 설정합니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤: <a href="Angles_And_Distance.htm">각도와 거리</a></div><div style="float:right"> 다음: <a href="dot_product_3d.htm"><span class="notranslate">dot_product_3d</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
dot_product
-->
  <!-- TAGS
dot_product
-->

</body></html>