<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>buffer_create_from_vertex_buffer_ext</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="buffer_create_from_vertex_buffer_ext에 대한 참조 페이지" />
  <meta name="rh-index-keywords" content="buffer_create_from_vertex_buffer_ext" />
  <meta name="search-keywords" content="buffer_create_from_vertex_buffer_ext,buffer_fixed,buffer_grow,buffer_wrap,buffer_fast,buffer_vbuffer" />
  <meta name="is_pure" content="true" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>buffer_create_from_vertex_buffer_ext</h1><p> 이 함수를 사용하여 이전에 생성된 <a href="../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">정점 버퍼</a> 의 데이터로 채워진 게임의 버퍼로 메모리의 일부를 할당합니다. 이 함수는 변수에 저장되어야 하고 버퍼에 대한 모든 추가 함수 호출에 사용되어야 하는 고유한 <i>버퍼 ID</i> 를 반환합니다. 함수는 사용할 정점 버퍼의 id를 취합니다(함수에서 반환된<a href="../Drawing/Primitives/vertex_create_buffer.htm"><span class="inline">vertex_create_buffer()</span></a>, 예) 버퍼 유형을 정의하는 데 사용되는 다음 상수:</p><table><tbody><tr><th> 일정한</th><th> 설명</th></tr><tr><td><span class="notranslate"><span class="inline">buffer_fixed</span></span></td><td> 고정 크기의 버퍼입니다.</td></tr><tr><td><span class="notranslate"><span class="inline">buffer_grow</span></span></td><td> 데이터가 추가될 때 동적으로 &quot;증가&quot;하는 버퍼</td></tr><tr><td><span class="notranslate"><span class="inline">buffer_wrap</span></span></td><td> 데이터가 &quot;래핑&quot;될 버퍼입니다. 추가되는 데이터가 버퍼 크기의 한계에 도달하면 덮어쓰기가 버퍼의 시작 부분에 다시 배치되고 그 지점에서 추가 쓰기가 계속됩니다.</td></tr><tr><td><span class="notranslate"><span class="inline">buffer_fast</span></span></td><td> 읽기/쓰기가 매우 빠른 특수 &quot;제거된&quot; 버퍼입니다. 와 함께만 사용할 수 있습니다. <span class="inline">buffer_u8</span> <a href="buffer_write.htm">데이터 유형</a> 이며 1바이트로 정렬 <i>되어야 합니다</i>.</td></tr><tr><td><span class="notranslate"><span class="inline">buffer_vbuffer</span></span></td><td> 이 유형의 버퍼는 정점 버퍼로만 사용됩니다.</td></tr></tbody></table><p> 버퍼 유형 외에도 버퍼에 대한 <i>바이트 정렬</i> 도 설정해야 합니다. 이 값은 버퍼에 저장하려는 데이터에 따라 달라지며 대부분의 경우 값 1이 완벽합니다. 그러나 일부 작업의 경우 특정 정렬이 <i>필수적</i> 이며 잘못된 정렬로 인해 오류가 발생할 수 있습니다(정렬에 대한 자세한 내용은 <a href="../../../Additional_Information/Guide_To_Using_Buffers.htm">버퍼 정렬</a> 참조). 다음은 각 데이터 유형에 가장 적합한 값을 보여주는 일반적인 가이드입니다(확실하지 않은 경우 정렬 1 사용).</p><ul class="colour"><li> 문자열은 1바이트로 정렬되어야 합니다.</li><li> 부호 있는 또는 부호 없는 8비트 정수는 모든 값으로 정렬할 수 있지만 빠른 버퍼의 경우(참조<a href="buffer_write.htm"><span class="inline">buffer_write()</span></a> ) 1에 <i>맞춰야</i> 합니다.</li><li> 부호 있는 또는 부호 없는 16비트 정수는 2바이트로 정렬되어야 합니다.</li><li> 부호 있는 또는 부호 없는 32비트 정수는 4바이트로 정렬되어야 합니다.</li><li> 최대 16비트의 부동 소수점은 2바이트로 정렬되어야 합니다. <i>(현재 지원되지 않습니다!)</i></li><li> 최대 32비트의 부동 소수점은 4바이트로 정렬되어야 합니다.</li><li> 최대 64비트의 부동 소수점은 8바이트로 정렬되어야 합니다.</li></ul><p class="note"> <b>참고</b>: 정점 버퍼는 1바이트로 정렬되지만 정점 데이터는 단순히 버퍼에 대한 원시 메모리 복사본이기 때문에 데이터 처리 방법에 따라 임의의 정렬로 버퍼를 생성할 수 있습니다.</p><p> 마지막 두 인수는 새로 생성된 버퍼에 복사하려는 정점 데이터의 범위를 지정하는 데 사용됩니다. 시작 정점은 0과 정점 수 -1 사이의 임의의 위치에 있을 수 있으며 해당 지점에서 복사할 정점 수를 지정합니다. 기능을 사용할 수 있습니다 <span class="inline"><a href="../Drawing/Primitives/vertex_get_number.htm">vertex_get_number()</a></span> 정점 버퍼에 저장된 총 정점 수를 가져옵니다.</p><p class="note"> <b>참고</b>: 메모리 누수를 방지하기 위해 더 이상 필요하지 않을 때 이와 같이 동적으로 생성된 리소스를 메모리에서 제거하는 것이 중요합니다. 따라서 생성한 버퍼가 끝나면 다음을 사용하여 다시 해제해야 합니다.<span style="font-size:1px;"><a href="buffer_delete.htm"><span class="inline">buffer_delete()</span></a></span>. 또한 새 버퍼를 만드는 데 사용된 꼭짓점 버퍼도 메모리에서 제거되지 않으므로 함수를 사용해야 합니다. <span style="font-size:1px;"><a href="../Drawing/Primitives/vertex_delete_buffer.htm"><span class="inline">vertex_delete_buffer()</span></a></span> 더 이상 필요하지 않을 때.</p><p></p><h4> 통사론:</h4><p class="code">buffer_create_from_vertex_buffer_ext(vertex_buffer, type, alignment, start_vertex, num_vertices)</p><table><tbody><tr><th> 논쟁</th><th> 유형</th><th> 설명</th></tr><tr><td> <span class="notranslate">vertex_buffer</span></td><td> <span data-keyref="Type_ID_Buffer_Vertex">정점 버퍼 ID</span></td><td> <span class="notranslate">The vertex buffer index to use.</span></td></tr><tr><td> <span class="notranslate">type</span></td><td> <span data-keyref="Type_Constant_Buffer_Type">버퍼 유형 상수</span></td><td> <span class="notranslate">The type of buffer to create (see the constants list below).</span></td></tr><tr><td> <span class="notranslate">alignment</span></td><td> <span data-keyref="Type_Real">진짜</span></td><td> <span class="notranslate">The byte alignment for the buffer</span></td></tr><tr><td> <span class="notranslate">start_vertex</span></td><td> <span data-keyref="Type_Real">진짜</span></td><td> <span class="notranslate">The starting vertex.</span></td></tr><tr><td> <span class="notranslate">num_vertices</span></td><td> <span data-keyref="Type_Real">진짜</span></td><td> <span class="notranslate">The total number of vertices to copy.</span></td></tr></tbody></table><p></p><h4> 보고:</h4><p class="code"><span data-keyref="Type_ID_Buffer">Buffer ID</span></p><p></p><h4> 예시:</h4><p class="code">var v_num = vertex_get_number(model_buff); player_buffer = buffer_create_from_vertex_buffer(model_buffer, buffer_grow, 1, 0, v_num - 1);</p><p> 위의 코드는 버퍼에 메모리를 할당한 다음 지정된 정점 버퍼의 모든 정점 데이터를 버퍼에 복사하고 나중에 사용할 수 있도록 &quot;player_buffer&quot; 변수에 저장된 새 버퍼의 인덱스를 반환합니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="Buffers.htm">버퍼</a></div><div style="float:right"> 다음: <a href="buffer_delete.htm"><span class="notranslate">buffer_delete</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
buffer_create_from_vertex_buffer_ext
buffer_fixed
buffer_grow
buffer_wrap
buffer_fast
buffer_vbuffer
-->
  <!-- TAGS
buffer_create_from_vertex_buffer_ext
-->
</body>
</html>