<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>물리학</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="물리 함수에 대한 참조 섹션" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="물리학" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 물리학</h1><p> <span data-keyref="GameMaker Name">GameMaker</span> 에 대한 전용 물리 라이브러리의 통합은 이제 게임 세계 내에서 개체의 물리적 동작의 모든 측면, 특히 충돌 및 개체 상호 작용을 제어할 수 있음을 의미합니다. &quot;전통적인&quot; 충돌 시스템( <span data-keyref="GameMaker Name">GameMaker</span> 의 기본값)은 &quot;반응형&quot; 시스템으로, 충돌을 확인한 <i>다음</i> 개별 개체에 배치한 코드로 해당 충돌에 반응합니다. 이것은 단순한 게임에서는 문제가 없지만 많은 수의 개체가 있고 게임 세계의 다른 상황에 모두 반응하는 방식을 코딩해야 하는 경우 이 시스템만으로는 충분하지 않다는 것이 금세 명백해집니다. 그 때 <span data-keyref="GameMaker Name">GameMaker</span> 물리 시스템으로 전환해야 합니다.</p><p> 물리 시스템은 일반 충돌과 매우 다른 방식으로 작동합니다. 충돌이나 상호 작용이 발생하기 전에 게임 세계 자체의 속성뿐만 아니라 게임 세계의 개체에 대한 일련의 속성을 정의하는 &quot;수동적&quot; 시스템에 가깝습니다. 이러한 코딩된 &quot;규칙&quot;은 게임 세계의 모든 것이 상호 작용하는 방식을 제어합니다. 이런 식으로 몇 가지 간단한 코드와 올바른 공간 설정으로 가능한 모든 단일 결과에 대해 코딩할 필요 <i>없이</i> 발생하고 해결될 세계와 객체 사이의 매우 복잡한 상호 작용을 생성할 수 있습니다.</p><p> <span data-keyref="GameMaker Name">GameMaker</span> 물리학 세계로 작업할 때 주의해야 할 몇 가지 사항이 있습니다.</p><ul class="colour"><li> 물리 시스템은 <span data-keyref="GameMaker Name">GameMaker</span> 의 기본 공간 및 인스턴스 구조와 &quot;별도&quot;로 존재합니다. 즉, 타이밍 및 기능이 다른 모든 것과 마찬가지로 실내 속도 및 단계 순서에 반드시 연결되어 있지는 않습니다.</li><li> 물리 시스템은 많은 일반 인스턴스 기능을 대체합니다... 예를 들어, 인스턴스의 속도와 방향을 설정하는 대신 완전히 시뮬레이션된 물리적 몸체로 선언된 경우 <i>힘</i> 이나 <i>충동</i> 을 사용하여 다음을 얻습니다. 게임 세계에서 움직이거나 물리학이 활성화되지 않은 경우 x y 위치를 직접 설정해야 합니다. 이것은 익숙해지는 데 약간의 시간이 걸리므로 물리 기능을 실험하고 프로젝트에 통합하기 전에 모든 것이 어떻게 작동하는지 알아보십시오.</li><li> 생성되는 인스턴스 수와 물리 세계에서 처리해야 하는 충돌 및 충돌 그룹 수를 제한해야 합니다. 물리적 속성과 충돌이 있는 수천 개의 인스턴스를 가질 <i>수 없으며</i> 물리학에는 매우 집중적인 계산이 필요하기 때문에 모든 것이 잘 작동할 것으로 기대할 수 없습니다. 따라서 자신을 제한하고 가능한 경우 최적화하십시오.</li><li> 충돌을 설정할 때 충돌 시스템에는 Box2D가 충돌을 감지하도록 인스턴스에 할당할 수 있는 <i>충돌 비트</i> 수가 제한되어 있으므로 가능한 한 부모를 사용하십시오. 예를 들어, 5개의 서로 다른 벽 개체가 있는 경우 5개의 충돌을 확인하지 말고 상위 개체를 만들어 5개의 벽에 할당한 다음 상위 개체와 1회의 충돌 확인을 수행합니다. 개체의 물리적 속성은 충돌만 <i>상속되지 않습니다</i>. 이런 식으로 게임을 최적화하고 오류가 없는 상태로 유지할 수 있습니다.</li><li> 물리적 기능을 사용하는 것 외에 다른 방법으로 방의 한 지점에서 다른 지점으로 인스턴스를 이동하지 마십시오(즉, x/y 좌표를 수동으로 설정하지 마십시오). 이 작업을 수행할 수 있고 일부 상황에서는 필요할 수 있지만, 특히 충돌을 해결하려고 할 때 물리 엔진에 발생할 수 있는 예측할 수 없는 결과로 인해 일반적으로 피해야 합니다.</li><li> 픽스쳐를 바인딩할 때는 개체와 인스턴스에 독립적으로 바인딩될 수 있으므로 주의해야 합니다. 이것은 예를 들어 &quot;o_Wall&quot;에 고정 장치를 바인딩하면 해당 개체의 <b>모든</b> 인스턴스가 고정 장치를 가져옴을 의미합니다. 고정 장치를 하나의 인스턴스에만 바인딩하려면 해당 함수에서 해당 인스턴스의 ID를 사용하십시오.</li><li> 부동 소수점 정밀도의 차이로 인해 다른 대상 플랫폼에 대한 게임 버전이 표준 Windows 버전과 미묘하게 다른 동작을 보일 수 있지만 각 버전은 후속 실행에서 자체적으로 일관적일 수 있습니다.</li><li> 물리적 시뮬레이션의 불안정성을 방지하기 위해 Box2D는 단일 업데이트 내에서 본체가 회전하고 변환할 수 있는 양을 상한으로 제한합니다. 물리적 세계의 업데이트 횟수 및 업데이트 속도에 따라 물리적 시뮬레이션의 정확도에 따라, 그리고 물리적 세계 스케일링에 따라 명백한 한계가 달라집니다. 이것은 (예를 들어) 세계 업데이트 속도가 60인 경우 최대 이동 속도는 20임을 의미합니다.</li></ul><p> 물리 기능에 대한 정보는 다음 페이지에서 찾을 수 있습니다.</p><ul class="colour"><li> <a href="The_Physics_World/The_Physics_World.htm">물리학 세계</a></li><li> <a href="Forces/Forces.htm">힘</a></li><li> <a href="Fixtures/Fixtures.htm">비품</a></li><li> <a href="Joints/Joints.htm">관절</a></li><li> <a href="Soft_Body_Particles/Soft_Body_Particles.htm">소프트 바디 입자</a></li><li> <a href="Physics_Variables/Physics_Variables.htm">물리 변수</a></li></ul><p></p><p> 마지막으로 고급 물리 시뮬레이션에 유용할 수 있는 몇 가지 특수 물리 기능이 있습니다. 첫 번째는 방의 특정 지점에서 가능한 충돌을 테스트하기 위한 것이고 두 번째는 인스턴스 내에서 사용자 정의 질량 및 관성 속성을 생성하기 위한 것입니다.</p><ul class="colour"><li> <a href="physics_test_overlap.htm"><span class="notranslate">physics_test_overlap</span></a></li><li> <a href="physics_mass_properties.htm"><span class="notranslate">physics_mass_properties</span></a></li> </ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../GML_Reference.htm">GML 참조</a></div><div style="float:right"> 다음: <a href="../In_App_Purchases/In_App_Purchases.htm">인앱 구매</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Physics
Physics Functions
-->
  <!-- TAGS
physics_functions
-->
</body>
</html>