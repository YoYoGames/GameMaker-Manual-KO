<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_joint_weld_create</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="physical_joint_weld_create에 대한 참조 페이지" />
  <meta name="rh-index-keywords" content="physics_joint_weld_create" />
  <meta name="search-keywords" content="physics_joint_weld_create" />
  <meta name="is_pure" content="true" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>physics_joint_weld_create</h1><p> 용접 조인트는 강력하지만 유연한 결합으로 두 개의 고정구를 함께 부착하도록 설계되었습니다. 용접 조인트는 예를 들어 거리 조인트와 관련된 스트레칭 없이 결합된 두 고정 장치 사이의 굴곡을 허용하고 응력이나 하중을 받을 때 항상 기준 각도로 &quot;스프링&quot;하려고 합니다. 아래 이미지와 같이 관절이 생성되어야 하는 방의 지점과 관절이 항상 시도하고 유지하기를 원하는 각도를 정의합니다.</p><p><img alt="Weld joint illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/weld_joint_image.png" /> 보시다시피 앵커 포인트는 룸 좌표로 지정되므로 정의할 때 특히 주의해야 합니다. 특히 인스턴스가 룸 편집기를 통해 룸에 배치되지 않고 조인트와 동시에 생성되는 경우에는 더욱 그렇습니다. 또한 조인트는 인스턴스의 스프라이트 크기 또는 이들이 연결한 고정 장치와 독립적으로 생성된다는 점을 알아야 합니다. 따라서 인스턴스의 원점이 아닌 다른 위치에 용접 조인트를 생성하면 여전히 유효하며 생성된 위치를 기준으로 두 인스턴스를 구속합니다.</p><p> 용접 조인트는 유연하고 응력이 가해지면 구부러지고 구부러지기 때문에 조인트에 대한 진동 주파수(Hz)와 감쇠 비율을 설정하여 다양한 효과를 얻을 수 있습니다. 이 값을 미세하게 조정해야 할 수도 있습니다. 조정하고 더 작은 값으로 시작하여 원하는 효과를 얻을 때까지 증가시키는 것이 좋습니다.</p><p> &quot;col&quot; 값을 다음으로 설정하면 <span class="inline">true</span> 두 인스턴스는 서로 상호 작용하고 충돌할 수 있지만 충돌 이벤트가 있는 경우 <i>에만</i> 가능합니다. <span class="inline">false</span>, 그들은 무슨 일이 있어도 충돌하지 않습니다.</p><p></p><h4> 통사론:</h4><p class="code">physics_joint_weld_create(inst1, inst2, anchor_x, anchor_y, ref_angle, freq_hz, damping_ratio, col)</p><table><tbody><tr><th> 논쟁</th><th> 유형</th><th> 설명</th></tr><tr><td> <span class="notranslate">inst1</span></td><td> <span data-keyref="Type_ID_Instance">인스턴스 ID</span></td><td> <span class="notranslate">The first instance to connect with the joint</span></td></tr><tr><td> <span class="notranslate">inst2</span></td><td> <span data-keyref="Type_ID_Instance">인스턴스 ID</span></td><td> <span class="notranslate">The second instance to connect with the joint</span></td></tr><tr><td> <span class="notranslate">anchor_x</span></td><td> <span data-keyref="Type_Real">진짜</span></td><td> <span class="notranslate">The x coordinate for the joint, within the game world</span></td></tr><tr><td> <span class="notranslate">anchor_y</span></td><td> <span data-keyref="Type_Real">진짜</span></td><td> <span class="notranslate">The y coordinate for the joint, within the game world</span></td></tr><tr><td> <span class="notranslate">ref_angle</span></td><td> <span data-keyref="Type_Real">진짜</span></td><td> <span class="notranslate">The joint angle to maintain</span></td></tr><tr><td> <span class="notranslate">freq_hz</span></td><td> <span data-keyref="Type_Real">진짜</span></td><td> <span class="notranslate">This is the oscillation frequency for the joint, in hertz</span></td></tr><tr><td> <span class="notranslate">damping_ratio</span></td><td> <span data-keyref="Type_Real">진짜</span></td><td> <span class="notranslate">This damping ratio for the joint</span></td></tr><tr><td> <span class="notranslate">col</span></td><td> <span data-keyref="Type_Bool">부울</span></td><td> <span class="notranslate">Whether the two instances can collide (true) or not (false)</span></td></tr></tbody></table><p></p><h4> 보고:</h4><p class="code"><span data-keyref="Type_ID_Physics_Joint">Physics Joint ID</span></p><p></p><h4> 예시:</h4><p class="code">var i, fix, o_id, p_id;<br />
    p_id = noone;<br />
    o_id = noone;<br />
    fix = physics_fixture_create();<br />
    physics_fixture_set_box_shape(fix, 64, 32);<br />
    for (i = 0; i &lt; 5; i++;)<br />
    {<br />
        o_id = instance_create_layer(x + (128 * i), y, &quot;Instances&quot;, obj_BridgePart);<br />
        physics_fixture_bind(fix, o_id);<br />
        if i &gt; 0 &amp;&amp; i &lt; 4<br />
        {<br />
            physics_joint_weld_create(p_id, o_id, x + (128 * i) - 64, y, 0, 10, 12, true);<br />
        }<br />
        p_id = o_id;<br />
    }<br />
    physics-fixture_delete(fix);</p><p> 위의 코드는 고정 장치를 만든 다음 루프를 사용하여 여러 인스턴스를 만들고 고정 장치를 각각의 새 인스턴스에 바인딩한 다음 용접 조인트를 사용하여 모두 결합합니다. 마지막으로 조명기는 메모리에서 삭제됩니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 등: <a href="Joints.htm">관절</a></div><div style="float:right"> 다음: <a href="physics_joint_friction_create.htm"><span class="notranslate">physics_joint_friction_create</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_weld_create
-->
  <!-- TAGS
physics_joint_weld_create
-->
</body>
</html>