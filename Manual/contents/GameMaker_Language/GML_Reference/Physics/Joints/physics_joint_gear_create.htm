<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_joint_gear_create</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="physical_joint_gear_create에 대한 참조 페이지" />
  <meta name="rh-index-keywords" content="physics_joint_gear_create" />
  <meta name="search-keywords" content="physics_joint_gear_create" />
  <meta name="is_pure" content="true" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> <span data-field="title" data-format="default">물리학_조인트_기어_생성</span></h1><p> 정교한 기계 장치를 만들고 싶다면 기어를 사용하는 것이 좋습니다. 원칙적으로 기어 이빨을 모델링하기 위해 합성 인스턴스를 사용하여 <span data-keyref="GameMaker Name">GameMaker</span> 에서 기어를 생성할 수 있지만 이는 그다지 효율적이지 않고 작성하는 데 지루할 수 있습니다! 고맙게도 더 간단한 방법이 있습니다. 바로 <i>기어 조인트</i> 를 사용하는 것입니다. 하나를 만들려면 이전에 고정 장치를 정의하고 기어를 구성할 두 개의 기본 조인트를 생성 <b>해야 합니다</b>. 이들은 하나의 <a href="physics_joint_revolute_create.htm">회전 조인트</a> 와 <a href="physics_joint_prismatic_create.htm">프리즘 조인트</a> 또는 다른 <i>회전 조인트</i> 로 구성되어야 합니다. 아래 이미지는 게임에서 일반적으로 기어가 생성되는 방법을 보여줍니다.</p><p><img alt="Gear joint illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/gear_joint_image.png" /> 그래서 무슨 일이? 음, 일단 두 개의 관절이 기어에 추가되면 하나의 상호 작용이 다른 하나에 영향을 미치므로 위의 예제 이미지에서 inst2를 회전하면 inst3이 위아래로 움직이고 inst3을 위아래로 움직이면 그러면 inst2가 회전합니다. 기어비를 변경할 수도 있습니다. 즉, 원하는 효과를 얻으려면 한 인스턴스를 더(또는 더 적게) 움직여야 합니다. 맨 아래 예제의 코드는 위의 이미지와 같은 것을 생성하는 방법을 보여줍니다.</p><p class="note"> <b>참고</b>: 기어 조인트와 관련된 두 인스턴스 중 하나를 삭제해야 하는 경우(또는 해당 조인트만 삭제) 먼저 다음을 사용하여 기어 조인트를 삭제 <b>해야 합니다</b>. <span style="font-size:1px;"><a href="physics_joint_delete.htm"><span class="inline">physics_joint_delete()</span></a></span> 그렇지 않으면 오류가 발생합니다!</p><p></p><h4> 통사론:</h4><p class="code"><span data-field="title" data-format="default">physics_joint_gear_create</span>(inst1, inst2, joint_1, joint_2, ratio)</p><table><tbody><tr><th> 논쟁</th><th> 유형</th><th> 설명</th></tr><tr><td> <span class="notranslate">inst1</span></td><td> <span data-keyref="Type_ID_Instance"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm" target="_blank">인스턴스 ID</a></span></td><td> <span class="notranslate">The first instance to connect with the joint</span></td></tr><tr><td> <span class="notranslate">inst2</span></td><td> <span data-keyref="Type_ID_Instance"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm" target="_blank">인스턴스 ID</a></span></td><td> <span class="notranslate">The second instance to connect with the joint</span></td></tr><tr><td> <span class="notranslate">joint_1</span></td><td> <span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">진짜</a></span></td><td> <span class="notranslate">A previously defined revolute joint</span></td></tr><tr><td> <span class="notranslate">joint_2</span></td><td> <span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">진짜</a></span></td><td> <span class="notranslate">A previously defined revolute <i>or</i> prismatic joint</span></td></tr><tr><td> <span class="notranslate">ratio</span></td><td> <span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">진짜</a></span></td><td> <span class="notranslate">Set the velocity ratio between the two joints</span></td></tr></tbody></table><p></p><h4> 보고:</h4><p class="code"><span data-keyref="Type_ID_Physics_Joint"><a href="../../../../../GameMaker_Language/GML_Reference/Physics/Joints/Joints.htm" target="_blank">Physics Joint ID</a></span></p><p></p><h4> 예시:</h4><p class="code">var t_fix, g_fix, inst1, inst2, inst3, r_joint, p_joint;<br />
    g_fix = physics_fixture_create();<br />
    physics_fixture_set_box_shape(g_fix, 40, 10);<br />
    t_fix = physics_fixture_create();<br />
    physics_fixture_set_circle_shape(t_fix, 10);<br />
    physics_fixture_set_density(t_fix, 0.5);<br />
    inst1 = instance_create_layer(60, room_height - 30, &quot;Background&quot;, obj_Ground);<br />
    inst2 = instance_create_layer(40, room_height - 300, &quot;Instances&quot;, obj_Cog);<br />
    inst3 = instance_create_layer(150, room_height - 300, &quot;Instances&quot;, obj_Barrel);<br />
    physics_fixture_bind(g_fix, inst1);<br />
    physics_fixture_bind(t_fix, inst2);<br />
    physics_fixture_bind(t_fix, inst3);<br />
    r_joint = physics_revolute_joint_create(inst1, inst2, 40, room_height - 300, -80, 80, 1, 10, 0.5, 1, 0);<br />
    p_joint = physics_prismatic_joint_create(inst1, inst3, 150, room_height - 300, 0, 1, -10, 10, true, 0, 0, 0, 0);<br />
    <span data-field="title" data-format="default">physics_joint_gear_create</span>(inst2, inst3, r_joint, p_joint, 0.5);
  </p><p> 위의 코드는 두 개의 조명기를 만들고 정의한 다음 &quot;obj_Ground&quot; 하나와 &quot;obj_Cog&quot;와 &quot;obj_Barrel&quot;이라는 두 개의 인스턴스를 만듭니다. 그런 다음 설비가 이러한 인스턴스에 바인딩되고 두 개의 조인트가 생성됩니다. 지면과 톱니 사이의 회전 조인트, 지면과 배럴 사이의 각주 조인트. 마지막으로 이전에 정의된 회전 및 프리즘 조인트를 사용하여 톱니와 배럴 인스턴스 사이에 기어 조인트가 생성됩니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 등: <a href="Joints.htm">관절</a></div><div style="float:right"> 다음: <a href="physics_joint_rope_create.htm"><span class="notranslate">physics_joint_rope_create</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_gear_create
-->
  <!-- TAGS
physics_joint_gear_create
-->
</body>
</html>