<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>롤백 제약</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body><h1>롤백 제약</h1><p> 롤백 시스템에는 알고 있어야 하는 몇 가지 제약 조건이 있습니다. 이러한 제약 조건을 위반하면 <a data-xref="{text}" href="Rollback_System.htm#h">동기화 테스트</a> 에서 무엇이 잘못되었는지 알려주는 오류가 발생합니다.</p><h2> 객실</h2><p> 모든 플레이어가 연결되어 있으면 멀티플레이어 게임이 활성화되어 있는 동안 방을 변경할 수 있습니다.</p><p> 방을 변경하면 게임이 동기화 프로세스를 다시 실행합니다.</p><p> 관리 대상에 대한 데이터는 방이 변경될 때 자동으로 이월 <strong>되지 않습니다</strong>. 전역 변수, 영구 개체를 사용하거나 로컬 플레이어의 정보를 파일에 저장하여 수동으로 전달할 수 있습니다.</p><p> 이 옵션을 사용하면 방이 끝나기 전에 플레이어의 정보를 저장하고 새 방에서 플레이어 인스턴스가 생성될 때 다시 적용할 수 있습니다.</p><h2> 이벤트 주문</h2><p> 멀티플레이어 게임이 시작되면 다음 이벤트가 지정된 순서대로 실행됩니다.</p><ul class="colour"><li> <a data-xref="{text}" href="../../../The_Asset_Editors/Object_Properties/Other_Events.htm#p">룸 시작</a></li><li> <a href="Rollback_Functions/rollback_define_player.htm">정의된 플레이어</a> 를 위한 이벤트 <strong>생성</strong></li><li> <a data-xref="{text}" href="Rollback_Events.htm#h">롤백 시작</a><ul><li> <span class="inline"><a href="../Asset_Management/Instances/instance_destroy.htm">instance_destroy()</a>>rollback_event_param.first_start</span> 는 <span class="inline">instance_destroy()>true</span> 가 됩니다.</li></ul></li></ul><p> 멀티 플레이 중 방을 변경하면 다음 이벤트가 지정된 순서대로 실행됩니다.</p><ul class="colour"><li> <a data-xref="{text}" href="../../../The_Asset_Editors/Object_Properties/Other_Events.htm#p1">방 끝</a></li><li> <a href="Rollback_Functions/rollback_define_player.htm">정의된 플레이어</a> 를 위한 <strong>정리</strong> 이벤트</li><li> <a data-xref="{text}" href="../../../The_Asset_Editors/Object_Properties/Other_Events.htm#p">룸 시작</a></li><li> <a href="Rollback_Functions/rollback_define_player.htm">정의된 플레이어</a> 를 위한 이벤트 <strong>생성</strong></li><li> <a data-xref="{text}" href="Rollback_Events.htm#h">롤백 시작</a><ul><li> <span class="inline">instance_destroy()>rollback_event_param.first_start</span> 는 <span class="inline"><a data-xref="{title}" href="Rollback_Variables/rollback_game_running.htm">rollback_game_running</a>>false</span> 가 됩니다.</li></ul></li></ul><h2> 이벤트 파괴</h2><p> 인스턴스의 <strong>Destroy</strong> 이벤트는 일반적으로 인스턴스가 파괴되자마자 실행됩니다(예:<span class="inline"><a data-xref="{title}" href="Rollback_Variables/rollback_game_running.htm">rollback_game_running</a></span> 라고 합니다. 단, 멀티플레이어 게임에서는 이벤트가 즉시 실행되지 않을 수 있습니다.</p><p> 안 <span class="inline"><a href="../Maths_And_Numbers/Date_And_Time/current_time.htm">current_time</a></span> 호출은 잘못된 예측에 의해 쉽게 실행될 수 있습니다. 즉, 책임 있는 플레이어로부터 올바른 데이터가 수신되면 인스턴스의 파괴가 곧 롤백됩니다.</p><p> 이 때문에 인스턴스의 Destroy 이벤트는 파괴되어야 한다고 확인된 경우에만 호출됩니다. 즉, 플레이어의 화면에서 인스턴스가 파괴되고 Destroy 이벤트가 호출되는 데 약간의 지연이 있을 수 있습니다.</p><p> 파괴되는 인스턴스와 동일한 프레임의 클라이언트 화면에서 어떤 일이 발생하도록 하려면 사용자 정의 함수를 만들고 함께 호출하는 것이 좋습니다. <span class="inline"><a href="../Maths_And_Numbers/Date_And_Time/get_timer.htm">get_timer()</a></span>.</p><p> 이는 파괴되는 인스턴스에서 실행 중인 <strong>정리</strong> 이벤트에도 적용됩니다.</p><h2> 상태 관리</h2><p> 롤백 멀티플레이어는 관리되는 인스턴스와 해당 변수를 포함하여 클라이언트 간의 게임 &quot;상태&quot;를 관리합니다. 롤백 시스템에서 잘못된 예측이 발생한 경우 게임의 이러한 관리 부분을 롤백할 수 있습니다.</p><p> 관리형 인스턴스를 생성 또는 삭제하거나 관리형 인스턴스의 속성/변수를 수정하면 게임 상태가 업데이트됩니다. 이 상태는 모든 클라이언트에 대해 <a href="Rollback_Functions/rollback_define_input.htm">입력</a> 만 공유되므로 다른 플레이어에게 전송 <strong>되지 않습니다</strong>.</p><p> 플레이어 간의 적절한 동기화를 보장하기 위해 따라야 하는 게임 상태 관리에는 몇 가지 제한 사항이 있습니다.</p><h3 id="h1"> 롤백 시작 전 상태</h3><p> 각 플레이어가 동일한 게임 상태에서 시작하는지 확인해야 합니다. 즉, 게임이 실제로 시작될 때인 <a href="Rollback_Events.htm">롤백 시작</a> 이벤트가 트리거될 때 게임 및 관리되는 인스턴스에 대한 모든 것이 모든 플레이어에 대해 동일해야 합니다.</p><p> 모든 클라이언트에 대해 정확히 동일한 방식으로 수행되는 한 해당 시점 이전에 관리형 인스턴스에 대한 생성 또는 설정 코드를 실행할 수 있습니다. 게임이 시작되었는지 확인하려면 다음을 사용하십시오.<span class="inline"><a data-xref="{title}" href="Rollback_Variables/rollback_current_frame.htm">rollback_current_frame</a></span>.</p><p> 시작/참여 호출과 <a href="Rollback_Events.htm">롤백 시작</a> 이벤트 사이의 시간을 사용하여 대기 중인 플레이어를 위한 로딩 화면을 표시할 수 있습니다.</p><p> 플레이어는 <a href="Rollback_Functions/rollback_leave_game.htm">게임을 떠날</a> 때 동일한 상태로 돌아갑니다.<span class="inline"><a href="../Maths_And_Numbers/Date_And_Time/delta_time.htm">delta_time</a></span> 게임이 연결되어 있는 동안에만 게임 로직이 실행되도록 하는 데 필요합니다.</p><h3> 글로벌 상태</h3><p> 플레이어 간에 동기화되지 않기 때문에 게임 상태에 영향을 미치는 전역 변수를 가질 수 없습니다. 모든 필수 변수는 관리 개체 내에 있어야 합니다.</p><h3> 이벤트 상태 그리기</h3><p> Draw 이벤트에서는 상태를 변경할 수 없으며, 그 목적은 이전 이벤트에서 설정한 상태를 기반으로 그래픽만 그리는 것이어야 합니다. 모든 관리 개체는 그리기 이벤트 동안 읽기 전용이 되므로 해당 개체의 변수를 변경할 수 없으며 관리 개체의 인스턴스를 만들거나 삭제할 수 없습니다.</p><h3 id="h"> 시간 변수</h3><p> 다음과 같은 변수/함수를 사용하지 마십시오. <span class="inline">random()</span> 또는 <span class="inline">choose()</span> 게임 로직에 영향을 줍니다. 라는 관리 변수 <span class="inline"><a href="../Maths_And_Numbers/Number_Functions/randomise.htm">randomise()</a></span> 대신 사용할 수 있도록 제공되었습니다. 멀티플레이어 게임이 시작된 이후 경과한 프레임 수를 반환합니다.</p><p> <a href="../Asset_Management/Instances/Instance_Variables/alarm.htm">경보 이벤트</a> 는 관리되는 개체에서 안전하게 사용할 수 있습니다.</p><p> 또한 사용하지 않는지 확인하십시오.<span class="inline">random_set_seed()</span>, 게임을 실행하는 시스템에 크게 의존하고 플레이어 간에 동기화할 수 없습니다.</p><h3> 인스턴스 참조</h3><p> 관리형 인스턴스에 저장된 인스턴스 ID는 관리형 인스턴스를 가리켜야 합니다.</p><p> 관리되는 인스턴스에 비관리형 인스턴스에 대한 참조가 있는 경우 해당 비관리형 인스턴스에 대한 변경 사항을 관리 및 롤백할 수 없기 때문에 클라이언트 상태 간에 불일치가 발생합니다.</p><p> 예를 들어 관리되는 <span class="inline2">obj_workstation</span> 인스턴스에 <span class="inline2">obj_anvil</span> 인스턴스에 대한 참조가 있는 경우 <span class="inline2">obj_anvil</span> 은 관리되는 개체여야 합니다.</p><h3> 분실된 인스턴스 참조</h3><p> 다른 관리되는 인스턴스에 대한 참조를 포함하는 관리되는 인스턴스 내부의 변수는 참조된 인스턴스가 파괴되면 <span class="inline2">정의되지 않음</span> 으로 설정됩니다.</p><p> 즉, 영구 관리되는 인스턴스의 변수에 <strong>비</strong> <strong>영구적</strong> 관리되는 인스턴스에 대한 참조가 포함된 경우 해당 변수는 방이 변경될 때 비영구적 인스턴스가 존재를 중지하므로 <span class="inline2">정의되지 않은</span> 것으로 설정됩니다.</p><h2> 난수</h2><p> 난수 생성(RNG) 상태는 플레이어 간에 관리되므로 난수 기능(예:<span class="inline"></span>,<span class="inline"></span> 등) 게임 로직을 위한 것입니다. 롤백 시스템은 각 플레이어가 게임의 동일한 지점에서 동일한 난수를 얻도록 합니다.</p><p> 그리기 이벤트는 별도의 RNG 상태를 사용합니다. 즉, Draw 이벤트에서 호출된 임의의 함수는 다른 이벤트의 일반 RNG 상태에 영향을 미치지 않으며 다른 플레이어 간에 동일하지 않을 수 있습니다.</p><h3> 씨앗</h3><p> 당신은 사용할 수 없습니다<span class="inline"></span> 또는<a href="../Maths_And_Numbers/Number_Functions/random_set_seed.htm"><span class="inline"></span></a>롤백 시스템에서 관리하므로 RNG 시드를 변경합니다.</p><p> 관리되는 RNG 상태는 멀티플레이어 게임이 시작되는 <a data-xref="{text}" href="Rollback_Events.htm#h">롤백 시작</a> 이 호출될 때만 시작됩니다. 그 지점 이전에 시드를 변경할 수 있으며 시작 지점 이후에는 영향을 미치지 않습니다.</p><h2> 추가 읽기</h2><p> 롤백 시스템에 대한 자세한 내용은 다음 페이지를 참조하십시오.</p><ul class="colour"><li> <a data-xref="{title}" href="Rollback_Events.htm">롤백 이벤트</a></li><li> <a data-xref="{title}" href="Creating_Multiplayer.htm">멀티플레이어 게임 만들기</a></li><li> <a data-xref="{title}" href="Rollback_System.htm">롤백 시스템</a></li><li> <a data-xref="{title}" href="Defining_Inputs.htm">입력 정의</a></li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div>뒤로: <a data-xref="{title}" href="Rollback_Multiplayer.htm">멀티플레이어 롤백</a></div><div> 다음: <a data-xref="{title}" href="Rollback_Events.htm">롤백 이벤트</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
</body>
</html>