<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>멀티플레이어 게임 만들기</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="이 튜토리얼을 따라 첫 멀티플레이어 게임을 만드세요" />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body><h1>멀티플레이어 게임 만들기</h1><p class="note"> 이 페이지에서는 첫 번째 멀티플레이어 게임을 만들기 위한 자세한 단계를 안내합니다.<br /><br /> 롤백 시스템에 대한 정보는 롤백 <a data-xref="{title}" href="Rollback_System.htm">시스템</a> 을 참조하십시오.<br /><br /> 모든 롤백 기능에 대한 자세한 내용은 롤백 <a data-xref="{title}" href="Rollback_Functions/Rollback_Functions.htm">기능</a> 을 참조하십시오.</p><h2> 프로젝트 설정</h2><p> 새 프로젝트를 시작하고 플레이어 개체에 대한 스프라이트를 만듭니다. 이미지를 가져오거나 채워진 사각형을 만들 수 있습니다.</p><p> 두 개의 개체를 만듭니다.</p><ul class="colour"><li> <strong>obj_game</strong>: 멀티플레이어 게임을 관리합니다.</li><li> <strong>obj_player</strong>: 이것은 실제 플레이어 개체가 됩니다. 연결된 각 플레이어는 제어할 수 있는 이 개체의 고유한 인스턴스를 갖습니다.<br /><br /> 플레이어 오브젝트에 플레이어 스프라이트를 할당합니다.</li></ul><p><img class="center_shadow" height="220" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_assets.png" width="196" /></p><p> <strong>계속해서 obj_game</strong> 을 방에 놓으십시오. 자동으로 생성되므로 <strong>obj_player</strong> 를 배치 <strong>하지 마십시오</strong>.</p><h2> 게임 시작</h2><p> <strong>obj_game</strong> 에 Create 이벤트를 추가하고 여기에 다음 코드를 작성합니다.</p><p class="note"> <span class="note">참고</span> GML Visual을 사용하는 경우 해당하는 <a href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Rollback_Actions.htm">롤백 작업</a> 을 사용합니다.</p><p class="code">rollback_define_player(obj_player);<br />
    <br />
    var _joined = rollback_join_game();<br />
    <br />
    if (!_joined)<br />
    {<br />
        rollback_create_game(2);<br />
    }
  </p><p> 먼저 사용할 플레이어 개체를 정의하고 다음을 사용하여 게임에 참여하려고 시도합니다.<a href="Rollback_Functions/rollback_join_game.htm"><span class="inline">rollback_join_game()</span></a>. 이 함수는 반환 <span class="inline">true</span> 시스템이 참가할 게임을 찾은 경우(올바른 URL에 있음을 의미).</p><p> 게임에 참가할 수 없으면 반환됩니다. <span class="inline">false</span>. 반환된 값이 다음과 같을 때 <span class="inline">false</span>, 우리는 부른다<a href="Rollback_Functions/rollback_create_game.htm"><span class="inline">rollback_create_game()</span></a> 우리 자신의 게임을 호스팅합니다. 여기에서 게임이 최대 2명의 플레이어를 허용하도록 지정합니다.</p><p class="note"> <span class="note">참고</span> 현재 최대 4인용 게임만 만들 수 있습니다.</p><p> 위의 코드는 방의 왼쪽 상단 모서리에 두 개의 <strong>obj_player</strong> 인스턴스를 생성하지만 아직 제어할 수는 없습니다.</p><p><img class="center_shadow" height="335" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_player_spawned.png" width="447" /></p><h2> 움직이는 선수</h2><p> 입력은 롤백 시스템에 의해 관리되며 플레이어 간에 자동으로 동기화됩니다.</p><p> 플레이어 개체에서 <span class="inline"><a href="Rollback_Functions/rollback_get_input.htm">rollback_get_input()</a></span> 다음과 같은 모든 기본 입력을 포함하는 구조체를 얻으려면:</p><p class="note"><span class="inline"><strong>left</strong>, <strong>right</strong>, <strong>up</strong>, <strong>down</strong>, <strong>Z</strong>, <strong>X</strong>, <strong>C</strong>, <strong>space</strong></span><br /><br /> <em>키를 보유하고 있는지 여부를 나타냅니다.</em><span class="inline">*<strong>_pressed</strong></span> <em>그리고</em><span class="inline">*<strong>_released</strong></span> <em>변형도 제공됩니다.</em></p><p> 고유한 입력을 정의하려면 입력 <a data-xref="{title}" href="Defining_Inputs.htm">정의</a> 를 참조하십시오.</p><p> 이제 Create 및 Step 이벤트에서 다음 코드로 플레이어를 설정합니다.</p><p class="code">// Create Event<br />
    move_speed = 5;<br />
    <br />
    // Step Event<br />
    var _input = rollback_get_input();<br />
    <br />
    if (_input.left) x -= move_speed;<br />
    if (_input.right) x += move_speed;<br />
    if (_input.up) y -= move_speed;<br />
    if (_input.down) y += move_speed;
  </p><p> 이것은 플레이어의 속도로 변수를 설정하고 Step 이벤트에서 입력 구조체를 가져옵니다.</p><p> 누른 각 화살표 키에 따라 해당 축에서 인스턴스를 이동합니다. 예를 들어 왼쪽을 누르면 X가 줄어들고 위쪽을 누르면 Y가 감소하는 식입니다.</p><h2> 플레이어 위치</h2><p> 테스트하기 전에 플레이어가 방의 왼쪽 상단 모서리에서 생성되는 대신 특정 위치에서 생성되는지 확인하겠습니다.</p><p> 플레이어 개체의 Create 이벤트에서 다음을 작성합니다.</p><p class="code">if (player_id == 0)<br />
    {<br />
        x = 300;<br />
    }<br />
    else if (player_id == 1)<br />
    {<br />
        x = room_width - 300;<br />
    }<br />
    <br />
    y = room_height / 2;
  </p><p><span class="inline"><a data-xref="{title}" href="Rollback_Variables/player_id.htm">player_id</a></span> 플레이어 인스턴스의 ID를 저장하는 내장 인스턴스 변수입니다.</p><p> 우리 게임에는 두 명의 플레이어가 있으므로 첫 번째 플레이어는 ID <strong>0</strong> 을 갖고 두 번째 플레이어는 ID <strong>1</strong> 을 갖습니다.</p><p> 이를 기반으로 플레이어의 초기 X 위치를 변경합니다. Y 위치는 둘 다 동일합니다.</p><p> 이제 게임을 실행하면 첫 번째 플레이어를 제어할 수 있는 두 플레이어가 모두 표시됩니다. </p><p><video class="center" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_two_players_synctest.mp4" width="856" height="420" controls="" align="center"></video></p><p> 두 번째 플레이어는 롤백 시스템의 기능인 자체적으로 불규칙하게 움직입니다. 게임에 대한 기본 테스트 형식으로 정의된 모든 입력에 대해 매 프레임마다 임의의 값을 자동으로 제공합니다.</p><p> 호출하여 자동 무작위 이동을 비활성화할 수 있습니다.<a href="Rollback_Functions/rollback_use_random_input.htm"><span class="inline">rollback_use_random_input(false)</span></a>, 또는 다른 플레이어에 대한 <a href="Defining_Inputs.htm#h1">자신의 &quot;모의&quot; 입력을 설정합니다</a>.</p><h2> 온라인 연결</h2><p> 기본 멀티플레이어 예제가 완료되었으며 인터넷으로 가져올 준비가 되었습니다.</p><p> 기본적으로 시스템은 오프라인에서 게임을 테스트하는 방법인 <strong>동기화 테스트</strong> 모드에서 시작합니다. 온라인 기능을 활성화하려면 의 두 번째 인수 <span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> 로 설정해야 합니다 <span class="inline">false</span> (동기화 테스트를 비활성화함).</p><p> 세 번째 인수인 기본 영역도 설정해야 합니다. 참조: <a data-xref="{text}" href="Rollback_Functions/rollback_create_game.htm#h">지역 이름 가져오기</a></p><p class="code">// obj_game: Create event<br />
    rollback_define_player(obj_player);<br />
    <br />
    var _joined = rollback_join_game();<br />
    <br />
    if (!_joined)<br />
    {<br />
        rollback_create_game(2, false, &quot;Europe&quot;); // &lt;- disable Sync Test, set default region<br />
    }
  </p><p> Opera GX 브라우저에서 <a href="https://gx.games">GX.games</a> 에 로그인합니다.</p><p> <strong>Opera GX</strong> 대상을 통해 게임을 실행합니다. 롤백 시스템이 시작되면 새로운 &quot;방&quot;이 생성됩니다. GameMaker 방 자산이 아니라 플레이어가 함께 플레이할 <strong>가상 방</strong> 입니다.</p><h2> 플레이어 초대</h2><p> 게임이 시작되면 플레이어 인스턴스가 즉시 표시되지 않습니다. 대신 시스템은 게임을 시작하기 전에 모든 플레이어가 참여할 때까지 기다립니다.</p><p class="note"> <span class="tip">팁</span> 플레이어가 참가하기 전에 전화를 걸어 게임을 시작할 수 있습니다.<a href="Rollback_Functions/rollback_start_game.htm"><span class="inline">rollback_start_game()</span></a>. 전화하면<a href="Rollback_Functions/rollback_use_manual_start.htm"><span class="inline">rollback_use_manual_start()</span></a> 그러면 게임은 모든 플레이어가 참여한 후에도 수동으로 시작할 때까지 기다립니다.</p><p> 기다리는 동안 게임 아래에 &quot; <strong>공유 URL 복사</strong> &quot; 버튼이 표시됩니다. 버튼이 보이지 않으면 아래로 스크롤하십시오.</p><p><img class="center_shadow" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_copy_share_url.png" /> 이렇게 하면 게임에 대한 링크가 복사되어 다른 브라우저 창에 붙여넣고 두 번째 플레이어로 참여할 수 있습니다.</p><p> 두 브라우저 창을 동시에 표시해야 합니다. 그렇지 않으면 창이 숨겨져 있는 플레이어가 시간 초과되고 게임이 종료됩니다.</p><p> 두 게임 인스턴스가 연결되고 동기화되면 브라우저 창을 통해 각 플레이어를 제어할 수 있습니다.</p><p><img class="center_shadow" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_split_test.png" /> 드래그하고 크기를 조정하여 두 창을 나란히 열 수 있습니다.</p><p> 테스트하는 동안 게임의 왼쪽 상단에 디버그 메시지가 표시되어 게임 상태에 대한 정보를 제공합니다. 호출하여 비활성화할 수 있습니다. <span class="inline"><a href="Rollback_Functions/rollback_display_events.htm">rollback_display_events(false)</a></span>.</p><h2 id="h"> 방에서 나가기</h2><p> 부르다<a href="Rollback_Functions/rollback_leave_game.htm"><span class="inline">rollback_leave_game()</span></a> 플레이어가 방을 나가게 합니다. 사용에 대한 자세한 내용은 <a href="Rollback_Functions/rollback_leave_game.htm">기능 페이지</a> 를 읽으십시오.</p><h2> 게임 로직</h2><p> 롤백 시스템은 모든 플레이어가 참가할 때 자동으로 플레이어 인스턴스를 생성합니다.<a href="Rollback_Functions/rollback_define_player.htm"><span class="inline">rollback_define_player()</span></a>.</p><p> 그러나 게임이 시작되기 전에 다른 코드를 실행할 수 있습니다. 즉, 모든 플레이어가 참여한 후에만 핵심 게임 로직을 시작하도록 주의해야 합니다.</p><p> 예를 들어 경보를 사용하여 적 인스턴스를 생성하는 경우 <a data-xref="{text}" href="Rollback_Events.htm#h">롤백 시작</a> 이벤트가 트리거된 후에만 해당 경보를 시작하십시오.</p><h2> 주요 행사</h2><p> 플레이어가 이기고 레벨을 종료하는 것과 같은 게임의 주요 이벤트는 모든 플레이어가 동기화될 때 수행되어야 합니다. 그렇지 않으면 잘못된 예측으로 인해 플레이어가 이기게 되어 결국 롤백될 때 이상하게 보일 수 있습니다.</p><p> 에 대한 예를 참조하십시오. <span class="inline"><a href="Rollback_Functions/rollback_sync_on_frame.htm">rollback_sync_on_frame()</a></span> 이 작업을 올바르게 수행하기 위해.</p><h2> 추가 읽기</h2><p> 이제 첫 번째 멀티플레이어 게임이 완료되었습니다!</p><p> 롤백 시스템에 대한 모든 내용을 알아보려면 다음 페이지를 읽으십시오.</p><ul class="colour"><li> <a data-xref="{title}" href="Rollback_System.htm">롤백 시스템</a></li><li> <a data-xref="{title}" href="Defining_Inputs.htm">입력 정의</a></li><li> <a data-xref="{title}" href="Rollback_Constraints.htm">롤백 제약</a></li><li> <a data-xref="{title}" href="Rollback_Events.htm">롤백 이벤트</a></li><li> <a data-xref="{title}" href="Rollback_Preferences.htm">플레이어 기본 설정</a></li></ul><p> 다음을 사용하여 게임에 채팅을 추가할 수 있습니다.<a href="Rollback_Functions/rollback_chat.htm"><span class="inline">rollback_chat()</span></a>.</p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div> 뒤로: <a data-xref="{title}" href="Rollback_Multiplayer.htm">멀티플레이어 롤백</a></div><div> 다음: <a data-xref="{title}" href="Rollback_System.htm">롤백 시스템</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
</body>
</html>