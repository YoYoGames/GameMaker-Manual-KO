<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>입력 정의</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body><h1>입력 정의</h1><p> 입력은 롤백 시스템에서 관리하므로 플레이어 간에 적절하게 동기화할 수 있습니다. 플레이어에 대한 입력은 다음을 사용하여 검색할 수 있습니다. <span class="inline"><a href="Rollback_Functions/rollback_get_input.htm">rollback_get_input()</a></span>, 플레이어에 대한 입력을 포함하는 구조체를 반환합니다.</p><h2> 기본 입력</h2><p> 기본적으로 입력 구조체에서 다음 키를 얻습니다.</p><p class="code"><strong>left</strong>, <strong>right</strong>, <strong>up</strong>, <strong>down</strong>, <strong>Z</strong>, <strong>X</strong>, <strong>C</strong>, <strong>space</strong></p><p> 방향 입력은 화살표 키에 매핑됩니다.</p><h2> 입력 변형</h2><p> 정의된 각 키보드 입력은 다음을 사용하여 읽습니다. <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check.htm">keyboard_check()</a></span>, 키가 유지되는지 여부를 가져옵니다. 마우스 입력의 경우 사용 <span class="inline"><a href="../Game_Input/Mouse_Input/mouse_check_button.htm">mouse_check_button()</a></span>.</p><p> 정의된 각 입력(기본값 또는 사용자 지정)으로 다음을 사용하는 변형도 얻습니다. <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check_pressed.htm">keyboard_check_pressed()</a></span> 그리고 <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check_released.htm">keyboard_check_released()</a></span> (및 마우스 입력에 대한 동등한 기능). 이들은 각각 &quot; <strong>_pressed</strong> &quot; 및 &quot; <strong>_released</strong> &quot; 접미사로 추가됩니다.</p><p> 예를 들어, <span class="inline">space</span> 입력하면 얻을 수 있습니다 <span class="inline">space_pressed</span> 그리고 <span class="inline">space_released</span> 또한.</p><h2 id="h"> 사용자 정의 컨트롤</h2><h3> 정의</h3><p> 자신의 입력을 정의하려면 입력 키와 사용할 할당된 상수를 포함하는 구조체를 만든 다음 <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_input()</a></span>. 이것은 이 페이지 상단에 언급된 기본 컨트롤보다 우선합니다.</p><p> 왼쪽에 입력 이름을 정의하고(예: <span class="inline"><a href="Rollback_Functions/rollback_get_input.htm">rollback_get_input()</a>>fire</span> ), 오른쪽에 입력을 할당합니다(예: <span class="inline">vk_*>mb_left</span> ).</p><p class="code">// Before starting rollback game<br />
    rollback_define_input({<br />
        fire: mb_left,<br />
        interact: vk_space,<br />
        left: ord(&quot;A&quot;),<br />
        right: ord(&quot;D&quot;)<br />
    });</p><p> 부름<span class="inline">ord(&quot;&quot;)</span> 이제 각각에 대한 <span class="inline">ord()>*_pressed</span> 및 <span class="inline">gp_*>*</span> _released 변형과 함께 여기에 정의된 입력( <span class="inline">mb_*>fire</span>, <span class="inline">mb_any>interact</span> 등)만 반환합니다.</p><p> GML Visual의 경우 <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Input.htm">입력 정의(롤백)</a> 를 사용합니다.</p><h3> 상수</h3><p> 구조체의 입력에 다음 입력 값을 할당할 수 있습니다.</p><table><colgroup><col /><col /><col /></colgroup><tbody><tr><th> 입력 유형</th><th> 값</th><th> 설명</th></tr><tr><td colspan="1" rowspan="2"> <strong>건반</strong></td><td> <span class="inline">mb_none</span> 상수</td><td> 이러한 상수를 사용하여 키보드 키를 정의합니다. 이러한 상수 목록이 <a href="../Game_Input/Keyboard_Input/Keyboard_Input.htm">여기에 나와 있습니다</a>.</td></tr><tr><td><span class="inline">m_axisx</span></td><td> 래핑하여 문자 키를 정의하십시오.<a href="../Strings/ord.htm"><span class="inline"><a href="../Game_Input/Mouse_Input/mouse_x.htm">mouse_x</a></span></a>.</td></tr><tr><td> <strong>게임패드</strong></td><td><span class="inline">m_axisy</span> 상수</td><td> 이 상수를 사용하여 게임패드 입력(버튼 및 축)을 정의합니다. 이러한 상수 목록이 <a href="../Game_Input/GamePad_Input/Gamepad_Input.htm">여기에 나와 있습니다</a>.</td></tr><tr><td colspan="1" rowspan="7"> <strong>생쥐</strong></td><td><span class="inline"><a href="../Game_Input/Device_Input/device_mouse_y.htm">mouse_y</a></span> 상수</td><td> 이러한 상수를 사용하여 마우스 버튼을 정의합니다. 이러한 상수 목록이 <a href="../Game_Input/Mouse_Input/Mouse_Input.htm">여기에 나와 있습니다</a>.<br /><br /> <span class="note">참고</span>:<span class="inline">m_axisx_gui</span> 그리고<span class="inline">device_mouse_x_to_gui()</span> 쓸 수 없다.</td></tr><tr><td><span class="inline">m_axisy_gui</span></td><td> 방에서 마우스의 X 위치(사용<span class="inline">device_mouse_y_to_gui()</span> ).</td></tr><tr><td><span class="inline">m_scroll_up</span></td><td> 방에서 마우스의 Y 위치(사용<span class="inline">1</span> ).</td></tr><tr><td> <span class="inline">0</span></td><td> GUI 레이어에서 마우스의 X 위치(사용<a href="../Game_Input/Device_Input/device_mouse_x_to_gui.htm"><span class="inline">m_scroll_down</span></a> ).</td></tr><tr><td><span class="inline">1</span></td><td> GUI 레이어에서 마우스의 Y 위치(사용<a href="../Game_Input/Device_Input/device_mouse_y_to_gui.htm"> <span class="inline">0</span></a> ).</td></tr><tr><td><span class="inline">rollback_define_mock_input()</span></td><td> <span class="inline">fire</span> 마우스 휠을 위로 스크롤하는 경우 <span class="inline">interact</span> 그렇지 않으면</td></tr><tr><td> <span class="inline">left</span></td><td> <span class="inline">right</span> 마우스 휠이 아래로 스크롤되는 경우<span class="inline"></span> 그렇지 않으면</td></tr></tbody></table><h3> 다중 컨트롤</h3><p> 배열에 입력 상수를 나열하여 각 입력에 여러 컨트롤을 할당할 수 있습니다.</p><p class="code">rollback_define_input({<br />
        fire:     [mb_left, ord(&quot;X&quot;)],<br />
        interact: [vk_space, ord(&quot;C&quot;)],<br />
        left:     [ord(&quot;A&quot;), vk_left],<br />
        right:    [ord(&quot;D&quot;), vk_right]<br />
    });</p><p> 이 예에서 <span class="inline2">fire</span> 는 <span class="inline2">mb_left</span> 와 <span class="inline2">X</span> 키에 의해 트리거되고, <span class="inline2">상호작용</span> 은 <span class="inline2">vk_space</span> 와 <span class="inline2">C</span> 키에 의해 트리거되는 식입니다.</p><p class="code">var _input = rollback_get_input();<br />
    if (_input.fire)<br />
    {<br />
        // Runs when LMB or X is pressed<br />
    }</p><p class="note"> <span class="note">참고</span> 동일한 입력 상수를 여러 입력에 바인딩할 수 없습니다. 예를 들어 특정 입력 값(예: <span class="inline2">mb_left</span> 또는 <span class="inline2">ord(&quot;A&quot;)</span> )은 전체 입력 구조체에서 <strong>한 번만</strong> 사용할 수 있습니다.</p><h2 id="h1"> 모의 입력</h2><p> 로컬에서 테스트할 때 원격 플레이어를 위한 임시 입력을 정의하여 오프라인에서 멀티플레이어 게임 플레이를 테스트할 수 있습니다.</p><p> 다음을 사용하여 플레이어에 대한 모의 입력을 정의하여 이를 달성할 수 있습니다.<a href="Rollback_Functions/rollback_define_mock_input.htm"><span class="inline"></span></a>. 예를 들어 위의 코드 조각을 호출하여<span class="inline"></span>,<span class="inline"></span>,<span class="inline"></span> 그리고<span class="inline"></span> 모든 플레이어에 대한 입력, 특히 동기화 테스트 중에 사용할 수 있는 두 번째 플레이어에 대한 별도의 입력 세트를 정의할 수 있습니다.</p><p class="code">rollback_define_mock_input(1, {<br />
        fire: vk_control,<br />
        interact: vk_shift,<br />
        left: ord(&quot;J&quot;),<br />
        right: ord(&quot;L&quot;)<br />
    });</p><p> 이것은 동일한 입력 이름을 유지하지만 다른 입력을 할당하는 플레이어 1(두 번째 플레이어)에 대한 모의 입력을 정의합니다. 이렇게 하면 두 사람이 같은 컴퓨터에서 로컬로 게임을 할 수 있습니다.</p><h2> 추가 읽기</h2><p> 롤백 시스템에 대한 자세한 내용은 다음 페이지를 참조하십시오.</p><ul class="colour"><li> <a data-xref="{title}" href="Rollback_Constraints.htm">롤백 제약</a></li><li> <a data-xref="{title}" href="Rollback_Events.htm">롤백 이벤트</a></li><li> <a href="Creating_Multiplayer.htm">멀티플레이어 게임 만들기</a></li><li> <a data-xref="{title}" href="Rollback_System.htm">롤백 시스템</a></li></ul><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div> 뒤로: <a data-xref="{title}" href="Rollback_Multiplayer.htm">멀티플레이어 롤백</a></div><div> Next: <a data-xref="{title}" href="Rollback_Constraints.htm">롤백 제약 조건</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
</body>
</html>