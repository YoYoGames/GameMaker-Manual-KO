<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>file_find_next</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="file_find_next에 대한 참조 페이지" />
  <meta name="rh-index-keywords" content="file_find_next" />
  <meta name="search-keywords" content="file_find_next" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>file_find_next</h1><p> 이 함수는 이전에 주어진 마스크와 속성을 만족하는 다음 파일의 이름을 반환합니다.<a href="file_find_first.htm"><span class="inline">file_find_first()</span></a> ). 그러한 파일이 없으면 빈 문자열이 반환됩니다.</p><p class="note"><b></b> 경고 이 기능은 <span data-keyref="GameMaker Name">GameMaker</span> 가 샌드박스 처리되어 있기 때문에 예상대로 작동하지 않을 수 있습니다! 자세한 내용은 <a href="../../../../Additional_Information/The_File_System.htm">파일 시스템</a> 섹션을 참조하십시오.</p><p class="note"> 참고 이 기능은 모든 C++ 대상 플랫폼(Windows, Mac, iOS, Android)에서 작동하지만 필터 플래그는 Windows에서만 작동합니다.</p><p></p><h4> 통사론:</h4><p class="code">file_find_next();</p><p></p><h4> 보고:</h4><p class="code"><span data-keyref="Type_String"></span></p><p></p><h4> 예시:</h4><p class="code">if directory_exists(&quot;\User Content&quot;)<br />
    {<br />
        fileA = file_find_first(&quot;/User Content/*.doc&quot;, fa_readonly);<br />
        fileB = file_find_next();<br />
        fileC = file_find_next();<br />
        file_find_close();<br />
    }</p><p> 이 코드는 지정된 디렉토리가 존재하는지 확인하고 존재하는 경우 그곳으로 이동하여 첫 번째 &quot;읽기 전용&quot;을 반환합니다. <span class="inline">.doc</span> 파일을 찾았습니다. 그런 다음 두 개의 파일을 더 찾고 파일 찾기를 닫습니다.</p><p> <a href="../../../GML_Overview/Language_Features/while.htm"><span class="notranslate">while</span></a> 루프를 사용하여 원하는 수의 파일을 찾을 수 있습니다.</p><p class="code">var files = [];<br />
    var file_name = file_find_first(&quot;/User Content/*.doc&quot;, fa_readonly);<br />
    <br />
    while (file_name != &quot;&quot;)<br />
    {<br />
        array_push(files, file_name);<br />
    <br />
        file_name = file_find_next();<br />
    }<br />
    <br />
    file_find_close();
  </p><p> 위의 코드는 찾은 모든 파일 이름을 저장할 빈 배열을 만들고 읽기 전용 찾기를 시작합니다. <span class="inline">.doc</span> 파일. 해당 파일 이름이 빈 문자열이 아닌 경우 파일 이름으로 푸시합니다. <span class="inline">files</span> 배열을 찾은 다음 다음 파일을 찾습니다. 루프는 빈 문자열이 발견될 때까지(즉, 일치하는 파일이 더 이상 없을 때까지) 루프를 종료하고 끝에서 파일 찾기를 닫을 때까지 계속 반복됩니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="File_System.htm">파일 시스템</a></div><div style="float:right"> 다음: <a href="file_find_close.htm"><span class="notranslate">file_find_close</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
file_find_next
-->
  <!-- TAGS
file_find_next
-->
</body>
</html>