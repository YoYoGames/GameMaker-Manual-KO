<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>다른 인스턴스의 변수 주소 지정</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="다른 인스턴스의 변수를 처리하기 위한 괭이 개요 페이지" />
  <meta name="rh-index-keywords" content="다른 인스턴스의 변수 주소 지정" />
  <meta name="search-keywords" content="" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 다른 인스턴스의 변수 주소 지정</h1><p> <a href="Variables_And_Variable_Scope.htm">변수</a> 전용 섹션에서 단일 인스턴스 또는 전역 범위에서 변수를 만들고 사용하는 방법을 찾았지만 한 인스턴스가 다른 인스턴스의 변수에 액세스하도록 하려면 어떻게 해야 할까요? 예를 들어 총알 개체와의 충돌에서 총알의 변수에 액세스하여 총알이 얼마나 많은 피해를 주는지 확인하거나 동작을 멈추고 싶을 수 있습니다. 퍼즐의 모든 공 중에서 주인공을 특정 위치로 이동시키거나 게임에서 일반적으로 접하게 되는 여러 상황을 원할 수 있습니다. 고맙게도 GameMaker 언어는 이를 달성하기 위한 메커니즘을 갖추고 있습니다.</p><p> <em>다른</em> 인스턴스에서 변수에 액세스하거나 변수를 변경하는 가장 일반적인 방법 중 하나는 개체 이름을 식별자로 사용한 다음 &quot;<span class="inline">.</span> &quot;는 <span data-keyref="GameMaker Name">GameMaker</span> 에게 참조되는 변수가 해당 특정 개체의 인스턴스 내에서 할당되거나 변경되어야 함을 알립니다. 이를 &quot;점 표기법&quot;이라고 하며 구문은 다음과 같습니다.</p><p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;; </p><p> 실제로는 다음과 같습니다.</p><p class="code">obj_ball.speed = 0;</p><p> 위의 코드를 사용하여 &quot;<span class="inline">obj_ball</span> &quot;. 그러나 방에 주어진 개체의 인스턴스가 두 개 이상 있는 경우 모든 개체에 <em>동일하게 적용됩니다.</em> <b>HTML5</b> 를 사용하지 않는 경우에는 <em>하나만</em> 영향을 주지만 알 방법이 없습니다. 어떤 것이 영향을 미칠지 - 따라서 개체의 모든 인스턴스에 액세스해야 하는 경우 다음을 사용해야 합니다.<a href="Language_Features/with.htm"><span class="inline">with()</span></a>, 100% 크로스 플랫폼 호환이 가능합니다. 일반적으로 이 형식은 방에 개체의 단일 인스턴스가 있거나(다음 부분에서 볼 수 있듯이) 특정 <i>인스턴스 <b>ID</b></i> 가 있는 경우에만 사용해야 합니다.</p><p> 방 안에 여러 인스턴스가 있는 경우 고유한 <b>인스턴스 이름</b> 을 사용하여 <span data-keyref="GameMaker Name">GameMaker</span> 에 정확히 어떤 인스턴스를 처리할지 알려주는 개체의 단일 인스턴스에 접근할 수도 있습니다. <b>인스턴스 이름 상수</b> 는 게임에서 방에 추가된 각각의 모든 인스턴스에 부여되는 고유 식별 상수입니다. <a href="../../The_Asset_Editors/Rooms.htm">룸 편집기</a> 에서 인스턴스를 두 번 클릭하여 이 상수를 찾을 수 있습니다.</p><p><img alt="The instance constant in the room editor" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Instance_Constant.png" /> 이 이름은 편집할 수 있고 더 설명적인 이름을 지정할 수 있습니다. 이름은 전체 게임에서 고유 <em>해야</em> 하지만 점의 왼쪽으로 사용할 수 있습니다.</p><p class="code">inst_4DB70D2.speed = 0;</p><p> 그러나 지금까지 가장 일반적이고 실용적인 방법은 해당 변수 <i>가 유효한 <b>인스턴스 ID</b> 를 저장한</i> 한 포인트 왼쪽에 있는 <i>변수</i> 를 사용하는 것입니다. 다음 예는 이를 보여줍니다.</p><p class="code">// Example 1<br />
    var _inst = instance_position(mouse_x, mouse_y, all);<br />
    if instance_exists(_inst)<br />
    {<br />
        _inst.speed = 0;<br />
    }<br />
    <br />
    // Example 2<br />
    var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br />
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br />
    _inst.target = id;
  </p><p> 위의 예제 1 코드에는 <a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm"><span class="inline">instance_exists()</span></a> 코드 블록에서 호출합니다. 이는 point 메서드를 사용하여 다른 인스턴스 값에 액세스하거나 변경하면 해당 인스턴스가 존재하지 않는 경우 오류가 발생하고 게임이 중단되며 해당 예제의 경우 그럴 가능성이 있기 때문입니다. 그러나 예제 2와 예제 3에서는 인스턴스가 있다는 것을 <i>알고</i> 있기 때문에 확인할 필요가 없습니다. 예제 2에서는 인스턴스를 생성했고 예제 3에서는 충돌 이벤트에서 다른 인스턴스를 생성했기 때문입니다. 그러나 이 방법을 사용하는 동안 인스턴스가 파괴, 비활성화 또는 다른 방법으로 방에서 제거될 가능성이 <i>있는</i> 경우 <i>항상</i> 사전에 확인해야 합니다. <span class="inline">instance_exists()</span> 기능 또는 <a href="../GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a> 함수.</p><p> 특수 <a href="Instance_Keywords.htm">키워드</a> &quot;를 사용할 수 없습니다.<span class="inline">all</span> &quot; 이 방법을 사용하여 모든 인스턴스를 대상으로 지정합니다(예: <span class="inline">all.val = 10</span> 오류가 발생함) 키워드를 사용할 <i>수</i> 있습니다.<span class="inline">other</span> &quot; 그리고 &quot;<span class="inline">self</span> &quot; 문제 없이 <span class="inline">other</span> <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">충돌 이벤트</a> 에서:</p><p class="code">// Example 3 other.hp -= 10;<br />
    if other.hp &lt;= 0<br />
    {<br />
        other.sprite_index = spr_E_Dead;<br />
    }</p><p> 할당의 왼쪽으로 어떤 기능도 단독으로 사용할 수 없다는 점에 유의하는 것도 중요합니다. 예를 들어 다음 코드는 오류를 제공합니다.</p><p class="code">instance_nearest(x, y, obj).speed = 0;</p><p> 해당 코드 예제에서 표현식의 반환 값은 정수(가장 가까운 인스턴스의 고유 ID 값)이므로 대괄호로 묶어야 합니다. <span class="inline">()</span> 이러한 방식으로 사용하고 필요한 인스턴스를 적절하게 처리합니다. 위의 코드는 다음과 같이 올바르게 작성됩니다.</p><p class="code">(instance_nearest(x, y, obj)).speed = 0;<br />
    <br />
    //or<br />
    <br />
    var inst = instance_nearest(x, y, obj);<br />
    inst.speed = 0;
  </p><p> 이것들은 모두 다른 인스턴스에서 변수를 읽고, 변경하고, 설정하는 완벽하게 유효한 방법이며 포인트가 실제로 <i>operator</i> 이기 때문에 작동합니다. 왼쪽 <a class="glossterm" data-glossterm="피연산자" href="#">피연산자</a> 로 값을, 오른쪽 피연산자로 변수를 사용하고 표시된 개체 또는 인스턴스에서 이 특정 변수의 주소를 반환합니다. 모든 개체 이름, 상수, ID 등은 단순히 값을 나타내며 다른 값과 마찬가지로 처리할 수 있습니다.</p><p> 다른 인스턴스에서 변수를 참조하는 다른 방법은 GameMaker Language 함수를 사용하는 것입니다. <span class="inline">with()</span>, <a href="Language_Features/with.htm">여기</a> 에 자세히 설명되어 있습니다. </p><p class="code">// This will affect all instances of the object &quot;obj_Enemy&quot;<br />
    with (obj_Enemy)<br />
    {<br />
        target = other.parent;<br />
    }<br />
    <br />
    // This will affect one instance of the object &quot;obj_Enemy&quot;<br />
    var _enemy = instance_nearest(x, y, obj_Enemy);<br />
    if instance_exists(_enemy)<br />
    {<br />
        with (_enemy)<br />
        {<br />
            target.x = mouse_x;<br />
            target.y = mouse_y;<br />
        }<br />
    }
  </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="GML_Overview.htm">GML 개요</a></div><div style="float:right"> 다음: <a data-xref="{title}" href="Expressions_And_Operators.htm">표현식 및 연산자</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>