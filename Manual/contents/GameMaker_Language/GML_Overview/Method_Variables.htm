<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>메소드 변수</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="메서드 변수의 사용을 설명하는 페이지" />
  <meta name="rh-index-keywords" content="메소드 변수" />
  <meta name="search-keywords" content="메소드 변수,행동 양식,method" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 메소드 변수</h1><p> 메서드 변수는 본질적으로 함수가 할당된 변수로, 함수를 인스턴스에 &quot;바인딩&quot;하고 변수를 사용하여 함수를 참조할 수 있도록 합니다. 마치 <a href="Runtime_Functions.htm">런타임 함수 이름</a> 을 사용하여 빌드된 - GML 함수에서. 사용되는 변수는 범위 내에서 <em>지역</em>, <em>인스턴스</em> 또는 <em>전역일</em> 수 있습니다(변수 범위에 대한 자세한 내용은 <a href="Variables_And_Variable_Scope.htm">여기</a> 참조).</p><p> 참조: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">스크립트 함수와 메서드</a></p><h2> 메소드 생성</h2><p> 메서드 변수를 만드는 구문은 다음과 같습니다.</p><p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p><p> 또는</p><p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p><p class="note"> GML Visual에서 함수를 생성하려면 <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a> 을 사용하십시오. &quot;Temp&quot; 옵션을 활성화하여 메서드 변수를 생성합니다(위에 표시된 첫 번째 구문).</p><p> 그러나 일반적으로 <em>첫 번째</em> 형식은 메서드에 사용하고 두 번째 형식은 <a href="Script_Functions.htm">스크립트 함수</a> 정의에 사용합니다. 두 번째 형식은 함수 이름에 스크립트 인덱스도 할당하지만 첫 번째 형식은 &quot;true&quot; 메서드(및 스크립팅된 함수를 정의하는 데 사용되는 경우 <a href="Variables/Global_Variables.htm"><span class="notranslate">global</span></a> 접두사를 사용해야 합니다.</p><p class="note"> <span class="note">참고</span> 프로젝트에서 두 양식을 모두 사용한 다음 각 양식에서 런타임 함수 <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a> 를 호출하여 이를 확인할 수 있습니다. 하나는 스크립트 인덱스 ID를 반환하기 때문에 &quot;숫자&quot;로 분류되고 다른 하나는 &quot;메서드&quot;로 분류됩니다.</p><p> 따라서 일반적으로 메서드 및 메서드 변수에 대해 이야기할 때 스크립트 인덱스로 정의 <em>되지 않은</em> 함수를 항상 참조한다는 점을 명심하십시오.</p><p> 아래에서 다양한 범위를 사용하여 메서드 변수를 만드는 세 가지 간단한 예를 볼 수 있습니다.</p><p class="code">// Local<br />
    var _debug = function(message)<br />
    {<br />
        show_debug_message(message);<br />
    }<br />
    <br />
    // Instance<br />
    do_maths = function(val1, val2, val3)<br />
    {<br />
        return (val1 * val2) - val3;<br />
    }<br />
    <br />
    // Global<br />
    global.pd = function(_x1, _y1, _x2, _y2);<br />
    {<br />
        return point_distance(_x1, _y1, _x2, _y2);<br />
    }
  </p><p> 위의 코드에서 함수에 대한 입력으로 제공되는 다양한 매개변수는 모두 이름이 지정되었으며 이러한 이름은 다른 입력을 참조하기 위해 함수 내에서 사용해야 하는 이름입니다. 또한 다음을 사용할 수 있습니다. <span class="inline"><a href="Language_Features/return.htm">return</a></span> 코드의 다른 곳에서 사용하기 위해 함수에서 값을 반환하고 반환 값이 정의 <em>되지 않은</em> 함수는 다음을 반환합니다.<span class="inline">undefined</span>.기본적으로.</p><p class="note"> <span class="note">참고</span> 변수가 선택한 범위에 있는 동안 실제 함수는 변수가 처음 정의된 범위에 바인딩됩니다. 예를 들어 <a href="Script_Functions.htm">스크립트 함수</a> 는 모두 전역 범위이며 &quot;바인딩 해제&quot;됩니다(즉, 어떤 인스턴스와도 연결되지 않음 ) 하지만 그 안에 다른 함수를 메서드 변수로 생성하는 스크립트 함수가 있고 인스턴스에서 이 스크립트 함수를 호출하면 스크립트 내에서 사용된 함수 <strong>가 인스턴스 변수에 메서드로 바인딩됩니다</strong>. 일반적으로 이것은 생각할 필요가 없지만 메서드 변수를 사용하는 더 복잡한 작업의 경우 고려할 가치가 있습니다. 이것은 다음과 같은 다른 구문을 사용할 때도 적용됩니다.<a href="Language_Features/with.htm"><span class="inline">with</span></a> - with 내부에 메소드 변수를 생성하면 함수는 현재 범위에 있는 인스턴스에 바인딩됩니다.</p><p> 메서드 변수가 생성되면 런타임 함수나 스크립트 함수처럼 사용할 수 있습니다. 예를 들면 다음과 같습니다.</p><p class="code">create_vec = function(_x1, _y1, _x2, _y2);<br />
    {<br />
        var _array;<br />
        _array[0] = point_distance(_x1, _y1, _x2, _y2);<br />
        _array[1] = point_direction(_x1, _y1, _x2, _y2);<br />
        return _array;<br />
    }<br />
    <br />
    vec = create_vec(x, y, mouse_x, mouse_y);
  </p><p> 함수 내에서 생성된 변수는 일반 규칙과 동일한 규칙을 따르며 사용된 키워드 또는 함수 호출 범위에 따라 범위가 지정됩니다. 위의 예에서 우리는 <span class="inline">var</span> 따라서 배열 변수는 함수의 <em>로컬</em> 범위에 있습니다. 키워드를 사용하지 않았다면 변수는 함수를 호출한 인스턴스의 범위에서 생성되었을 것입니다.</p><p> 메서드는 스크립트 함수와 마찬가지로 전달되지 않을 때 기본값이 있는 선택적 인수를 사용할 수도 있습니다.</p><p class="code">create_attachment = function(_attachment, <strong>_x = x</strong>, <strong>_y = y</strong>)<br />
    {<br />
        return instance_create_layer(_x, _y, layer, _attachment);<br />
    }</p><p> 위의 함수는 세 개의 인수를 취하며 마지막 두 개는 선택 사항입니다. 함수가 호출될 때 전달되지 않으면 인스턴스의 <span class="inline">x</span> 그리고 <span class="inline">y</span> 기본적으로 좌표.</p><p> 인수가 전달되지 않고 기본값이 없으면 다음과 같습니다. <span class="inline">undefined</span>.</p><p> 메서드는 또한 모든 함수 호출 동안 값을 유지하는 정적 변수를 사용할 수 있습니다. 자세한 <a href="Functions/Static_Variables.htm">내용은 이 페이지를 읽으십시오</a>.</p><p> 아래에는 메서드 변수와 관련된 몇 가지 도우미 함수가 나열되어 있습니다.</p><ul class="colour"><li> <a href="../GML_Reference/Variable_Functions/is_method.htm"><span class="notranslate">is_method</span></a></li><li> <a href="../GML_Reference/Variable_Functions/method.htm"><span class="notranslate">method</span></a></li><li> <a href="../GML_Reference/Variable_Functions/method_get_self.htm"><span class="notranslate">method_get_self</span></a></li><li> <a href="../GML_Reference/Variable_Functions/method_get_index.htm"><span class="notranslate">method_get_index</span></a></li> </ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="GML_Overview.htm">GML 개요</a></div><div style="float:right"> 다음: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">스크립트 함수와 메서드</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
-->
  <!-- TAGS
method_variables
-->
</body>
</html>