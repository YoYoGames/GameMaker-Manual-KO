<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>try / catch / finally</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="try/catch/finally 함수를 설명하는 페이지" />
  <meta name="rh-index-keywords" content="try,catch,finally" />
  <meta name="search-keywords" content="try,catch,finally" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>try / catch / finally</h1><p> 그만큼 <span class="inline">try</span>, <span class="inline">catch</span> 그리고 <span class="inline">finally</span> 명령문은 오류 검사를 위해 게임에서 사용할 수 있으며 코드 블록을 테스트하고 <a href="../../../Additional_Information/Errors/Runner_Errors.htm">런타임 예외</a> 가 발생할 경우 발생하는 상황을 제어할 수 있습니다. 이를 사용하면 예외가 게임을 종료하고 사용자에게 표준 오류 메시지를 표시하는 것을 방지할 수 있지만, 이는 예를 들어 로그 파일을 저장하고 게임을 정상적으로 종료하는 것과 같은 이 경우 다음에 일어나는 일을 처리해야 함을 의미합니다( 아무것도 하지 않기로 선택하면 게임이 불안정해지고 제대로 수행되지 않을 수 있습니다.</p><p> 가장 기본적으로 <span class="inline">try</span> 구문은 다음과 같습니다.</p><p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p><p> 그러나 <span class="inline">try</span> 실제로 코드가 생성할 수 있는 예외를 처리할 것이 없으면 그다지 도움이 되지 않으므로 일반적으로 <span class="inline">catch</span>, 다음 구문을 사용합니다.</p><p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }<br />
    catch(&lt;variable&gt;)<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p><p> 뭐 <span class="inline">catch</span> 이전의 예외가 발생했을 때 다음 블록에 제공된 추가 코드를 실행할 수 있도록 허용합니다. <span class="inline">try</span> 잡혔습니다. 이것이 런타임 예외인 경우 제공된 변수를 사용하여 다음 정보를 포함하는 <a href="../Structs.htm">구조체</a> 에 액세스할 수 있습니다.</p><p class="code">{<br />
    message : &quot;&quot;,               // a string that is a short message for this exception<br />
    longMessage : &quot;&quot;,           // a string that is a longer message for this exception<br />
    script : &quot;&quot;,                // a string that describes where the exception came from<br />
    stacktrace : [ &quot;&quot;, &quot;&quot; ],    // an array of strings that is the stack frame the exception was generated<br />
    }</p><p> 간단한 사용 예는 다음과 같습니다.</p><p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        c = a div b;<br />
    }<br />
    catch( _exception)<br />
    {<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }</p><p> 예외가 발생했는지 여부에 관계없이 일부 코드를 실행하고 싶을 수 있습니다. <span class="inline">finally</span> 차단하다. 그만큼 <span class="inline">finally</span> 구문은 다음과 같습니다.</p><p class="code">finally<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        etc...<br />
    }</p><p> 다음과 같이 이들을 조합하여 사용할 수 있다는 점은 주목할 가치가 있습니다.</p><ul class="colour"><li><span class="inline">try</span> / <span class="inline">finally</span></li><li><span class="inline">try</span> / <span class="inline">catch</span></li><li><span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span></li></ul><p> 내에서 참고하십시오. <span class="inline">finally</span> 사용할 <em>수 없는</em> 차단<a href="break.htm"><span class="inline">break</span></a>,<a href="continue.htm"><span class="inline">continue</span></a>,<a href="exit.htm"><span class="inline">exit</span></a> 또는<a href="return.htm"><span class="inline">return</span></a> 명령문은 이 컨텍스트에서 의미가 없으며 사용되는 경우 컴파일러에서 오류가 생성됩니다.</p><p> 마지막으로 다양한 중첩이 가능합니다. <span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span> 예를 들어:</p><p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        try<br />
        {<br />
            c = a div b;<br />
        }<br />
        finally<br />
        {<br />
            ++a;<br />
        }<br />
    }<br />
    catch(_exception)<br />
    {<br />
        ++a;<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }<br />
    finally<br />
    {<br />
        show_debug_message(&quot;a = &quot; + string(a));<br />
    }</p><p> 함수를 호출하여 기본 GML 오류 메시지를 인수하고 고유한 핸들러 코드를 사용할 수 있다는 점은 주목할 가치가 있습니다.<a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><span class="inline">exception_unhandled_handler()</span></a>. 이 <a href="../Runtime_Functions.htm">런타임 함수</a> 를 사용하면 게임에서 처리되지 않은 예외가 발생할 때마다 호출되는 사용자 지정 <a href="../Method_Variables.htm"><span class="notranslate">method</span></a> 를 제공할 수 있습니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Language_Features.htm">언어 기능</a></div><div style="float:right"> 다음: <a href="throw.htm"><span class="notranslate">throw</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->
</body>
</html>