<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>with</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="with 함수를 설명하는 페이지" />
  <meta name="rh-index-keywords" content="with" />
  <meta name="search-keywords" content="with" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>with</h1><p> 다른 인스턴스의 <a href="../Addressing_Variables_In_Other_Instances.htm">변수 주소 지정</a> 섹션에 표시된 대로 현재 주어진 코드를 실행하고 있는 것과 다른 인스턴스와 <a href="../Structs.htm">구조체</a> 의 변수 값을 읽고 변경할 수 있습니다. 그러나 많은 경우 다른 인스턴스 내에서 단일 변수를 변경하는 것보다 훨씬 더 많은 작업을 수행하고 여러 기능과 코드 줄을 필요로 하는 더 복잡한 코드 작업을 수행하기를 원할 수 있습니다. 예를 들어, 게임에서 공 개체의 모든 인스턴스를 8픽셀 아래로 이동하려고 한다고 상상해 보십시오. 다음 코드로 간단히 달성할 수 있다고 생각할 수 있습니다.</p><p class="code">obj_ball.y = obj_ball.y + 8;</p><p> 그러나 할당의 오른쪽이 첫 번째 공의 y 좌표 값을 얻고 여기에 8을 더하기 때문에 이것은 옳지 않습니다. 다음으로 이 새 값은 <em>모든</em> 공의 y 좌표로 설정되므로 다음을 사용하더라도 모든 공이 동일한 y 좌표를 갖게 됩니다.</p><p class="code">obj_ball.y += 8;</p><p> 그것은 단순히 첫 번째 명령문의 약어이기 때문에 정확히 동일한 효과를 가집니다. 그렇다면 어떻게 <i>해야</i> 이런 결과를 얻을 수 있을까요? 그렇기 때문에 <span class="inline">with</span> 문이 GML에 존재합니다. 그만큼 <span class="inline">with</span> 문에는 다음과 같은 구문이 있습니다.</p><p class="code">with (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p><p> <a class="glossterm" data-glossterm="표현" href="#">표현식</a> 의 경우 인스턴스 ID, 개체 ID(이 개체의 방에 있는 <i>모든 인스턴스</i> 가 코드 블록을 실행해야 함을 나타냄)를 사용하여 코드를 수행할 하나 이상의 인스턴스(또는 구조체)를 지정할 수 있습니다. 구조체 ID 또는 특수 <a href="../Instance_Keywords.htm">키워드</a> 중 하나(<span class="inline">all</span> 또는<span class="inline">other</span> ). 그러면 중괄호 안의 코드 <strong>범위</strong> 가 변경됩니다. <span class="inline">{}</span> 코드를 실제로 보유하는 인스턴스, 구조체 또는 함수에서 표현식에 제공된 인스턴스(또는 인스턴스 또는 구조체).</p><p> 표현식이 범위를 설정하면 <span class="inline">with</span>, <a class="glossterm" data-glossterm="성명" href="#">그러면</a> 해당 인스턴스가 현재( <span class="inline">self</span> ) 사례. 따라서 원래 문제로 돌아가서 ball 개체의 모든 인스턴스를 8픽셀 아래로 이동하려면 다음을 입력합니다.</p><p class="code">with (obj_ball)<br />
    {<br />
        y += 8;<br />
    }</p><p> 본질적으로 이것은 루프이며 루프가 <a class="glossterm" data-glossterm="반복" href="#">반복</a> 될 때마다 코드는 개체의 한 인스턴스에서 실행됩니다. <span class="inline">obj_ball</span>.</p><p> 여러 명령문을 실행하려면 다른 코드 블록과 마찬가지로 중괄호 안에 명령문을 포함하기만 하면 됩니다. 예를 들어, 이 예의 모든 공을 임의의 위치로 이동하고 임의의 속도와 방향을 지정하려면 다음을 사용합니다.</p><p class="code">with (obj_ball)<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        speed = 1 + random(2);<br />
        direction = random(360);<br />
    }</p><p> 위에서 언급했듯이 명령문 내에서 표시된 인스턴스 또는 구조체가 대상(<span class="inline">self</span> ) 코드 블록을 실행하는 인스턴스, 즉 원래 인스턴스( <span class="inline">with</span> 및 전체 코드 블록)이<a href="../Instance_Keywords.htm"><span class="inline">other</span></a> 사례. 예를 들어, 모든 공을 실제로 코드가 포함된 현재 인스턴스의 위치로 이동하려면 다음을 입력합니다.</p><p class="code">with (obj_ball)<br />
    {<br />
        x = other.x;<br />
        y = other.y;<br />
    }</p><p> 그만큼 <span class="inline">with</span> 문은 매우 강력한 도구이며 많은 상황에서 유용하므로 사용 방법을 완전히 이해하는 것이 중요합니다. 아래에 몇 가지 사용 예가 더 있습니다.</p><p class="code">with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Ball))<br />
    {<br />
        speed = other.speed;<br />
        direction = other.direction;<br />
    }</p><p> 위의 코드는 다음의 인스턴스를 생성합니다. <span class="inline">obj_Ball</span> 전체 코드 블록을 실행하는 인스턴스의 속도와 방향을 할당합니다.</p><p class="code">with (instance_nearest(x, y, obj_Ball))<br />
    {<br />
        instance_destroy();<br />
    }</p><p> 위의 코드는 인스턴스를 파괴합니다. <span class="inline">obj_Ball</span> 코드를 실행하는 인스턴스에 가장 가깝습니다.</p><p class="code">with(clone_struct)<br />
    {<br />
        xx = other.x;<br />
        yy = other.y;<br />
        spd = other.speed;<br />
        dir = other.direction;<br />
    }</p><p> 위의 코드는 <span class="inline">with</span> 구조체를 대상으로 지정하고 주어진 구조체 멤버 변수를 코드를 호출하는 인스턴스의 인스턴스 변수에 저장된 값으로 설정합니다.</p><p class="code">var _inst = noone;<br />
    with (obj_ball)<br />
    {<br />
        if (str &gt; other.str)<br />
        {<br />
            _inst = id;<br />
        }<br />
    }<br />
    if (_inst != noone)<br />
    {<br />
        target = _inst;<br />
    }</p><p> 위의 코드는 <a href="../Variables_And_Variable_Scope.htm">지역 변수</a> 를 사용하기 때문에 이전 코드보다 약간 더 복잡합니다. 이 변수는 인스턴스나 구조체가 아닌 <em>이벤트</em> 또는 <em>스크립트</em> <em>함수</em> 에 대해 <strong>로컬</strong> 이므로 코드 블록 내에서 참조되는 모든 인스턴스에서 사용하고 액세스할 수 있습니다. 따라서 위의 코드에서 지역 변수를 특수 키워드로 설정했습니다.<span class="inline">noone</span> 그런 다음 사용<span class="inline">with</span> 모든 인스턴스를 갖도록 구성<span class="inline">obj_Ball</span> 그들의 확인<span class="inline">str</span> 코드 블록을 실행하는 인스턴스에 대한 변수입니다. 변수의 값이 더 크면 고유 ID를 저장합니다.<span class="inline">inst</span> 코드 끝에서 호출 인스턴스(또는 키워드<span class="inline">noone</span> 더 크지 않은 경우)는 지역 변수에 저장됩니다. <span class="inline">_inst</span>.</p><p> 특별한 기능을 사용할 수 있다는 점은 주목할 가치가 있습니다. <span class="inline"><a href="break.htm">break</a></span> 그리고 <span class="inline"><a href="continue.htm">continue</a></span> <font face="Lucida Console"><span style="font-size: 16px;"><b>with</b></span></font> 호출 내의 명령문도 마찬가지입니다. 사용 <span class="inline">break</span> 즉시 종료됩니다 <span class="inline">with</span> 코드 블록 후 이벤트 또는 기능에 있는 코드로 이동 <span class="inline">with</span> 예를 들어:</p><p class="code">var count = 0;<br />
    with (obj_Enemy)<br />
    {<br />
        if (++count &gt; 10)<br />
        {<br />
            break;<br />
        }<br />
        hp = 100;<br />
    }</p><p> 위의 코드는 객체의 방에 있는 인스턴스를 반복합니다. <span class="inline">obj_Enemy</span> 그리고 변수를 설정 <span class="inline">hp</span> 처음 10개를 찾으면 100개로 증가합니다. 10개 이상의 인스턴스가 존재하는 경우 with 코드는 다음을 호출합니다. <span class="inline">break</span> 그리고 끝.</p><p> 사용 예 <span class="inline">continue</span> 안에 <span class="inline">with</span> 루프는 다음과 같습니다.</p><p class="code">with (obj_Enemy_Parent)<br />
    {<br />
        if (invulnerable == true)<br />
        {<br />
            continue;<br />
        }<br />
        hp -= 25;<br />
    }</p><p> 이 코드는 부모가 있는 모든 인스턴스를 반복합니다. <span class="inline">obj_Enemy_Parent</span>, 다음 각 인스턴스를 확인하여 <span class="inline">invulnerable</span> 인스턴스 변수는 <span class="inline">true</span> 아니면. 그렇다면, <span class="inline">continue</span> 키워드는 루프의 현재 반복을 종료하고 사용 가능한 다음 인스턴스로 이동합니다. 그렇지 않으면 루프에서 25를 제거합니다. <span class="inline">hp</span> 변하기 쉬운. 부모가 있는 모든 인스턴스가 확인될 때까지 이 작업이 반복됩니다.</p><div data-conref="../../../assets/snippets/Instance_creation_order_warning.hts"></div><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Language_Features.htm">언어 기능</a></div><div style="float:right"> 다음: <a href="return.htm"><span class="notranslate">return</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
with
-->
  <!-- TAGS
with
-->
</body>
</html>