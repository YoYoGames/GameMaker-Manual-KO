<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>for</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="for 함수를 설명하는 페이지" />
  <meta name="rh-index-keywords" content="for" />
  <meta name="search-keywords" content="for" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>for</h1><p> <a class="glossterm" data-glossterm="성명" href="#">명령문</a> (또는 명령문)을 여러 번 반복하는 데 가장 많이 사용되는 방법 중 하나는 다음을 사용하는 것입니다. <span class="inline">for</span> 루프는 다음과 같은 형식을 갖습니다.</p><p class="code">for (&lt;assignment&gt;; &lt;expression&gt;; &lt;operation&gt;;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p><p> 이것은 다음과 같이 작동합니다 - 먼저 변수에 값을 할당하는 할당이 실행된 다음 <a class="glossterm" data-glossterm="표현" href="#">표현식</a> 이 평가되고 만약 그렇다면<span class="inline">true</span>, 중괄호{} 안의 문이 실행됩니다. 다음으로 할당된 변수에 대해 연산이 수행되고 표현식이 다시 평가됩니다. 이 루프는 다음 표현식이 발견될 때까지 계속됩니다.<span class="inline">false</span>.</p><p> 이렇게 작성하면 복잡하게 들릴 수 있지만 다음과 같이 해석해야 합니다.</p><ol><li> 첫 번째 할당은 for 루프를 초기화합니다.</li><li> 표현식은 루프를 종료해야 하는지 여부를 테스트합니다.</li><li> 진술이 수행된다</li><li> 작업이 수행됩니다</li><li> 2단계로 돌아가서 표현식을 다시 수행하고 루프를 계속하거나 종료합니다.</li></ol><p> 이것은 다른 방식으로 여러 줄의 코드를 포함하는 반복적인 작업을 수행하는 데 매우 유용하며 일반적으로 배열 평가, 항목 그리기, 증분 값 설정 등을 위한 카운터로 사용됩니다. 다음 코드 예제는 일반적인 사용을 보여줍니다. 이 유형의 명령문에 대해:</p><p class="code">for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        draw_text(32, 32 + (i * 32), string(i) + &quot;. &quot;+ string(scr[i]));<br />
    }</p><p> 위의 코드는 a를 초기화합니다. <span class="inline">for</span> 루프, 0에서 시작하여 9까지 계산(및 포함)한 다음 루프 값을 사용합니다. <span class="inline">i</span> 배열에 저장된 값을 화면 아래로 그립니다. 방법을 참고하십시오 <span class="inline">for</span> 루프 변수 <span class="inline">i</span> 배열을 순환할 뿐만 아니라 숫자를 그리고 <span data-keyref="GameMaker Name">GameMaker</span> 에게 방에서 값을 그릴 위치를 알려주는 데 사용됩니다. 이러한 유연성은 다음과 같은 주요 이유 중 하나입니다. <span class="inline">for</span> 루프는 프로그래밍에서 매우 중요합니다.</p><p> <strong>언제 사용해야합니까 <span class="inline">for</span> 고리?</strong> 현재 실행 중인 <a class="glossterm" data-glossterm="반복" href="#">반복</a> 을 추적하고 해당 반복 값을 사용하면서 하나 이상의 명령문에 대해 고정된 수의 반복을 수행해야 할 때마다.</p><p class="note"> <b>참고</b>: 다른 사람들과 함께 작업할 때 변수 &quot;<span class="inline">i</span> &quot; 그리고 &quot;<span class="inline">j</span> &quot; 루프 카운터 변수에 사용 중입니다. 이것은 필수 변수 이름이 <b>아니며</b> &quot;<span class="inline">a</span> &quot; 또는 &quot;<span class="inline">foo</span> &quot; 또는 무엇이든. &quot;의 사용<span class="inline">i</span> &quot; 그리고 &quot;<span class="inline">j</span> &quot;는 단순히 프로그래밍의 표준 규칙입니다.</p><p> 특별한 기능을 사용할 수 있다는 점은 주목할 가치가 있습니다. <span class="inline"><a href="break.htm">break</a></span> 그리고 <span class="inline"><a href="continue.htm">continue</a></span> 내의 진술 <span class="inline">for</span> 루프도. 사용 <span class="inline">break</span> 루프를 즉시 종료하고 루프가 완료된 후 이벤트 또는 함수에 있는 코드로 이동합니다. 예:</p><p class="code">var _inst = noone;<br />
    for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        _inst = instance_find(obj_Enemy_Parent, i);<br />
        if (instance_exists(_inst))<br />
        {<br />
            if (_inst.object_index == obj_Enemy_Melee)<br />
            {<br />
                break;<br />
            }<br />
        }<br />
    }<br />
    target = _inst;</p><p> 위의 코드는 주어진 &quot;부모&quot; 개체의 가장 가까운 10개의 인스턴스를 반복하며, 인스턴스가 발견되면 인스턴스 개체 ID를 확인하고 다음의 인스턴스인지 확인합니다. <span class="inline">obj_Enemy_Melee</span> 그런 다음 루프는 다음을 사용하여 종료됩니다. <span class="inline">break</span> 및 변수에 할당된 ID 값(인스턴스가 발견되지 않으면 키워드 <span class="inline"><a href="../Instance_Keywords.htm">noone</a></span> 변수에 추가됩니다.)</p><p> 사용 예 <span class="inline">continue</span> 안에 <span class="inline">for</span> 루프는 다음과 같습니다.</p><p class="code">var _val = 0;<br />
    for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        if (val_array[i] &lt;= 0)<br />
        {<br />
            continue;<br />
        }<br />
        _val += val_array[i];<br />
    }<br />
    draw_text(32, 32, &quot;Positive Values Total = &quot; + string(_val));</p><p> 이 코드는 길이가 10인 1D <a href="../Arrays.htm">배열</a> 의 각 배열 위치에 저장된 값을 확인하고 0보다 작거나 같은 경우 <span class="inline">continue</span> 현재 반복이 종료된다는 의미의 루프, <span class="inline">i</span> 증가하고 다음 루프 반복이 시작됩니다. 값이 0보다 크면 로컬 변수에 추가됩니다. <span class="inline">_val</span>, 루프가 완료된 후 총 값이 화면에 그려집니다.</p><p> 루프 키워드의 더 많은 예는 섹션을 참조하십시오.<a href="repeat.htm"><span class="inline">repeat</span></a>,<a href="while.htm"><span class="inline">while</span></a>, 그리고<a href="do___until.htm"><span class="inline">do / until</span></a>. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Language_Features.htm">언어 기능</a></div><div style="float:right"> 다음: <a href="switch.htm"><span class="notranslate">switch</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
for
-->
  <!-- TAGS
for
-->
</body>
</html>