<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>while</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="while 함수를 설명하는 페이지" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>while</h1><p> GameMaker Language에는 <i>루프</i> 를 수행할 수 있는 여러 가지 방법이 있습니다. 가장 중요한 것 중 하나는 <span class="inline">while</span> 고리. 이 루프 함수의 형식은 다음과 같습니다.</p><p class="code">while (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p><p> 여기에 <a class="glossterm" data-glossterm="표현" href="#">표현식</a> 평가 결과에 따라 계속해서 반복되는 <a class="glossterm" data-glossterm="성명" href="#">문</a> 이 있습니다. <span class="inline">while</span> 표현식이 다음으로 평가되는 한 루프 <span class="inline">true</span>, 명령문(중괄호가 있는 여러 명령문의 코드 블록일 수도 있습니다. <span class="inline">{}</span> )가 실행됩니다. 아래에서 &quot;while&quot;을 사용하는 일반적인 방법의 예를 찾을 수 있습니다.</p><p class="code">while (place_meeting(x, y, obj_Wall))<br />
    {<br />
        x -= 1;<br />
    }</p><p> 위의 코드는 호출 인스턴스와 &quot;벽&quot; 인스턴스 간의 충돌을 확인하고 있으며 인스턴스가 더 이상 충돌하지 않을 때까지 하나가 발생하는 동안 인스턴스를 한 픽셀 왼쪽으로 이동하는 여러 <a class="glossterm" data-glossterm="반복" href="#">반복</a> 을 수행 <span class="glossextra">합니다</span>.</p><p> <strong>언제 사용해야합니까 <span class="inline">while</span> 고리?</strong> 하나 이상의 명령문을 반복하고 싶지만 실제로 몇 번을 반복해야 하는지 알지 못하거나 신경 쓰지 않을 때마다 사용해야 합니다. 초기 평가가 다음과 같은 경우 <span class="inline">false</span>, 명령문이 실행되지 않을 수도 있습니다.</p><p> 당신이 <strong>당신의 <span class="inline">while</span> 루프</strong>! <i>무한</i> 루프를 쉽게 만들 수 있습니다. 이 경우 게임이 중단되고 더 이상 사용자 입력에 반응하지 않으므로 강제 종료해야 합니다. 예를 들어:</p><p class="code">while (!place_free(x, y))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }</p><p> 이제 위의 코드가 제대로 작동할 수 있지만 인스턴스가 이동할 빈 위치를 찾을 수 없는 경우 무한 루프가 발생할 수 있으며 이로 인해 게임이 중단됩니다. 이런 종류의 가능성이 있는 위치에 있는 경우 다른 비차단 루프 종류를 사용하거나 표현식에 추가 변수 검사를 사용해야 합니다(여러 표현식을 <a href="../Expressions_And_Operators.htm"><span class="inline">and</span>(&amp;<span class="inline">&amp;</span> )</a>, <a href="../Expressions_And_Operators.htm"><span class="inline">or</span>(<span class="inline">||</span> )</a> 및 <a href="../Expressions_And_Operators.htm"><span class="inline">xor</span>(<span class="inline">^^</span> )</a> <a class="glossterm" data-glossterm="운영자" href="#">연산자</a> <span class="glossextra">s</span> ):</p><p class="code">var _check = 0;<br />
    while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        _check += 1;<br />
    }<br />
    if _check &gt;= 100<br />
    {<br />
        // code failed, so deal with it<br />
    }</p><p> 또는 다음을 사용할 수 있습니다. <span class="inline"><a href="break.htm">break</a></span> 예를 들어 다음 코드는 100개의 난수를 생성한 다음 계속됩니다. <span class="inline">while</span> 평가는 <em>항상</em> <span class="inline">true</span>:</p><p class="code">var i = 0;<br />
    while (true)<br />
    {<br />
        x[i] = random(room_width);<br />
        y[i] = random(room_height);<br />
        if ((i++) &gt;= 100)<br />
        {<br />
            break;<br />
        }<br />
    }</p><p> 다음에서 <a href="continue.htm"><span class="notranslate">continue</span></a> 문을 사용할 수도 있습니다. <span class="inline">while</span> 고리. 이것을 사용하면 현재 루프 반복이 종료되고 새 반복에서 루프가 다시 시작됩니다. 예를 들면 다음과 같습니다.</p><p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;);<br />
    var _num = 0;<br />
    while (!file_text_eof(file))<br />
    {<br />
        var _s = file_text_readln(file);<br />
    <br />
        if (_s == &quot;&quot;)<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        str[num++] = _s;<br />
    }<br />
    <br />
    file_text_close(file);
  </p><p> 위의 이 코드는 파일을 열고 파일 내용의 끝에 도달할 때까지 루프 반복마다 파일에서 한 줄을 읽습니다. 읽고 있는 줄이 빈 문자열이면 현재 루프 반복은 다음을 사용하여 종료됩니다. <span class="inline">continue</span> 문과 새 반복이 시작됩니다. 그렇지 않으면 문자열이 배열에 추가되고 <a href="../Arrays.htm">배열</a> 위치가 증가합니다.</p><p> 루프 기능의 더 많은 예는 섹션을 참조하십시오.<a href="repeat.htm"><span class="inline">repeat</span></a>,<a href="do___until.htm"><span class="inline">do... until</span></a>, 그리고<a href="for.htm"><span class="inline">for</span></a>. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Language_Features.htm">언어 기능</a></div><div style="float:right"> 다음: ~ <a href="do___until.htm"><span class="notranslate">do / until</span></a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->
</body>
</html>