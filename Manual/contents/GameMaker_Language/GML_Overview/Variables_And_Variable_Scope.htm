<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>변수 및 변수 범위</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="페이지 개요 변수 및 GML의 범위" />
  <meta name="rh-index-keywords" content="변수 및 변수 범위" />
  <meta name="search-keywords" content="변수,범위,지역 변수,인스턴스 변수,전역 변수" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 변수 및 변수 범위</h1><p> 다른 프로그래밍 언어와 마찬가지로 <b>GML</b> 은 대부분의 프로그래밍 작업에서 기본 단위로 <i>변수</i> 를 사용합니다. 변수는 나중에(또는 즉시) 사용할 수 있도록 장치 메모리에 정보를 저장하는 데 사용되며 런타임 및 스크립트 기능에서 참조할 수 있도록 이름이 지정됩니다. <b>GML</b> 의 변수는 실수(예: 100, 2.456575, -56 등...), 문자열(예: &quot;Hello world!&quot;), 정수(예: 1, 556)와 같은 다양한 <a href="Data_Types.htm"><strong>데이터 유형</strong></a> 을 저장할 수 있습니다., -7) 또는 부울(<span class="inline">true</span> 또는 <span class="inline">false</span> ) 및 기타 사항:</p><p class="code">var _num = 126.4545;<br />
    var _str = &quot;Hello World&quot;;<br />
    new_num = _num * 100;<br />
    global.my_string = _str + &quot; I said&quot;;</p><p> 변수를 사용하여 함수에서 반환된 값을 저장할 수도 있습니다. 예를 들면 다음과 같습니다.</p><p class="code">var _id = instance_nearest(x, y, obj_Tree);<br />
    root = sqrt(1000);<br />
    global.str = string_upper(&quot;Hello World&quot;);</p><p> 따라서 변수는 이름을 지정하고 나중에 하나 이상의 작업에서 사용할 값을 저장하는 데 사용할 수 있는 것입니다. 변수의 훌륭한 &quot;실제&quot; 예는 <b>pi 𝜋</b>... 모두가 알고 있는 변수이며 3.14159265(etc...) 값을 보유합니다. 왜 우리 언어로 되어 있습니까? 글쎄요, 누군가에게 &quot;3점 하나 넷 하나 다섯 아홉 둘 여섯 다섯&quot;보다 &quot;파이&quot;라고 말하는 것이 훨씬 쉽습니다! 이와 같은 이름을 지정하면 삶이 훨씬 단순해지며 해당 변수의 값이 변경되더라도 변수 <i>이름</i> 이 여전히 동일하기 때문에 모든 곳에서 숫자를 변경할 필요가 없다는 의미이기도 합니다.</p><p> <b>GML</b> 에서 변수를 구성할 때 이름은 문자 또는 밑줄 기호 &quot;_&quot;로 시작해야 하며 문자, 숫자 및 밑줄 기호 &#39;_&#39;만 포함할 수 있으며 최대 길이는 64개입니다. 따라서 유효한 변수는 다음과 같습니다. <span class="inline">fish</span>, <span class="inline">foo_bar</span>, <span class="inline">num1</span>, 또는 <span class="inline">_str</span>, 유효하지 않은 변수는 <span class="inline">6fish</span>, <span class="inline">foo bar</span>, 또는 <span class="inline">*num</span>.</p><p> 이제 많은 프로그래밍 언어에서 사용하기 전에 변수 &quot;할당&quot;을 만들어야 합니다. 이것은 기본적으로 변수에 사용할 이름을 컴퓨터에 말하고 초기 값을 할당한다는 것을 의미합니다. 그런 다음 변수는 값을 저장하거나 이에 대한 작업을 수행하기 위해 메모리에 위치가 제공됩니다. 변수 할당은 다음과 같은 형식을 취합니다.</p><p class="code">&lt;variable&gt; = &lt;expression&gt;;</p><p> 표현식은 단순한 값일 수 있지만 더 복잡할 수도 있으므로 변수에 값을 할당하는 대신 다음을 사용하여 변수의 현재 값에 값을 추가할 수도 있습니다. <span class="inline"><b>+=</b></span>, 예를 들어:</p><p class="code">a = 100;   // Assigning a simple value<br />
    b = 200;<br />
    c = 300;<br />
    a += b;    // Assigning with operation<br />
    a = b + c; // Assigning with expression</p><p class="note"> <span class="note">참고</span> GameMaker 언어는 &quot;<span class="inline">:=</span> &quot; 할당의 경우 일반적으로 가장 일반적인 방법은 아닙니다.</p><p class="code">&lt;variable&gt; := &lt;expression&gt;;</p><p> 마찬가지로 다음을 사용하여 뺄 수 있습니다. <span class="inline"><b>-=</b></span>, 다음을 사용하여 곱하기 <span class="inline"><b>*=</b></span>, 나누기 <span class="inline"><b>/=</b></span>, 또는 다음을 사용하여 비트 연산자를 사용합니다. <span class="inline"><b>|=</b></span>, <span class="inline"><b>&amp;=</b></span>, 또는 <span class="inline"><b>^=</b></span>. 다음을 사용하여 값에서 <i>하나</i> 를 더하거나 뺄 수도 있습니다. <span class="inline"><b>++</b></span>, <span class="inline"><b>--</b></span>. 자세한 내용은 <a href="Expressions_And_Operators.htm">표현식 및 연산자</a> 섹션을 참조하십시오.</p><p> 다음(또는 변형)을 수행할 <i>수 없습니다</i>.</p><p class="code">a = b = c = 4;</p><p> 대신 다음과 같이 수행해야 합니다.</p><p class="code">a = 4;<br />
    b = 4;<br />
    c = 4;</p><p> 위에 표시된 변수 할당은 모두 <strong>인스턴스</strong> 변수이지만 실제로 <span data-keyref="GameMaker Name">GameMaker</span> 로 프로그래밍할 때 세 가지 다른 주요 변수 범주가 있으며 각각 고유한 <strong>범위</strong> (작동 영역 또는 도달 범위로 간주될 수 있음)가 있습니다. 다양한 종류의 변수와 해당 범위는 모두 다음 페이지에 요약되어 있습니다.</p><ul class="colour"><li> <a href="Variables/Local_Variables.htm">지역 변수</a></li><li> <a href="Variables/Instance_Variables.htm">인스턴스 변수</a></li><li> <a href="Variables/Global_Variables.htm">전역 변수</a></li><li> <a href="Variables/Constants.htm">상수</a></li></ul><p> GameMaker Language에는 위에서 언급한 범위 중 하나를 가질 수 있는 여러 내장 변수가 있습니다( <i>local</i> 제외). 이러한 변수는 기본적으로 게임 세계의 개체 및 방의 일부로 포함되기 때문에 특별합니다. 일부 내장 전역 변수는 위에서 언급한 섹션에 나열되어 있으며 스프라이트, 방, 개체 등에 대한 매뉴얼의 다른 부분도 각 경우에 사용할 수 있는 내장 변수에 대해 설명합니다. 이러한 내장 인스턴스 변수의 예는 다음과 같습니다.</p><ul class="colour"><li><span class="inline"><a href="../GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm">sprite_index</a></span></li><li> <a href="../GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm"><span class="inline">path_scale</span></a></li><li> <a href="../GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm"><span class="inline">speed</span></a></li></ul><p> 내장 전역 변수의 예는 다음과 같습니다.</p><ul class="colour"><li> <a href="../GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm"><span class="inline">view_xport</span></a></li><li><a href="../GML_Reference/OS_And_Compiler/GM_version.htm"><span class="inline">GM_version</span></a></li><li><a href="../GML_Reference/Asset_Management/Rooms/room.htm"><span class="inline">room</span></a></li></ul><p> 대부분의 내장 변수는 다른 변수처럼 변경 및 설정될 수 있으며 일부는 <a href="Arrays.htm">배열</a> 일 수도 있습니다. 단지 기본값으로 초기화되기 때문에 일반 변수처럼 생성하도록 설정할 필요가 없습니다.</p><p> 마지막으로 어떤 식으로든 변수를 설정, 가져오기 또는 확인하는 데 사용되는 여러 함수가 있으며 다음 페이지에서 사용할 수 있습니다.</p><ul class="colour"><li> <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">변수 함수</a> </li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="GML_Overview.htm">GML 개요</a></div><div style="float:right"> 다음: <a data-xref="{title}" href="Data_Types.htm">데이터 유형</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
variables
variables - built-in
variables - scope
declaring variables
scope
built-in variables
-->
  <!-- TAGS
variables
-->
</body>
</html>