<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>표현식 및 연산자</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="다양한 GML 표현식을 설명하는 페이지" />
  <meta name="rh-index-keywords" content="표현식 및 연산자,=,&amp;&amp;,||,^^,&lt;,&gt;,&lt;=,&gt;=,==,!=,|,&amp;,^,&lt;&lt;,&gt;&gt;,+,-,*,/,++,--,div,%,mod,!,~" />
  <meta name="search-keywords" content="표현,작동 순서,연산자,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,&lt;&lt;,&gt;&gt;,&lt;=,&gt;=,==,=,:=,$" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 표현식 및 연산자</h1><h2> 식</h2><p> 표현식은 일반 숫자, 변수, 문자열 또는 함수와 하나 이상의 <strong>연산자</strong> (예: 더하기, 빼기, 곱하기 등)를 포함할 수 있는 수학 구입니다. 표현식에 사용된 값은 실수일 수 있습니다(예: <span class="inline">3.4 * 6</span> ), a로 시작하는 16진수 <span class="inline">$</span> 기호(예: <span class="inline"><span class="notranslate">$00FFAA</span> | <span class="notranslate">$88FFAA</span> ), 큰따옴표 사이의 문자열(예: <span class="inline">&quot;hello&quot;</span> + <span class="inline">&quot;world&quot;</span> ) 또는 여러 연산자와 값을 사용하는 더 복잡한 표현식.</p><h2> 연산자</h2><p> 표현식과 함께 사용하기 위해 다음 연산자가 제공됩니다.</p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">할당(=)</a></p><div class="droptext" data-targetname="drop-down2"><p class="dropspot"> <span class="inline">true><b>=</b></span> 는 변수에 값을 할당하는 데 사용됩니다. 이것은 <span data-keyref="GameMaker Name">GameMaker</span> 에서 변수를 비교하는 데 <i>에도</i> 사용할 수 있으며 예제 및 다른 사람 코드에서 볼 수 있습니다. 그러나 이것은 이전 <i>GameMaker</i> 버전의 유산이며 다음 예와 같이 비교에는 <b>==</b> 연산자를 사용하고 할당에는 <b>=</b> 를 사용해야 합니다.</p><p class="code">a = 12;<br />
      speed = 5;<br />
      val = (old_val + 5);</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">결합(&amp;&amp;, ||, ^^)</a></p><div class="droptext" data-targetname="drop-down3"><p class="dropspot"> <b><span class="inline">true>&amp;&amp;</span>, <span class="inline">false>||</span>, <span class="inline">++a>^^</span> ( <span class="inline">a++>및</span>, <span class="inline">!true == false>또는</span> 및 <span class="inline">()>xor</span> )</b> 는 부울 값을 결합하여 true 또는 false를 제공하는 데 사용됩니다. 다음 예 중 하나라도 해결되면 <span class="inline">()</span> 그런 다음 코드가 실행됩니다.</p><p class="code">if (a == b &amp;&amp; c == d) { do something... }  // and<br />
      if (a == b || c == d) { do something... }   // or<br />
      if (a == b ^^ c == d) { do something... }  // xor</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">무효(??, ??=)</a></p><div class="droptext" data-targetname="drop-down11"><p class="note"> <span class="note">참고</span> &quot;Nullish&quot;는 단순히 <span class="inline2">undefined</span> 또는 <span class="inline2">pointer_null</span> 과 같은 값을 나타냅니다.</p><p class="dropspot"> <span class="inline2">??</span> 주어진 값이 <span class="inline2">정의되지 않았</span> 거나 <span class="inline2">pointer_null</span> 인 경우 지정된 표현식을 반환하는 nullish 병합 연산자입니다. 이 연산자는 다음 구문을 예상합니다.</p><p class="code_plain"> (입력 ?? null_출력)</p><p class="dropspot"> <span class="inline2">입력</span> 이 <span class="inline2">정의되지 않았</span> 거나 <span class="inline2">pointer_null</span> 인 경우 표현식은 <span class="inline2">null_output</span> 값을 반환합니다. 그러나 다른 모든 경우에는 단순히 <span class="inline2">입력</span> 값을 반환합니다. 변수 자체가 유효한 값을 보유하지 않는 경우 변수에 대한 &quot;기본&quot; 값을 정의하는 데 사용할 수 있습니다.</p><p class="dropspot"> 다음 예를 고려하십시오.</p><p class="code_plain"> 사용자 이름 = 데이터.사용자 이름 ?? &quot;잘못된 사용자 이름&quot;;</p><p class="dropspot"> 여기에서 <span class="inline2">사용자 이름</span> 변수는 <span class="inline2">data.username</span> 에 저장된 값을 가져오지만 <span class="inline2">data.username</span> 이 <span class="inline2">정의되지</span> 않거나 <span class="inline2">pointer_null</span> 인 경우 변수는 대신 <span class="inline2">&quot;INVALID USERNAME&quot;</span> 문자열을 가져옵니다. 이 예제는 <span class="inline2">사용자 이름</span> 변수를 사용하는 함수 호출이 null 값으로 인해 오류를 일으키지 않도록 하고 사용자 이름이 반환되지 않은 때를 사용자가 알 수 있도록 합니다.</p><p class="note"> <span class="note">참고</span> nullish 병합 연산자의 오른쪽에 있는 표현식은 입력 값이 null인 경우에만 실행됩니다. 즉, RHS 표현식에 포함된 모든 함수 호출은 입력 값이 null인 경우에만 실행됩니다.</p><hr /><p class="dropspot"> <span class="inline2">??=</span> 는 위에서 설명한 nullish 병합 연산자와 유사하지만 특히 변수 할당에 사용됩니다. 이 연산자는 다음 구문을 예상합니다.</p><p class="code">variable ??= null_value</p><p class="dropspot"> <span class="inline2">변수</span> 가 <span class="inline2">정의되지 않았</span> 거나 <span class="inline2">pointer_null</span> 이면 <span class="inline2">null_value</span> 값이 할당됩니다. 그렇지 않으면 변수가 변경되지 않은 상태로 유지됩니다. 이것은 null 값을 보유할 때 변수에 사용자 정의 &quot;기본&quot; 값을 할당하는 데 사용할 수 있습니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">비교(&lt;, &lt;=, ==,!=, &gt;, &gt;=)</a></p><div class="droptext" data-targetname="drop-down4"><p class="dropspot"> <b><span class="inline2">&lt;</span>, <span class="inline2">&lt;=</span>, <span class="inline2">==</span>, <span class="inline2">!=</span>, <span class="inline2">&gt;</span>, <span class="inline2">&gt;=</span></b> 는 비교이며<span class="inline"></span> 또는<span class="inline"></span> 결과(여기서 true는 1로 해석될 수 있고 false는 0으로 해석될 수 있음). 사용 예:</p><p class="code">if (a &lt; b) {do something...}<br />
      if (a != b) {do something...}</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">비트 단위(|, &amp;, ^, &lt;&lt;, &gt;&gt;)</a></p><div class="droptext" data-targetname="drop-down5"><p class="dropspot"> <b><span class="inline2">|</span>, <span class="inline2">&amp;</span>, <span class="inline2">^</span>, <span class="inline2">&lt;&lt;</span>, <span class="inline2">&gt;&gt;</span></b> 는 비트 연산을 수행하는 데 사용됩니다. 여기서 | = 비트 또는 &amp; = 비트 및 ^ = 비트 xor, &lt;&lt; = 왼쪽으로 시프트, &gt;&gt; = 오른쪽으로 시프트. 사용 예:</p><p class="code">x = (x &amp; $ffffffe0) + 32;<br />
      if (y ^ $1f) &gt; 0 {do something...};</p><p class="dropspot"> 비트 연산자를 사용하는 방법과 비트 연산자가 수행하는 작업에 대한 추가 정보는 비트 <a href="../../Additional_Information/Bitwise_Operators.htm">연산자</a> 섹션에서 찾을 수 있습니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">산술(+, -, *, /)</a></p><div class="droptext" data-targetname="drop-down6"><p class="dropspot"> <b><span class="inline2">+</span>, <span class="inline2">-</span>, <span class="inline2">*</span>, <span class="inline2">/</span></b> 는 각각 더하기, 빼기, 곱하기, 나누기입니다. 사용 예:</p><p class="code">c = a * b;<br />
      str = a + &quot;world&quot;;</p><p class="note"> <span class="note"><b>참고</b></span> 부동 소수점 숫자는 답으로 무한대를 얻으므로 0으로 나누기에서 멈추지 않습니다. A와 B가 정수(int32 또는 int64)이면 나누기는 정수로 수행됩니다(0으로 나누기는 확인되고 오류가 발생합니다. 그렇지 않으면 부동 소수점 나누기로 수행됩니다(0으로 나누기 없음 확인) ).</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">증가/감소(++, --)</a></p><div class="droptext" data-targetname="drop-down7"><p class="dropspot"> <span class="inline2"><strong>++</strong></span>, <span class="inline2"><strong>--</strong></span> 는 값에서 하나( <span class="inline2">1</span> )를 더하거나 빼는 데 사용됩니다. 더하거나 빼려는 값 앞이나 뒤에 이것을 배치하면 결과가 약간 다를 수 있다는 점에 유의할 가치가 있습니다. 예를 들어:</p><ul class="dropspotlist"><li class="dropspot"><span class="inline"></span> 변수를 증가시키고 증가된 값을 반환합니다.</li><li class="dropspot"><span class="inline"></span> 변수를 증가시키지만 증가되기 전의 값을 반환합니다.</li></ul><p class="dropspot"> 따라서 다음과 같은 경우:</p><p class="code">var a = 1;<br />
      show_debug_message(string(a++));<br />
      show_debug_message(string(++a));</p><p class="dropspot"> 디버그 출력은 1과 3입니다. 다음은 몇 가지 사용 예입니다.</p><p class="code">for (var i = 0; i &lt; 10; i++;)<br />
      {<br />
          do something...<br />
      }</p><p class="code">if (hit == true)<br />
      {<br />
          --score;<br />
      }</p><p class="note"> <strong>참고</strong>: YoYo 컴파일러 대상 플랫폼((YYC)으로 표시된)에서 이러한 표현식은 왼쪽에서 오른쪽으로 평가되는 반면 다른 모든 대상 플랫폼에서는 오른쪽에서 왼쪽으로 평가됩니다. 즉, 다음을 의미합니다.</p><p class="code">val = max(num, ++num, num++);</p><p class="note"> 플랫폼에 따라 다른 결과를 제공합니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">나눗셈과 모듈로(div, %, mod)</a></p><div class="droptext" data-targetname="drop-down8"><p class="dropspot"> <strong><span class="inline2">div</span>, <span class="inline2">mod</span> ( <span class="inline2">%</span> )</strong> 는 나눗셈과 모듈로입니다. 여기서 div는 값을 정수 몫만 생성하도록 나눌 수 있는 양을 제공하는 반면 mod는 나눗셈의 나머지만 제공합니다. 정수 값을 사용하여 div 또는 mod만 사용할 수 있습니다. 사용 예:</p><p class="code">secs = time mod 60;<br />
      time_str = string(time div 60);</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">단항(!, -, ~)</a></p><div class="droptext" data-targetname="drop-down9"><p class="dropspot"> 다음 <strong>단항</strong> 연산자가 제공됩니다.</p><ul class="dropspotlist"><li class="dropspot"> <span class="inline2"><strong>!</strong></span>: 부울 &quot;not&quot;, 그래서<span class="inline"></span></li><li class="dropspot"> <span class="inline2"><strong>-</strong></span>: 다음 실수 또는 정수 값을 무효화합니다(문자열 또는 부울에는 유효하지 않음)</li><li class="dropspot"> <span class="inline2"><strong>~</strong></span>: 다음 값을 비트 단위로 부정</li></ul><p class="dropspot"></p></div><h2> 식 그룹화</h2><p><i></i> 모든 표현식의 값으로 숫자, 변수 또는 값을 반환하는 함수를 사용할 수 있으며 하위 표현식도 대괄호 사이에 둘 수 있습니다. 모든 연산자는 실수 값에 대해 작동하지만 <em>비교</em> 는 문자열에도 작동하며 &quot; <strong>+</strong> &quot; 연산자를 사용하여 문자열을 연결할 수 있습니다.</p><p> 단일 표현식에서 여러 연산을 수행할 때 대괄호를 사용하는 것이 <b>매우 중요</b> 합니다.<span class="inline"></span> 이러한 방식으로 명시적으로 언급되지 않은 경우 다른 플랫폼에서 다르게 수행할 수 있으므로 작동 순서를 분리합니다. 예를 들어 다음 코드를 고려하십시오.</p><p class="code">a = b == c || d;</p><p> 다른 대상 컴파일러는 명시적으로 표시되지 않기 때문에 다른 순서로 작업을 수행하므로 게임을 할 때 예상하지 못한 &quot;이상한&quot; 결과가 발생할 수 있습니다. 이것을 피하려면 다음을 사용하십시오.<span class="inline"></span> 다음과 같이 부품을 분리합니다.</p><p class="code">a = (b == c || d);   //better<br />
    a = ((b == c) || d); //best</p><h2> 명령문 그룹화</h2><p> 하나의 코드 블록에서 다양한 연산과 표현식을 사용할 때 이들 역시 분리되어야 합니다. 예를 들어 다음은 유효한 코드처럼 <em>보입니다</em>.</p><p class="code">if my_var == your_var ++their_var;</p><p> 그러나 컴파일러는 이를 다음 두 가지 방법 중 하나로 해석할 수 있습니다.</p><p class="code">if my_var == your_var<strong>++</strong> then their_var;<br />
    <br />
    // or<br />
    <br />
    if my_var == your_var then <strong>++</strong>their_var;
  </p><p> 이제 코드를 보면 그 중 하나가 약간 멍청하다는 것을 알 수 있습니다. 하지만 그것은 우리가 달성하고자 하는 것과 일어나기를 원하는 것을 알고 있지만 컴파일러는 그렇지 않기 때문입니다. ++ 연산자가 있는 두 개의 변수만 볼 수 있으므로 적용할 변수를 선택해야 합니다. 따라서 <strong>항상 명시적으로 식, 연산 및 문을 대괄호로 묶어야 합니다</strong>. 위 코드의 올바른 버전은 다음과 같아야 합니다.</p><p class="code">if (my_var == your_var)<br />
    {<br />
        ++their_var;<br />
    }</p><p> 이것은 더 장황하게 보일 수 있지만 수행되는 작업에 대한 모호성은 없으며 모든 플랫폼에서 일관되게 컴파일 및 작동합니다. 또한 현재로서는 대괄호를 사용하지 않고 표현식과 명령문을 연결할 수 있지만 이는 레거시 기능이며 앞으로 더 이상 사용되지 않고 GML에서 제거될 수 있으므로 이제 대괄호를 적절하게 사용하면 코드가 &quot;미래에 대비할 수 있습니다.&quot; 어쨌든 일반적으로 좋은 습관입니다).</p><p> 다음은 다양한 표현의 최종 예입니다.</p><p class="code">{<br />
        x = 23 div 2;<br />
        colour = $FFAA00 + $00BB12;<br />
        str = &quot;hello&quot; + &quot;world&quot;;<br />
        y += 5;<br />
        x *= y;<br />
        x = y &lt;&lt; 2;<br />
        x = 23 * ((2 + 4) / sin(y));<br />
        b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br />
    }</p><p> 마지막으로 주목해야 할 것은 특정 <a href="../GML_Reference/Data_Structures/Data_Structures.htm">데이터 구조</a> 및 <a href="Arrays.htm">배열</a> 과 함께 사용하기 위한 <b>접근</b> 자라고 하는 표현 &quot;단축키&quot;도 있다는 것입니다. 이를 통해 함수 호출을 사용하지 않고도 이러한 형식 내에서 데이터를 빠르고 쉽게 추가하거나 교체할 수 있습니다. 자세한 내용은 다음 페이지를 참조하십시오.</p><ul class="colour"><li> <a href="Accessors.htm">접근자</a> </li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="GML_Overview.htm">GML 개요</a></div><div style="float:right"> 다음: <a data-xref="{title}" href="Script_Functions.htm">스크립트 함수 및 변수</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
??
??=
-->
  <!-- TAGS
expressions_operators
-->
</body>
</html>