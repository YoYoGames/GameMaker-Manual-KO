<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>파일 시스템</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="컴파일된 게임에서 GMS 파일 시스템이 작동하는 방식을 설명하는 페이지" />
  <meta name="rh-index-keywords" content="파일 시스템" />
  <meta name="search-keywords" content="파일 시스템,모래 상자,샌드박싱,작업 디렉토리,로컬 스토리지" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 파일 시스템</h1><p> <span data-keyref="GameMaker Name">GameMaker</span> 와 함께 <a href="../GameMaker_Language/GML_Reference/File_Handling/File_Handling.htm">파일 시스템 기능</a> 또는 <a href="../Settings/Included_Files.htm">포함된 파일</a> 을 사용할 때 파일 시스템이 어떻게 작동하고 뒤에서 무슨 일이 일어나고 있는지 정확히 아는 것이 매우 중요합니다. 이를 위해 이 섹션은 사물이 <em>어떻게</em> 저장되고 <em>어디에</em> 저장되며 이 시스템에 어떤 제한이나 해결 방법이 있을 수 있는지 정확히 설명하고 명확히 하기 위해 고안되었습니다.</p><p> 파일 기능에 대해 주목해야 할 가장 중요한 첫 번째 사항은 일반적으로 기본적으로 <strong>샌드박스</strong> 로 제한된다는 것입니다. 이것이 의미하는 바는 <span data-keyref="GameMaker Name">GameMaker</span> 가 사용자의 <em>명시적인</em> 입력 없이는 <strong>게임 번들의 일부 또는 장치의 로컬 저장소가 아닌 곳에서 파일을 저장하거나 로드할 수 없으며</strong> 이 입력은 Windows, macOS 및 Ubuntu( Linux) 대상 플랫폼.</p><p class="note"> <strong>중요한!</strong> 그러나 대상 플랫폼의 <a href="../Settings/Game_Options.htm">게임 옵션</a> 에서 <strong>파일 시스템 샌드박스 비활성화</strong> 옵션을 선택하여 데스크톱 대상(Windows, macOS 및 Ubuntu(Linux))에서 샌드박싱을 끌 수 있습니다. 이 작업은 자신의 책임하에 수행하며, 이렇게 하면 파일 저장 및 로드가 시작되고 지정된 시스템의 어디에서나 파일에 액세스할 수 있지만 여전히 OS 권한에 의해 제한될 수 있으며 <a href="../GameMaker_Language/GML_Reference/File_Handling/File_Directories/program_directory.htm"><span style="font-size:1px;"><span class="inline">working_directorystyle="font-size: 14px">program_directory</span></span></a> 폴더.</p><p> 샌드박스를 이해하려면 먼저 파일에 대해 두 가지 별개의 영역이 있음을 이해해야 합니다.</p><ul class="colour"><li> <strong>파일 번들</strong> - <span data-keyref="GameMaker Name">GameMaker</span> IDE에서 <strong>포함된 파일</strong> 자산 목록에 추가한 파일(게임과 함께 패키징하려는 외부 파일 포함)을 포함하여 실행 가능한 게임과 함께 패키징된 모든 파일이 저장되는 곳입니다. ).</li><li> <strong>저장 영역</strong> - 이것은 게임에서 안전하게 쓸 수 있는 장치 저장 영역이며 게임은 이것이 쓰기 가능 영역임을 보장합니다.</li></ul><p> 다음 다이어그램은 이를 더 잘 시각화하는 데 도움이 될 수 있습니다.</p><p><img alt="File System Save Areas" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Files_SaveAreas.png" /></p><p class="note"> <strong>참고</strong>: 파일 번들(프로그램) 디렉토리에는 절대 쓸 수 없습니다.</p><p> 게임이 샌드박스 처리되면 두 개의 대상 영역인 번들 디렉터리와 로컬 저장소 영역을 각 대상 플랫폼에서 사용할 수 있지만 각 대상 플랫폼에서는 약간 다르게 작동합니다. 그러나 <span data-keyref="GameMaker Name">GameMaker</span> 는 할 수 있는 것과 할 수 없는 것의 주요 본질을 추상화하여 게임을 여러 환경으로 쉽게 재지정할 수 있도록 했습니다.</p><p> 우선, 우리가 이야기할 때의 의미를 이해해야 합니다. <a href="../GameMaker_Language/GML_Reference/File_Handling/File_Directories/working_directory.htm"><span class="inline">directory_create()</span></a>. 이것은 두 개의 가능한 저장 위치에 대한 동의어이며(위의 다이어그램에 나와 있음) 해당 디렉토리를 사용할 때 읽고 쓰는 중인지, 읽고 있는 파일이 저장되었는지 여부에 따라 두 가지 중 하나를 수행합니다. 변경 여부:</p><ul class="colour"><li> <strong>읽기 작업</strong> - working_directory는 먼저 저장 영역을 확인하여 액세스 중인 파일이 있는지, 그리고 사용하는지 확인합니다. 그러나 파일이 저장 영역에 없으면 파일 번들 영역을 확인하고 사용합니다(찾고 있는 파일이 게임에 포함된 파일인 경우).</li><li> <strong>쓰기 작업</strong> - 이것은 저장 영역에서만 발생할 수 있습니다.</li></ul><p class="note"> <strong>참고</strong>: 일반적으로 <span data-keyref="GameMaker Name">GameMaker</span> 는 이 모든 것을 처리 <span class="inline">INIstyle="font-size: 14px">하며</span> 내장 변수를 사용할 필요가 <strong>거의</strong> 없습니다.</p><p> 이 두 가지 간단한 규칙을 사용하여 이제 다음 기능이 어떻게 작동하는지 볼 수 있습니다(이것은 사용 가능한 다양한 기능에 대한 프로세스를 시각화하는 데 도움이 되는 예입니다).</p><ul class="colour"><li> <a href="../GameMaker_Language/GML_Reference/File_Handling/File_Directories/directory_create.htm"><span class="inline">get_open_filename()</span></a> (및 기타 디렉토리 기능)은 <strong>저장</strong> 영역에서만 작동합니다.</li><li> <a href="../GameMaker_Language/GML_Reference/File_Handling/File_System/File_System.htm">파일 시스템 기능</a> 은 <strong>번들</strong> 과 <strong>저장</strong> 영역 <em>모두</em> 에서 파일에 대한 정보를 반환하지만 <strong>저장</strong> 영역에만 <em>기록</em> 합니다.</li><li> 텍스트, 바이너리 또는<span class="inline">get_save_filename()</span> 파일이 아직 존재하지 않는 경우 저장 영역에 새 파일을 만들고 게임 번들에 포함된 원본 파일의 정보를 복사합니다. 원본 파일은 여전히 저장 디렉토리의 읽기 전용 부분에 남아 있지만 저장 영역의 읽기/쓰기 섹션에 버전이 존재하는 한 참조되지 않습니다.</li></ul><p> <strong>Windows</strong>, <strong>macOS</strong> 및 <strong>Ubuntu</strong> (Linux) 플랫폼에는 샌드박스 외부에서 파일을 저장하고 로드하는 두 가지 방법이 있습니다. <a href="../GameMaker_Language/GML_Reference/File_Handling/File_System/get_open_filename.htm"><span class="inline">buffer_load_async()</span></a> 그리고 <a href="../GameMaker_Language/GML_Reference/File_Handling/File_System/get_save_filename.htm"> <span class="inline">*.ini</span></a> (이 두 기능 모두 사용자가 로드 및 저장 영역을 선택해야 하며 반환 문자열은 나머지 파일 기능에서 샌드박스를 우회하는 데 사용할 수 있습니다. 자세한 내용은 설명서의 언어 섹션에 있는 기능 설명을 참조하십시오. 세부). 다른 방법은 대상 플랫폼의 <a href="../Settings/Game_Options.htm">게임 옵션</a> 에서 샌드박스를 완전히 비활성화하는 것입니다(이 페이지에서 더 자세히 설명하는 것처럼 데스크톱 대상에만 사용 가능).</p><p> HTML5에서는 서버의 샌드박스 외부에서 파일을 로드할 수도 있지만 이 작업은 다음 기능을 통해서만 수행해야 합니다. <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_load_async.htm"><span class="inline">ini_close()</span></a> 동기 로딩은 대부분의 브라우저에서 더 이상 사용되지 않으며 결국 사용되지 않을 것입니다. 이것은 이러한 방식으로 로드되는 파일이 바이너리 파일로 저장되어야 함을 의미합니다. 예를 들어, 다음과 같이 저장할 수 있습니다.<span class="inline">sprite_add()</span> 문자열로(참조 <a href="../GameMaker_Language/GML_Reference/File_Handling/Ini_Files/Ini_Files.htm"> <span class="inline">%localappdata%\&lt;Game Name&gt;</span></a> 자세한 내용은) 그런 다음 비동기 함수를 사용하여 저장하고 로드할 수 있는 버퍼에 작성합니다. 다음을 사용하여 이미지를 로드하는 경우 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add.htm"> <span class="inline">/Users/&lt;User Name&gt;/AppData/Local/&lt;Game Name&gt;</span></a> 그런 다음 이미 비동기적으로 처리됩니다.</p><p> 또한 각 대상 플랫폼에는 파일과 디렉토리를 쓰고 읽을 수 있는 자체 저장 영역이 있다는 것을 알아야 합니다. 다음은 샌드박스 처리될 때 각 대상에 대한 해당 영역 목록입니다.</p><ul class="colour"><li> <strong>Windows 및 Windows</strong> <strong>UWP</strong>: Windows에는 모든 파일이 <span class="inline">~/Library/Application Support/&lt;Game Name&gt;</span> 디렉토리(Windows 7에서는 <span class="inline">Home/.config/gamename</span> 예배 규칙서).</li><li> <strong>HTML5</strong>: 모든 것이 로컬 저장소를 통해 수행됩니다.</li><li> <strong>macOS</strong>: 저장소는 응용 프로그램이 샌드박스 처리되었는지 여부에 따라 달라집니다(Apple의 규칙에 따라 일반적으로 경로는 <span class="inline">/home/&lt;username&gt;</span> ).</li><li> <strong>Ubuntu(Linux)</strong>: 파일은 다음 위치에 저장됩니다. <span class="inline">/data/&lt;package name&gt;</span> 여기서 &quot;홈&quot;은 사용자 홈 디렉토리입니다.<span class="inline"></span></li><li> <strong>iOS</strong> / <strong>tvOS</strong>: 저장소는 표준 위치입니다(iTunes를 통해 볼 때).</li><li> <strong>Android</strong>: 파일이 표준 위치에 있습니다(기기가 루팅되어 있지 않으면 보이지 않음)<span class="inline"></span>.</li></ul><p> HTML5 대상 모듈에는 로컬 저장소에 대한 제한이 있다는 점(브라우저에 따라 1MB에서 5MB 사이일 수 있음)이 있다는 점은 주목할 가치가 있습니다. 즉, 큰 스프라이트, 스크린샷 등을 저장할 수 없습니다... </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="Additional_Information.htm">추가 정보</a></div><div style="float:right"> 다음: <a href="Bitwise_Operators.htm">비트 연산자 및 이진법</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
The File System
Sandbox
Sandboxing
Working Directory
Local Storage
-->
  <!-- TAGS
file_system
-->
</body>
</html>