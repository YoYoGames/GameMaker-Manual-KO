<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>블렌드 모드 사용 가이드</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="블렌드 모드의 작동 방식을 설명하는 페이지입니다." />
  <meta name="rh-index-keywords" content="블렌드 모드,블렌드 모드 사용 가이드" />
  <meta name="search-keywords" content="블렌드 모드,블렌딩,블렌드 모드" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 블렌드 모드 사용 가이드</h1><p> 오랜 기간 동안 <span data-keyref="GameMaker Name">GameMaker</span> 를 사용해 왔다면 거의 틀림없이 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/GPU_Control.htm">블렌드 모드</a> 를 접했을 것이며 게임에서도 사용했을 것입니다. 혼합 모드는 흥미롭고 구체적인 그래픽 효과를 주기 위해 무언가를 그리는 방법을 변경하는 좋은 방법이지만 작동 방식과 사용 방법을 알고 있습니까? 이것은 사람들을 혼란스럽게 할 수 있는 주제이므로 이 섹션에서 블렌드 모드를 둘러싼 미스터리를 풀고 게임에서 최대한 활용할 수 있기를 바랍니다.</p><p></p><h2> 개요</h2><p> 블렌드 모드는 기본적으로 게임에 미리 이미 그려진 다른 것과 블렌드된 특정 항목을 그리도록 지시합니다. 화면에 그리는 모든 것은 빨강, 녹색, 파랑 및 알파의 네 가지 구성 요소로 구성되며 기본적으로 혼합 모드를 사용하여 화면에 그려집니다. <span class="inline">bm_normal</span>. 이 혼합 모드는 기본적으로 변경되지 않은 색상 및 알파 값으로 모든 픽셀을 그립니다(비록 이 섹션의 뒷부분에서 이것이 <em>사실</em> 이 아님을 알게 될 것입니다...). 그러나 <span data-keyref="GameMaker Name">GameMaker</span> 에는 다음과 같이 할 수 있는 여러 내장 혼합 모드가 있습니다. 이 동작을 변경하도록 설정합니다.</p><p> <span data-keyref="GameMaker Name">GameMaker</span> 가 픽셀을 그리려고 할 때 <strong>소스 색상</strong> (그리려는 픽셀의 색상)과 <strong>대상 색상</strong> (우리가 그리는 픽셀에 이미 있는 색상)이 있습니다. 픽셀의 새 색상을 결정할 때 GameMaker는 위에서 언급한 대로 <strong>혼합 모드</strong> 에 따라 소스 및 대상 색상을 결합합니다. 색상의 각 구성 요소는 0과 1 사이의 부동 소수점 값으로 저장되며, 새로운 색상은 소스 색상의 각 구성 요소에 몇 가지 요소를 곱하고 대상 색상의 각 구성 요소에 다른 요소를 곱한 다음 추가하여 계산됩니다. 구성 요소별로 결과가 함께 나타납니다.</p><p></p><h2> 기본 혼합 모드</h2><p> <span data-keyref="GameMaker Name">GameMaker</span> 는 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode()</a> 함수를 사용하여 게임에서 그리기에 사용하는 혼합을 변경합니다. (예를 들어) 스프라이트를 그리기 전에 이것을 호출하고 다음과 같이 나중에 다시 설정합니다.</p><p class="code">gpu_set_blendmode(bm_add);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p><p> 이 코드는 <strong>추가</strong> 혼합 모드를 사용하여 인스턴스 스프라이트를 그립니다. 가산 혼합 모드는 사용 가능한 GML 상수 중 하나를 사용하여 설정되며 그 중 기본 모드에는 4가지가 있습니다.</p><p class="code">bm_normal<br />
    bm_add<br />
    bm_subtract<br />
    bm_max</p><p> 우리는 이미 어떻게 <span class="inline">bm_normal</span> 외모 - 그것이 모든 것이 기본이기 때문에! - 계속해서 나머지 3개를 좀 더 자세히 살펴보겠습니다...</p><p><img alt="bm_normal example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmNormal.png" /></p><p></p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">bm_add</a></p><div class="droptext" data-targetname="drop-down"><p class="dropspot"> 이 혼합 모드는 소스 및 대상 픽셀의 색상을 함께 추가합니다(그러나 알파 값에는 영향을 미치지 않음). 예를 들어 배경 이미지가 RGB 값이 (100,15,70)인 단색이고 RGB가 (120,25,30)인 직사각형을 그린 경우 (bm_add를 사용하여) fina RGB 사각형의 각 픽셀에 대한 값은 (220,40,100)입니다. 색상 값은 255(또는 0 미만)를 넘을 수 없으므로 그 이상을 합하면 255로 고정됩니다.</p><p class="dropspot"><img alt="bm_add example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmAdd.png" /> 이 블렌드 모드를 사용하는 것은 &quot;네온 글로우&quot; 모양을 얻는 좋은 방법이며 조명 효과, 레이저 또는 빛나거나 발광하는 것처럼 보이려는 거의 모든 것에 가장 자주 사용됩니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">bm_subtract</a></p><div class="droptext" data-targetname="drop-down1"><p class="dropspot"> 이 혼합 모드는 직접 값이 아닌 백분율 기준으로 작동하기 때문에 이전 모드와 약간 다릅니다. 이 백분율은 대상 색상(그리려는 픽셀의 색상)에서 뺄 값입니다. 이것을 더 잘 설명하기 위해 예를 살펴보겠습니다.</p><p class="dropspot"><img alt="bm_subtract example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmSubtract.png" /> 방의 한 영역에 그려진 모든 픽셀의 빨간색 값을 25% 줄이고 싶다고 상상해 보십시오. 먼저 255의 25%를 가져와 RGB 색상 값으로 변환한 다음 마지막으로 bm_subtract와 함께 사용하여 영역을 그립니다. 이 같은:</p><p class="code">var red = (25 / 100) * 255;<br />
      var col = make_colour_rgb(red, 0, 0);<br />
      gpu_set_blendmode(bm_subtract);<br />
      draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false);<br />
      gpu_set_blendmode(bm_normal);</p><p class="dropspot"> 동일한 규칙에 따라 단순히 배경의 밝기를 50%만 줄이려면 빨간색 50%, 녹색 50%, 파란색 50%인 색상을 갖게 됩니다. 즉, RGB(128, 128, 128)입니다. 이 혼합 모드는 주로 그림자를 그리거나 흥미로운 페이드 아웃 효과를 만드는 데 사용됩니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">bm_max</a></p><div class="droptext" data-targetname="drop-down2"><p class="dropspot"> 이 혼합 모드는 설명하기가 더 복잡하지만 기본적으로 소스 색상에 소스 알파를 곱한 다음 역 소스 색상 값을 곱한 대상 색상 값에 추가합니다. bm_max(및 기타 혼합 모드) 이면의 실제 수학은 이 기사의 2부에서 다루지만, 결과는 동일한 순수함으로 이어지지 않으면서 더 &quot;포화&quot;되고 더 밝은 색상이 될 것이라는 점만 알아야 합니다. 사용하는 백색 광채 <span class="inline">bm_add</span> 원인이됩니다.</p><p class="dropspot"><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmMax.png" /> 이 블렌드 모드는 너무 밝아서 보이지 않을 정도로 겹치는 이미지를 그려야 할 때 유용할 수 있습니다. 밝은 부분은 더 밝아지지만 여전히 색상과 색조 수준을 유지해야 합니다. 이 혼합 모드를 사용할 때 소스 이미지의 알파 값도 최종 효과에 영향을 미칩니다.</p></div><p></p><p> 이제 <span data-keyref="GameMaker Name">GameMaker</span> 에서 혼합 모드를 사용하는 기본 사항을 알게 되었습니다. 소스 이미지(그리는 대상)의 RGB 및 알파 값을 취한 다음 대상의 RGB 및 알파 값(그리는 대상)과 혼합합니다. 이 블렌딩은 달성하고자 하는 효과에 따라 각 픽셀 색상과 알파의 개별 구성 요소에 다른 양을 곱하여 수행됩니다. 이 지식을 바탕으로 게임에서 블렌드 모드를 사용하여 빛나는 레이저, 사실적인 그림자 또는 포화된 전환 효과를 얻을 수 있지만 여기서 배워야 할 것이 더 있습니다! 아래에서 우리는 <strong>확장된 혼합 모드</strong> 를 살펴보고 곱셈 또는 오버레이와 같은 고유한 혼합 효과를 만들 수 있도록 그 이면에 있는 약간의 수학을 살펴봅니다.</p><p></p><h2> 확장 혼합 모드</h2><p> 위에서 우리는 기능에 대해 이야기했습니다. <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm"><span class="inline">gpu_set_blendmode()</span></a>, 하지만 이제 우리는 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"><span class="inline">gpu_set_blendmode_ext()</span></a>. 이것은 (이름에서 알 수 있듯이) <em>사용자 정의</em> 혼합 모드를 설정하는 확장 기능이지만 어떻게 작동합니까? 더 진행하기 전에 먼저 기술적인 답변을 살펴보겠습니다.</p><ul class="colour"><li> 함수 <span class="inline">gpu_set_blendmode_ext</span><span class="inline">(src, dest)</span> 소스 및 대상 색상 모두에 사용할 혼합 모드를 나타냅니다. 새 색상은 소스에 몇 가지 요소를 곱한 것이고 다른 요소에는 대상에 곱한 것입니다. 이러한 요소는 이 기능으로 설정됩니다. 이를 이해하기 위해 소스와 대상에는 모두 빨강, 녹색, 파랑 및 알파 구성 요소가 있습니다. 그래서 <strong>소스</strong> 는 (<span class="inline">Rs, Gs, Bs, As</span> ) <strong>목적지</strong> 는 (<span class="inline">Rd, Gd, Bd, Ad</span> ). 모든 값은 0과 1 사이에 있는 것으로 간주됩니다.</li></ul><p> 이제 그 텍스트가 정확하고 혼합 모드가 무엇을 하는지 설명하지만 실제로는 직관적이지 않습니다... 그래서 조금 더 자세히 살펴보고 이것이 무엇에 관한 것인지 설명하겠습니다.</p><p> <strong>소스</strong> 에 대해 이야기할 때 그려지는 픽셀의 색상과 알파 값에 대해 이야기하고 <strong>대상</strong> 에 대해 이야기할 때 그려지는 픽셀의 색상과 알파 값에 대해 이야기합니다. 일을 더 쉽게 하기 위해 다음과 같이 소스 색상을 구성 요소로 작성할 수 있습니다.</p><ul class="colour"><li><span class="inline">(Rs, Gs, Bs, As)</span> = 그릴 색상의 RGB 및 알파.</li></ul><p> 그리고 목적지는 다음과 같을 것입니다:</p><ul class="colour"><li><span class="inline">(Rd, Gd, Bd, Ad)</span> = 그릴 색상의 RGB 및 알파.</li></ul><p> 따라서 화면에 무언가를 그릴 때 그래픽 프로세서는 실제로 모든 단일 픽셀에 대해 다음을 수행합니다.</p><p class="code">final_pixel_colour =  (Rs,Gs,Bs,As) * source_blend_factor + (Rd,Gd,Bd,Ad) * destination_blend_factor</p><p> 위에서 언급한 <strong>혼합 계수</strong> 는 <span data-keyref="GameMaker Name">GameMaker</span> 에서 여러 GML 상수로 정의되며 각각은 소스 또는 대상 R, G, B 및 A 값을 곱해야 하는 계수를 나타냅니다. 사용 가능한 요소는 다음과 같습니다.</p><ul class="colour"><li><span class="inline">bm_zero</span>: 혼합 계수는 (0, 0, 0, 0)</li><li><span class="inline">bm_one</span>: 혼합 계수는 (1, 1, 1, 1)입니다.</li><li><span class="inline">bm_src_colour</span>: 혼합 계수는 (Rs, Gs, Bs, As)</li><li><span class="inline">bm_inv_src_colour</span>: 혼합 계수는 (1-Rs, 1-Gs, 1-Bs, 1-As)</li><li><span class="inline">bm_src_alpha</span>: 혼합 계수는 (As, As, As, As)</li><li><span class="inline">bm_inv_src_alpha</span>: 혼합 계수는 (1-As, 1-As, 1-As, 1-As)</li><li><span class="inline">bm_dest_alpha</span>: 혼합 요소는 (Ad, Ad, Ad, Ad)입니다.</li><li><span class="inline">bm_inv_dest_alpha</span>: 혼합 계수는 (1-Ad, 1-Ad, 1-Ad, 1-Ad)입니다.</li><li><span class="inline">bm_dest_colour</span>: 혼합 계수는 (Rd, Gd, Bd, Ad)입니다.</li><li><span class="inline">bm_inv_dest_colour</span>: 혼합 계수는 (1-Rd, 1-Gd, 1-Bd, 1-Ad)입니다.</li><li><span class="inline">bm_src_alpha_sat</span>: 혼합 계수는 (f, f, f, 1)입니다. f = min(As, 1-Ad)</li></ul><p> <span data-keyref="GameMaker Name">GameMaker</span> 에 있는 네 가지 &quot;기본&quot; 혼합 모드는 실제로 이러한 혼합 요소 중 두 가지를 합성한 것입니다.</p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">bm_normal 작동 방식의 예</a></p><div class="droptext" data-targetname="drop-down4"><p class="dropspot"> <span data-keyref="GameMaker Name">GameMaker</span> 에서 그림을 그리기 위해 이것이 어떻게 결합되는지에 대한 실용적인 예를 살펴볼 시간입니다. 이를 위해 우리는 실제로 다음과 같은 bm_normal을 살펴볼 것입니다.</p><p class="code">gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);</p><p class="dropspot"> 사람들이 블렌드 모드를 사용할 때 겪는 문제 중 하나는 결과를 시각화하는 것이므로 그 이면의 수학을 보여주기 위해 이 블렌드 모드를 테스트 대상으로 사용할 것입니다. 모든 사람이 가장 많이 사용하는 블렌드 모드이고 무엇을 기대해야 하는지 정확히 알고 있기 때문입니다. 그것에서. 색상이 (64, 128, 255, 255)인 배경 위에 색상(128, 255, 64, 255)이 있는 직사각형을 그리고 있다고 상상해보십시오.</p><p class="dropspot"><img alt="Example of bm_normal" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example1.png" /> 따라서 블렌드 모드는 다음과 같습니다.</p><p class="code">Source: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) =  (0, 0, 0, 0)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)<br />
      (0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)</p><p class="dropspot"> 보시다시피 대상 값에 0을 곱하면 값도 0이 됩니다. 이는 소스 색상이 변경되지 않았음을 의미하므로 최종 색상 값은 <strong>(128, 255, 64, 255)</strong> 입니다. 알파를 포함하면 이 값에도 어떤 영향을 미치는지 확인할 수 있습니다.</p><p class="code">Source (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5, 0.5)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5)<br />
      (0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5) = (0.375, 0.75, 0.625, 0.75) = (96, 192, 159, 192)</p><p class="dropspot"> 이것은 최종 픽셀 색상(96, 192, 159, 192)을 제공하고 아래와 같은 이미지를 제공합니다.</p><p class="dropspot"><img alt="Example Of bm_normal With Alpha" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example2.png" /></p><p class="dropspot"> 이제 블렌드 모드 요소가 무엇을 하는지, 그리고 그것들을 결합하여 흥미로운 효과를 만들기 위해 그려지는 것을 어떻게 바꿀 수 있는지 명확하게 알 수 있기를 바랍니다. 이제 이러한 요소를 결합하여 사용자 정의 혼합 모드를 만드는 방법에 대한 실용적인 예를 살펴보겠습니다.</p><p class="dropspot"></p><p class="dropspot"></p></div><p> 이제 블렌드 모드 설정이 어떻게 작동하는지 알고 일상적인 드로잉에 사용되는 예를 보았으니 좀 더 복잡한 것을 살펴보겠습니다...</p><p></p><h2> 자신만의 혼합 모드 만들기</h2><p> 사용 가능한 다양한 요소를 사용하여 고유한 혼합 모드를 만들어 일반적으로 사용할 수 없는 혼합 옵션을 얻을 수 있습니다. 이 예에서는 Photoshop에서 사용되는 것과 같은 <strong>곱하기</strong> 효과를 만들 것입니다. 다음과 같이 위에서 언급한 혼합 모드 계수 상수 중 두 가지를 사용하여 이 혼합 모드를 시뮬레이션할 수 있습니다.</p><p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);</p><p> 이 혼합 모드를 사용하여 실제로 무언가를 그리기 전에 Photoshop에서 어떻게 보이는지 살펴보겠습니다.</p><p><img alt="The &quot;Multiply&quot; Blend Mode In Photoshop" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Multiply.png" /> 확장 혼합 모드를 사용하여 다음을 얻습니다.</p><p class="code">(Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad)<br />
    Source colour * dest colour + dest colour * zero = source colour * dest colour</p><p> 블렌드 팩터 <span class="inline">bm_zero</span> 방정식에서 대상 색상을 효과적으로 제거하므로(0 곱하기 모든 것이 0이므로) 소스 색상에 대상 색상의 혼합 계수를 곱한 결과가 남습니다. 따라서 모드의 이름이 &quot;곱하기&quot;입니다. <span data-keyref="GameMaker Name">GameMaker</span> 에서 이것을 사용하려면 <strong>Draw Event</strong> 에 다음과 같이 하면 됩니다.</p><p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p><p> 다음 이미지는 이 정확한 코드를 사용하여 GameMaker의 테스트 프로젝트에서 가져왔습니다.</p><p><img alt="The &quot;Multiply&quot; Blend Mode In GameMaker" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_MultiplyGMS.png" /> 차이점을 알 수 있습니까? 아마 아닐거야! 그러나 사용된 렌더링 도구 간의 차이로 인해 둘 사이에 약간의 편차가 있지만 예상한 것과 거의 같습니다. 아트 프로그램에서 사용하는 모든 블렌드 모드를 <span data-keyref="GameMaker Name">GameMaker</span> 내에서 사용할 수 있는 것은 아닙니다. 그 중 일부는 실제로 색상 값이 255를 초과하여 특수 효과를 생성할 수 있기 때문입니다. 하지만 그렇다고 해서 할 수 없다는 것은 아닙니다. t 이러한 효과의 적절한 모방을 만들거나 심지어 새로운 효과를 사용하여 만들 수도 있습니다.</p><p> <span data-keyref="GameMaker Name">GameMaker</span> 를 사용하면 이 기능을 사용하여 한 단계 더 나아갈 수 있다는 점을 언급할 가치가 있습니다. <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha()</a></span>. 이를 통해 다양한 혼합 모드 요소의 알파 구성 요소를 분리하고 개별적으로 사용하여 더 많은 가능한 조합을 만들 수 있습니다. 이 기능은 이미 설명서에 자세히 설명되어 있으므로 여기에서 다루지 않겠지만 사용 가능하다는 것을 알기 위해 언급할 가치가 있습니다.</p><p></p><h2> 표면 및 알파</h2><p> 마지막으로 블렌드 모드에 대해 주목할 가치가 있으며 이것이 색상의 <strong>알파</strong> 구성 요소에 영향을 미치는 방식입니다. 단순히 <a class="glossterm" data-glossterm="적용면" href="#">애플리케이션 표면</a> 이나 <a class="glossterm" data-glossterm="디스플레이 버퍼" href="#">디스플레이 버퍼</a> 에 그릴 때 대상 알파 값은 <em>항상</em> 1이므로 실제로 고려할 필요가 없습니다. 그러나 0에서 원하는 1까지의 알파 값을 갖도록 표면을 지울 수 있기 때문에 직접 만드는 표면은 다릅니다. 이것은 대부분의 사람들이 기대하는 것과는 반대되는 몇 가지 흥미로운 효과로 이어집니다.</p><p> 이를 설명하기 위해 기본 기본값을 사용하여 그리기를 살펴보겠습니다. <span class="inline">bm_normal</span>. 대부분의 사람들은 표면을 알파 0으로 지우고 알파가 0.5인 무언가를 그리면 결과적으로 알파 값도 0.5가 된다고 생각합니다... <strong>그러나 이것은 사실이 아니며</strong> 많은 사람들이 &quot;버그&quot;라고 생각하는 것입니다. <span data-keyref="GameMaker Name">GameMaker</span> 가 사물을 렌더링하는 방법에서. 하지만 보시다시피 버그가 전혀 아닙니다!</p><p> 알파 0에 모든 픽셀이 있는 표면이 있다고 가정하고 다음을 사용하여 알파 0.5로 원을 그립니다. <span class="inline">bm_normal</span> 혼합 모드. 전체 표면은 여전히 알파 0이 될 것이지만, 원에서 알파는 실제로 0.25가 될 것입니다. 그 이유는 다음과 같습니다.</p><p class="code">0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25</p><p> 그런 다음 알파가 0.5인 기존 원에 다른 원을 계속 그리면 원 외부의 알파는 0이 되고 원 사이의 알파는 0.25가 되고 더 작은 원에서는 0.375가 됩니다.</p><p class="code">0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375</p><p> 알파가 0인 표면에 0.5개의 알파 원을 계속 그린 다음 이 표면을 방에 그리면 다음과 같이 명확하게 볼 수 있습니다.</p><p><img alt="Surface Alpha Illustration" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Surface.png" /> 알파에 대해 여전히 약간 혼란스럽다면 다른 색상으로 생각해 보십시오. 색상처럼 작동하며 모든 계산은 유사한 방식으로 수행됩니다. 다른 색상에 미치는 영향은 있지만 실제로는 보이지 않습니다. 표면과 블렌드 모드(심지어 <span class="inline">bm_normal</span> )...</p><p> 표면의 알파가 0인 <em><strong>경우에도 색상 구성요소는 여전히 존재하며 모든 혼합 작업에 영향을 미칩니다</strong></em>. 따라서 (예를 들어) 빨간색을 사용하여 지워진 제로 알파 클리어 표면에 그리는 것은 소스 색상을 대상 색상과 혼합하고 생각하는 것과 다른 효과를 줄 것입니다. 위의 이미지는 검은색 배경 위에 검은색으로 지워진 표면에서 생성되었지만 표면을 빨간색으로 지우면 대신 다음과 같이 표시됩니다.</p><p><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_SurfaceRed.png" /> 이제 위에서 설명한 공식을 사용하고 적절한 수치를 적용하여 왜 이런 일이 발생하는지 알아낼 수 있기를 바랍니다. <span class="inline">bm_normal</span>. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="Additional_Information.htm">추가 정보</a></div><div style="float:right"> 다음: <a href="Error_Reporting.htm">오류 보고</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Blendmodes
Blending
Blend Modes
-->
  <!-- TAGS
using_blendmodes
-->
</body>
</html>