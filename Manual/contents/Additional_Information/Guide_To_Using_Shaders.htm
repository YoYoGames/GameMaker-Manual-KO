<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>셰이더 사용 가이드</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="셰이더 설정 및 사용 방법을 설명하는 페이지" />
  <meta name="rh-index-keywords" content="셰이더 사용 가이드" />
  <meta name="search-keywords" content="셰이더,셰이더,셰이더 사용,셰이더 가이드,셰이더 설정,셰이더 예제,셰이더 예제" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 셰이더 사용 가이드</h1><p> 셰이더는 종종 게임에서 아름다운 그래픽 효과를 만드는 데 사용됩니다. 또한 <span data-keyref="GameMaker Name">GameMaker</span> 에서 제공하는 가장 고급 기능 중 하나이므로 시작하기 전에 프로그래밍과 <span data-keyref="GameMaker Name">GameMaker</span> 작동 방식에 대한 기본적인 이해가 필요합니다.</p><p> 그렇다면 쉐이더란 무엇일까요? 처음에는 조명에 음영을 제공하기 위해 만들어졌지만(따라서 이름이 지정됨), 이제는 매우 다양한 효과를 생성하는 데 사용됩니다. 셰이더 코드는 일반 코드와 유사하지만 (거의 항상) CPU가 아닌 GPU에서 실행됩니다. 이 차이점에는 고유한 규칙 및 제한 사항이 있지만 나중에 다루겠습니다.</p><p> 각 셰이더는 <strong>정점 셰이더</strong> 와 <strong>프래그먼트 셰이더</strong> ( <strong>픽셀 셰이더</strong> 라고도 함)의 두 가지 개별 구성 요소로 구성됩니다. 정점 셰이더부터 시작하겠습니다. 각 스프라이트는 직사각형으로 형성되지만 컴퓨터는 삼각형을 그리는 것을 좋아하므로 이러한 직사각형은 두 개의 삼각형(때로는 <em>쿼드</em> 라고도 함)으로 분할됩니다. 이렇게 하면 스프라이트당 6개의 정점(모서리)이 남지만 그 중 2개는 동일한 것이므로 4개만 걱정하면 됩니다. 이제 모든 꼭짓점을 살펴보고 각각에 대해 꼭짓점 셰이더 내부의 코드를 실행하는 for 루프가 있다고 상상해 보십시오. 이를 통해 정점 셰이더가 더 일찍 실행되기 때문에 프래그먼트 셰이더로 전달하기 전에 정점 위치와 색상을 변경할 수 있습니다.</p><p> 다음과 같이 표시됩니다.</p><p><img alt="Shader Vertices" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Vertices.gif" /> 프래그먼트 셰이더의 경우 이전과 동일한 루프를 상상할 수 있지만 이번에는 스프라이트의 모든 단일 픽셀을 살펴보고 해당 픽셀의 위치 및 색상과 같은 정보를 제공합니다. 조각 셰이더 코드에서 원하는 효과를 얻기 위해 해당 픽셀의 색상을 결정하는 연산과 계산을 수행합니다. 예를 들어, 셰이더에서 스프라이트를 흑백으로 만들려면 각 픽셀이 효과를 생성하기 위해 필요한 회색 음영을 계산해야 합니다.</p><p> 다음과 같이 보일 것입니다.</p><p><img alt="Shader Fragments" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Fragments.gif" /> 셰이더 코드가 일반적으로 GPU에서 실행되는 이유는 GPU에서 더 효율적이기 때문입니다. 최신 CPU에는 일반적으로 2~8개의 코어가 있습니다. 각 코어는 한 번에 하나의 작업을 수행할 수 있으므로 여러 코어를 활용하여 많은 작업을 동시에 수행할 수 있습니다. 대조적으로, 최신 GPU는 수천, 심지어 수만 가지 작업을 동시에 실행할 수 있습니다. 이것은 수천 픽셀의 셰이더 코드를 동시에 실행할 수 있기 때문에 셰이더에 유용합니다. 제한 사항은 스프라이트의 초기 상태에만 액세스할 수 있다는 것이므로 코드가 아직 실행되었는지 확인할 수 없기 때문에 다른 픽셀에 수행된 수정 사항에 대해 알 수 없습니다.</p><p class="note"> <strong>참고</strong>: <span data-keyref="GameMaker Name">GameMaker</span> 를 사용하면 <strong>GLSL</strong> (OpenGL Shader Language), <strong>HLSL</strong> (DirectX 작업 시 사용되는 고급 셰이더 언어) 및 <strong>GLSL ES</strong> (모바일 장치에서 일반적으로 사용되는 GLSL의 하위 집합)로 셰이더를 작성할 수 있습니다. 여기에서는 <strong>GLSL ES</strong> 가 대상 플랫폼에서 최고의 호환성을 제공하는 셰이더 언어로 사용됩니다. 일반적으로 이것은 매우 구체적인 요구 사항이 있고 다른 셰이더 언어의 한계를 이해하지 않는 한 항상 사용하고 싶은 것입니다. 수학 및 기술은 세 가지 언어 모두에서 유사해야 하지만 여기저기서 몇 가지 구문 차이를 제외합니다.</p><p> 정점 셰이더가 먼저 실행되고 위에서 설명한 것처럼 <strong>정점</strong> 을 처리합니다. 위치, 법선 및 텍스처 좌표를 계산하는 데 사용됩니다. 이러한 셰이더는 2D에서 특히 유용하지 않습니다. 모든 스프라이트는 일반적으로 정사각형이기 때문입니다. 그러나 약간의 기울이기, 크기 조정 등을 수행하는 데 사용할 수 있습니다. 조명 계산 및 메쉬 변형을 위해 3D에서 훨씬 더 유용합니다. 프래그먼트 셰이더는 훨씬 더 흥미롭고 여기에서 주로 다룰 내용입니다. 프래그먼트 셰이더는 텍스처에 대한 정보를 얻고 이미지의 각 픽셀의 최종 색상을 조정할 수 있는 곳이기 때문입니다.</p><p></p><h2> 셰이더 변수</h2><p> <span data-keyref="GameMaker Name">GameMaker</span> 에서 셰이더를 생성했다면 기본 <strong>통과</strong> 셰이더에서 다음 키워드를 보았을 것입니다. 다음 키워드는 셰이더가 각 변수의 목적과 범위를 이해하는 데 도움이 됩니다.</p><ul class="colour"><li> <strong>속성</strong>: OpenGL이 <strong>정점</strong> 셰이더에 전달한 변수입니다. 정점마다 변경될 수 있으며 읽기 전용입니다. 여기에는 정점 위치, 텍스처 좌표, 정점 색상 및 정점 법선과 같은 정보가 포함됩니다.</li><li> <strong>Varying</strong>: <strong>정점</strong> 셰이더와 <strong>프래그먼트</strong> 셰이더 간에 데이터를 전달하는 데 사용되는 변수입니다. 이것들은 정점 셰이더에서 쓸 수 있지만 프래그먼트 셰이더에서는 읽기 전용입니다.</li><li> <strong>Uniform</strong>: 객체별로 바뀌는 변수로 사용자가 셰이더에 전달합니다. 정점 및 조각 셰이더 모두에서 사용할 수 있지만 읽기 전용입니다.</li></ul><p> 또한 <strong>vec</strong> 를 키워드로 사용하는 것도 볼 수 있습니다. 이것은 셰이더에서 벡터 변수를 식별하는 데 사용되며 셰이더로 작업할 때 벡터가 매우 중요하다는 것을 곧 알게 될 것입니다. 이것이 GLSL에서 기본 유형으로 구현되는 이유입니다. 익숙하지 않다면 열이 하나뿐인 행렬로 표현되는 수학 용어입니다. 프로그래밍에서 우리는 일반적으로 구성 요소의 수가 차원에 해당하는 배열로 나타냅니다. 2차원 및 3차원 벡터는 알파 채널이 없는 위치, 텍스처 좌표 또는 색상에 자주 사용되는 반면 4차원 벡터는 알파 채널이 있는 색상에 사용됩니다. 부울, 정수 또는 부동 소수점 값을 보유하는지 지정할 수도 있습니다. 벡터를 선언하는 구문은 다음과 같습니다.</p><p class="code">vec2 firstVec;  // Two-dimensional vector of floats<br />
    vec3 secondVec; // Three-dimensional vector of floats<br />
    vec4 thirdVec;  // Four-dimensional vector of floats<br />
    <br />
    bvec3 boolVec;  // Three-dimensional vector of booleans<br />
    ivec4 intVec;   // Four-dimensional vector of integers
  </p><p> 초기화하기 위해 생성자를 사용하여 벡터를 생성할 수 있습니다. 벡터의 길이와 동일한 수의 값을 제공해야 하지만 스칼라와 더 작은 벡터를 혼합하여 일치시켜 목표 길이에 도달할 수 있습니다. 다음은 이에 대한 몇 가지 예입니다.</p><p class="code">// Simple 2D vector with 2 scalar values<br />
    vec2 firstVec  = vec2(2.0, 1.0);<br />
    // A 4D vector using 2 scalars and a vec2 create the 4 values<br />
    vec4 secondVec = vec4(1.0, firstVec, 0.0);<br />
    // A 3D vector using 1 component of a vec4 plus a vec2 to create the 3 values<br />
    vec3 thirdVec  = vec3(secondVec.x, firstVec);</p><p> 같은 길이의 다른 벡터를 할당할 수도 있습니다(또는 적절한 길이가 될 때까지 벡터를 <em>휘젓</em> 지만 잠시 후에 설명하겠습니다).</p><p class="code">vec3 firstVec;<br />
    vec3 secondVec = firstVec;<br />
    vec4 thirdVec  = secondVec.xyz;<br />
    vec2 fourthVec = thirdVec.zx;</p><p> GLSL에서 벡터 구성 요소에 액세스할 때 몇 가지 옵션이 있습니다. 가장 기본적인 것은 벡터를 배열로 처리하고 다음과 같이 대괄호를 사용하여 구성 요소에 액세스하는 것입니다.</p><p class="code">vec4 myVec;<br />
    myVec[0] = 1.0;<br />
    myVec[1] = 0.0;<br />
    myVec[2] = 2.0;<br />
    myVec[3] = 1.0;</p><p> 그러나 다음 구문을 사용하여 구성 요소에 액세스하는 다른 방법이 있습니다.</p><p class="code">vec4 myVec;<br />
    myVec.x = 1.0;<br />
    myVec.y = 2.0;</p><p> 이것은 벡터 내부의 구성 요소 이름을 사용하여 액세스합니다. x, y, z 또는 w를 사용하여 각각 첫 번째, 두 번째, 세 번째 또는 네 번째 구성요소를 얻을 수 있습니다. 다음 구문도 유효하기 때문에 이 방법을 <strong>swizzling</strong> 이라고 합니다.</p><p class="code">vec4 firstVec;<br />
    vec3 secondVec = firstVec.xyz;<br />
    vec2 thirdVec  = secondVec.zy;<br />
    vec4 fourthVec = thirdVec.yxxy;</p><p> 보시다시피 최대 4개의 문자 조합을 사용하여 해당 길이의 벡터를 만들 수 있습니다. 범위를 벗어나는 구성 요소에 액세스를 시도할 수 없습니다(예: <span class="inline">secondVec</span> 또는 <span class="inline">thirdVec</span>, 네 번째 구성 요소가 없기 때문에). 또한 할당되는 벡터 변수가 사용된 문자 수와 동일한 크기인 한 문자를 반복하고 순서에 상관없이 사용할 수 있습니다.</p><p> 분명한 이유로 swizzle을 사용하여 구성 요소 값을 설정할 때 동일한 구성 요소를 두 번 사용할 수 없습니다. 예를 들어, 동일한 구성 요소를 두 개의 다른 값으로 설정하려고 하므로 아래는 유효하지 않습니다.</p><p class="code">myVec.xx = vec2(2.0, 3.0);</p><p> 마지막으로 우리가 사용한 <span class="inline">xyzw</span> 우리의 swizzle 마스크로, 일반적으로 위치를 다룰 때의 경우입니다. 사용할 수 있는 마스크 세트가 두 개 더 있습니다. <span class="inline">rgba</span> (색상에 사용) 또는 <span class="inline">stpq</span> (텍스처 좌표에 사용됨). 내부적으로 이러한 마스크 간에는 차이가 없으며 해당 인스턴스에서 벡터가 나타내는 것에 대해 코드를 더 명확하게 만들기 위해서만 사용합니다. 또한 동일한 작업에서 스위즐 마스크를 결합할 수 없으므로 유효하지 않습니다.</p><p class="code"><span class="inline"></span>myVec = otherVec.ybp;</p><p> 이것들은 많은 정의와 정보였습니다. 그러나 이것들을 아는 것은 셰이더 자체를 이해하는 데 필요합니다.</p><p></p><h2> 셰이더 만들기</h2><p> <span data-keyref="GameMaker Name">GameMaker</span> 에서 셰이더를 생성하면 정점 셰이더(<span class="inline">.vsh</span> ) 및 조각 셰이더(<span class="inline">.fsh</span> ). 이것은 여러분이 만들 수 있는 가장 기본적인 셰이더로, 스프라이트를 취하고 텍스처를 읽고 각 픽셀에 해당 색상을 지정합니다. 그릴 때 꼭짓점 색상을 지정하면 해당 색상이 텍스처와 혼합됩니다.</p><p> 새로 생성된 셰이더 자산에 대한 코드를 살펴보고 정점 셰이더부터 시작하여 분석해 보겠습니다.</p><p class="code">// Passthrough Vertex Shader<br />
    attribute vec3 in_Position;                  // (x,y,z)<br />
    //attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.<br />
    attribute vec4 in_Colour;                    // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;              // (u,v)<br />
    <br />
    varying vec2 v_vTexcoord;<br />
    varying vec4 v_vColour;<br />
    <br />
    void main()<br />
    {<br />
        vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);<br />
        gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;<br />
        <br />
        v_vColour = in_Colour;<br />
        v_vTexcoord = in_TextureCoord;<br />
    }
  </p><p> 주 함수 외부에서 일부 변수 선언과 해당 한정자를 볼 수 있습니다. 속성은 GameMaker에서 제공합니다. 다양한 정보는 해당 정보를 프래그먼트 셰이더에 전달하기 위해 사용자가 생성합니다. 메인 함수 내에서 정점의 화면 위치를 찾는 계산이 있습니다.</p><ul class="colour"><li> 먼저, 우리는 <span class="inline">vec4</span> 위치의 구성 요소로 초기화하고 하나를 네 번째 구성 요소로 추가합니다. 선형 대수학에서 관례는 벡터가 점을 나타내는 경우 네 번째 구성 요소에 1을 추가하고 실제 벡터를 나타내는 경우 0을 추가하는 것입니다.</li><li> 다음으로 이 네 번째 구성 요소를 추가하여 다음과 곱해야 합니다. <span class="inline">MATRIX_WORLD_VIEW_PROJECTION</span> 행렬은 4x4 행렬입니다. 이 곱셈은 정점의 세계 위치를 화면 좌표에 투영합니다.</li><li> 마지막으로 다양한 변수를 통해 정점 색상과 텍스처 좌표를 프래그먼트 셰이더에 전달합니다.</li></ul><p> 이 셰이더는 꼭짓점 위치로 재생하지 않으려는 경우 그대로 두어야 하며 표시된 모든 효과가 프래그먼트 셰이더를 사용하여 생성되기 때문에 아래 주어진 예에서는 사용되지 않습니다.</p><p> 이제 프래그먼트 셰이더를 간단히 살펴보겠습니다.</p><p class="code">// Passthrough Fragment Shader<br />
    varying vec2 v_vTexcoord;<br />
    varying vec4 v_vColour;<br />
    <br />
    void main()<br />
    {<br />
        gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );<br />
    }
  </p><p> 이전에 설명했듯이 프래그먼트 셰이더의 기본 개념은 현재 픽셀의 색상을 반환하는 것입니다. 이것은 변수를 할당하여 수행됩니다. <span class="inline">gl_FragColor</span> 최종 색상 값입니다. 그만큼 <span class="inline">texture2D</span> 함수는 텍스처와 <span class="inline">vec2</span> 텍스처를 체크인하려는 UV 좌표로 <span class="inline">vec4</span> 색상으로. 패스 스루 셰이더에서 우리가 하는 일은 이 픽셀의 좌표에서 텍스처의 색상을 잡고 이 픽셀과 관련된 꼭짓점의 색상으로 곱하는 것입니다.</p><p> 이제 첫 번째 셰이더가 있으므로 테스트하기 위해 해야 할 일은 개체를 만들고 스프라이트를 할당한 다음 개체의 <strong>그리기 이벤트</strong> 에서 다음과 같이 셰이더를 설정하는 것입니다.</p><p class="code">// Draw Event<br />
    shader_set(shdrColorOverlay);<br />
    draw_self();<br />
    shader_reset();</p><p> 우리가 만드는 모든 드로우 콜 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set.htm"><span class="inline">shader_set()</span></a> 그리고 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_reset.htm"><span class="inline">shader_reset()</span></a> 셰이더가 적용됩니다. 여기에서 패스스루 셰이더로 오브젝트 스프라이트를 그리고 있습니다.</p><p><img alt="Drawing Sprite Using Passthough Shader" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_PassThrough.gif" /> 짐작하셨겠지만 이것은 단순한 통과 셰이더이므로 시각적으로 아무 것도 변경하지 않습니다. 그러나 아래 섹션에서는 이를 수정하고 스프라이트가 그려지는 방식을 변경하기 위해 취할 수 있는 몇 가지 간단한 단계에 대해 설명합니다. 각 섹션은 프로젝트에서 생성하고 사용할 수 있는 다양한 셰이더를 보여주며, 생성에 필요한 단계와 우리가 지금의 방식대로 작업하는 이유를 설명합니다.</p><p></p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">색상 오버레이 셰이더</a></p><div class="droptext" data-targetname="drop-down"><p class="dropspot"> 이제 기본 셰이더를 편집하여 다른 작업을 수행할 수 있습니다. 정점 셰이더 부분은 건드리지 않고 프래그먼트 셰이더만 편집하고 시작하기 위해 셰이더가 빨간색을 사용하여 스프라이트를 그리도록 하는 매우 간단한 작업을 수행할 것입니다. 간단히 변경하여 이 작업을 수행합니다. <span class="inline">gl_FragColor</span> 다음과 같이 빨간색으로 표시됩니다.</p><p class="code">// Color Overlay Fragment Shader<br />
      void main()<br />
      {<br />
          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);<br />
      }</p><p class="dropspot"> 이것은 우리에게 다음과 같은 결과를 줄 것입니다:</p><p class="dropspot"><img alt="Initial Colour Overlay Block" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_ColourOverlay_Block.gif" /> 정확히 우리가 기대했던 것이 아닙니다! 우리가 기억해야 할 것은 모든 스프라이트는 궁극적으로 직사각형이라는 것입니다. 그래서 우리가 투명도를 고려하지 않는 한 이것이 우리가 얻게 될 결과입니다.</p><p class="note"> <strong>참고</strong>: 위의 이미지에서 사각형은 GameMaker가 텍스처 페이지에 배치할 때 기본 스프라이트 주변의 &quot;빈&quot; 공간이 자동으로 잘렸기 때문에 사각형의 크기가 변경되므로 각 애니메이션 프레임을 구성하는 삼각형의 크기가 다릅니다. 잘라낸 프레임 크기에 맞춥니다. 이 옵션을 비활성화하면 화면에 움직이지 않는 빨간색 사각형이 생깁니다.</p><p class="dropspot"> 위에서 우리가 언급한 <span class="inline">texture2D</span> 함수를 사용하여 작업 중인 픽셀의 색상을 가져와 투명도를 얻습니다. 의 반환 값은<span class="inline">texture2D</span> 이다 <span class="inline">vec4</span>, 여기서 구성 요소는 순서대로 빨강, 녹색, 파랑 및 알파입니다. 마침표와 그 다음에 오는 방법으로 알파 채널에 액세스할 수 있습니다. <span class="inline">a</span> 또는 <span class="inline">w</span> 변수 이름 뒤에. 이는 각각 RGBA 및 XYZW에 해당합니다.</p><p class="dropspot"> 업데이트된 코드는 다음과 같습니다.</p><p class="code">// Color Overlay Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      <br />
      void main()<br />
      {<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          gl_FragColor = vec4(1.0, 0.0, 0.0, texColor.a);<br />
      }
    </p><p class="dropspot"> 우리는 지금 새로운 <span class="inline">vec4</span> 에게 <span class="inline">gl_FragColor</span>, 여기서 빨간색 채널은 최대값이고 녹색 및 파란색 채널은 0이며 알파 채널은 원본 텍스처와 동일합니다. 출력은 다음과 같습니다.</p><p class="dropspot"><img alt="Overlay Shader Making Sprite Red" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_ColourOverlay.gif" /> 이제 그것이 우리가 추구했던 것입니다! 모든 픽셀의 색상을 빨간색으로 교체했지만 알파 채널은 그대로 유지했습니다.</p><p class="dropspot"> 다른 색상을 사용하려고 할 때마다 셰이더를 변경해야 하는 것은 좋은 생각이 아닙니다. 특히 원하는 각 색상에 대해 별도의 셰이더가 필요하기 때문입니다. 대신, <strong>uniform</strong> 을 사용하여 색상 정보를 셰이더에 전달할 것입니다. 이렇게 하려면 먼저 유니폼에 대한 <strong>포인터</strong> 를 가져와야 합니다. 다음을 추가하여 스프라이트가 있는 객체의 <strong>Create Event</strong> 에서 이 작업을 수행합니다.</p><p class="code">// Create Event<br />
      _uniColor = shader_get_uniform(shdrColorOverlay, &quot;u_colour&quot;);<br />
      _color    = [1.0, 1.0, 0.0, 1.0];</p><p class="dropspot"> 우리가 해야 할 일은 전화하는 것뿐입니다. <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a> 유니폼에 대한 포인터를 가져옵니다. 전달해야 하는 매개변수는 셰이더 자산 이름(GameMaker이 생성한 ID를 전달하기 위해 따옴표 제외)과 셰이더 내부의 균일 변수 이름(이번에는 문자열)입니다. 이 이름이 작동하려면 셰이더 코드 내부의 이름과 정확히 일치해야 합니다. 또한 런타임에 변경하고 변경 사항을 기억할 수 있도록 색상 변수를 추가했습니다.</p><p class="dropspot"> 이제 그리기 이벤트의 코드가 균일 변수를 전달하도록 약간 변경됩니다.</p><p class="code">// Draw Event<br />
      shader_set(shdrColorOverlay);<br />
      shader_set_uniform_f_array(_uniColor, _color);<br />
      draw_self();<br />
      shader_reset();</p><p class="dropspot"> 이전과 동일한 코드이지만 무엇이든 그리기 전에 모든 균일 값을 셰이더에 전달해야 합니다. 이 경우 색상을 float 배열로 전달합니다. 셰이더는 유니폼을 포함하도록 변경하고 사용하므로 다음과 같이 됩니다.</p><p class="code">// Color Overlay Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      uniform vec4 u_color;<br />
      void main()<br />
      {<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          gl_FragColor = vec4(u_color.rgb, texColor.a);<br />
      }</p><p class="dropspot"> create shader(<span class="inline">u_color</span> ) 그리고 우리는 그것을 의 처음 세 가지 구성 요소로 전달합니다. <span class="inline">gl_FragColor</span> 벡터, swizzling을 활용합니다. 다시 컴파일하면 다음과 같이 표시됩니다.</p><p class="dropspot"><img alt="Overlay Shader Making Sprite Yellow" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_ColourOverlay_Yellow.gif" /> 이제 셰이더가 훨씬 더 유용하고 재사용할 수 있습니다. 색상을 설정하는 데 필요한 경우 더 많은 기능을 추가하는 것은 사용자에게 달려 있습니다(변수 사용 <span class="inline">_color</span> ) 런타임 동안.</p><p></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">흑백 셰이더</a></p><div class="droptext" data-targetname="drop-down1"><p class="dropspot"> 흑백 셰이더를 만드는 것은 셰이더의 작동 방식에 대해 더 많이 배울 수 있는 좋은 방법이며 많은 초보자가 이 작업을 시도하는 것으로 시작합니다. 개념적으로는 매우 간단하기 때문입니다. 모든 픽셀을 가져와 회색 음영을 할당합니다. 하지만 간단합니까? 좀 빠지는...</p><p class="dropspot"> RGB 색상을 사용할 때 세 가지 구성 요소가 모두 같은 값이면 회색 톤이 나타납니다. 이 아이디어를 사용하기 위해 셰이더를 만드는 순진한 접근 방식은 세 가지 색상 채널(빨간색, 녹색 및 파란색)을 모두 추가한 다음 3으로 나누는 것입니다. 그런 다음 세 채널 모두에 값을 할당하여 회색 톤을 만듭니다. 프래그먼트 셰이더의 모습은 다음과 같습니다.</p><p class="code">// Black and white fragment shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      void main()<br />
      {<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          float gray = (texColor.r + texColor.g + texColor.b) / 3.0;<br />
          gl_FragColor = v_vColour * vec4(gray, gray, gray, texColor.a);<br />
      }
    </p><p class="dropspot"> 한 가지 알아차렸을 수 있는 것은 <span class="inline">gl_FragColor</span> 코드, 우리는 곱하고 있습니다<span class="inline">vec4</span> 라는 것으로 <span class="inline">v_vColour</span>. 이것은 이 픽셀과 관련된 꼭짓점의 색상을 알려주는 꼭짓점 셰이더에 의해 전달된 변수입니다. 항상 최종 계산된 색상에 정점 색상을 곱하는 것이 좋습니다. 대부분의 경우 아무 작업도 수행하지 않지만 GML에서 꼭짓점 색상을 변경하면 이를 반영합니다(예: <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_ext.htm"><span class="inline">draw_sprite_ext()</span></a> 또는 <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_general.htm"><span class="inline">draw_sprite_general()</span></a> 변경 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_blend.htm"><span class="inline">image_blend</span></a> ).</p><p class="dropspot"> 무승부 이벤트의 경우 전달할 유니폼이 없기 때문에 매우 간단합니다.</p><p class="code">// Draw Event<br />
      shader_set(shdrBlackAndWhite);<br />
      draw_self();<br />
      shader_reset();</p><p class="dropspot"> 컴파일하고 우리가 얻은 것을 봅시다.</p><p class="dropspot"><img alt="Black And White Shader" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_BlackAndWhite.gif" /> 벌써부터 좋아보이죠? 예, 아니요... 더 &quot;올바른&quot; 솔루션이 있습니다. 구성 요소를 추가하고 3으로 나누는 대신 각 구성 요소에 흑백 표준 NTSC 값을 곱하기 때문입니다. 수정된 프래그먼트 셰이더 코드는 다음과 같습니다.</p><p class="code">// Black and white fragment shader<br />
      varying vec2 v_vTexcoord;<br />
      <br />
      void main()<br />
      {<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          float gray = dot(texColor.rgb, vec3(0.299, 0.587, 0.114));<br />
          gl_FragColor = vec4(gray, gray, gray, texColor.a);<br />
      }
    </p><p class="dropspot"> 내적을 각 구성 요소를 곱하기 위한 약어로 사용합니다. <span class="inline">texColor</span> 올바른 무게로 만든 다음 함께 추가합니다. 내적에 익숙하지 않은 경우 본질적으로 다음과 같습니다.</p><p class="code">float gray = (texColor.r * 0.299) + (texColor.g * 0.587) + (texColor.b * 0.114);</p><p class="dropspot"> 결국, 그것은 매우 유사해 보이지만 기술적으로 더 정확합니다.</p><p class="dropspot"><img alt="Corrected Black And White Shader" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_BlackAndWhite_Improved.gif" /></p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">레인보우 셰이더</a></p><div class="droptext" data-targetname="drop-down2"><p class="dropspot"> 마지막 셰이더 예제는 재미있는 예제이며 텍스트, 버튼 및 기타 항목에 생명을 불어넣는 데 사용할 수 있습니다. 이 셰이더는 사용자 정의가 가능하기 때문에 간단하게 시작하여 점차적으로 기능을 추가할 것입니다. 이 부분에 대해 다룰 내용이 상당히 많으므로 약간 길을 잃거나 혼란스럽다면 뒤로 돌아가서 위의 섹션 중 일부를 다시 읽으십시오.</p><p class="dropspot"> 가장 먼저 할 일은 픽셀의 수평 위치에 따라 모든 색조로 픽셀을 색칠하는 것입니다. 이를 수행하는 방법은 x 위치를 색조로 설정한 다음 HSV(색조, 채도, 밝기) 형식에서 RGB(빨간색, 녹색 및 파란색) 형식으로 변환하는 것입니다. 이를 위해 HSV 값을 취하고 RGB 벡터를 반환하는 프래그먼트 셰이더에 도우미 함수를 작성해야 합니다. 우리는 이것을 할 필요없이 단일 함수를 사용할 것입니다. <span class="inline">if</span> 셰이더 코드에서 조건문을 사용하면 셰이더가 <em>매우</em> 느려지므로 피해야 합니다.</p><p class="dropspot"> 다음은 이 단계에서 셰이더의 모습입니다.</p><p class="code">// Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      vec3 hsv2rgb(vec3 c) <br />
      {<br />
          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br />
          vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br />
          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br />
      }<br />
      <br />
      void main()<br />
      {<br />
          vec3 col = vec3(v_vTexcoord.x, 1.0, 1.0);<br />
          float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br />
          gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br />
      }
    </p><p class="dropspot"> 여기에서는 이전 예제보다 더 많은 일이 진행되고 있지만 대부분은 이제 당신에게 상당히 분명할 것입니다. 먼저 우리의 <span class="inline">hsv2rgb</span> 소요되는 기능 <span class="inline">vec3</span> HSV 색상으로 다른 색상을 반환합니다. <span class="inline">vec3</span> 우리의 RGB 변환과 함께. 기본 기능에서 HSV 색상을 생성하는 것으로 시작합니다. 여기서 색조는 x 위치이며 채도와 밝기는 일단 1.0으로 둡니다. 그런 다음 텍스처에서 알파를 가져와 전체 스프라이트 사각형이 아니라 스프라이트 캐릭터만 색칠하도록 합니다(위의 색상 오버레이 예제에서 한 것처럼). 마지막으로 Fragment 색상을 알파와 함께 RGB로 변환된 HSV 색상에 정점 색상을 곱한 값으로 설정합니다(항상 이렇게 하는 것이 좋습니다).</p><p class="dropspot"> 우리의 그리기 코드는 현재로서는 간단합니다.</p><p class="code">// Draw Event<br />
      shader_set(shdrRainbow);<br />
      draw_self();<br />
      shader_reset();</p><p class="dropspot"> 우리가 무엇을 얻었는지 확인해 봅시다:</p><p class="dropspot"><img alt="Initial Rainbow Shader" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Rainbow_Overlay.gif" /> 우리가 원하는 것에 가깝지만 문제가 있습니다. 애니메이션의 모든 프레임에서 한 번에 모든 색상을 볼 수 없고 색상이 무작위로 변경되는 것처럼 보입니다. 그 이유는 우리가 다음과 같이 가정했기 때문입니다. <span class="inline">v_vTexcoord</span> 왼쪽 위 모서리(0,0)에서 시작하여 오른쪽 아래 모서리(1,1)로 끝나는 스프라이트의 좌표를 주었습니다. 이는 셰이더의 표준입니다. 그러나 최적화를 위해 GameMaker는 <a href="../Settings/Texture_Information/Texture_Pages.htm">텍스처 페이지</a> 라고 하는 부분에 들어갈 수 있는 만큼 많은 텍스처를 채우므로 텍스처가 실제로 보이는 방식은 다음과 같습니다.</p><p class="dropspot"><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Texture.png" /> 위에서 설명했듯이, <span class="inline">v_vTexcoord</span> 이 전체 텍스처 페이지 내에서 스프라이트의 절대 좌표를 제공하지만 우리가 원하는 것은 현재 스프라이트만 포함하는 0.0에서 1.0 사이의 값입니다. 이 프로세스를 <strong>정규화</strong> (값을 가져와 0~1 범위로 변환)라고 합니다. 수평 값을 정규화하려면 위 그림에서 x0과 x1의 값을 알아야 합니다. 운 좋게도 GameMaker에는 텍스처 페이지 내에서 스프라이트의 모든 모서리 위치를 알려주는 기능이 있습니다. 먼저 이벤트 생성으로 이동하여 이 데이터를 셰이더에 전달할 유니폼을 생성해야 합니다.</p><p class="code">// Create Event<br />
      _uniUV = shader_get_uniform(shdrRainbow, &quot;u_uv&quot;);</p><p class="dropspot"> 그리고 그리기 이벤트를 수정하여 값을 가져온 다음 셰이더에 전달합니다.</p><p class="code">// Draw Event<br />
      shader_set(shdrRainbow);<br />
      var uv = sprite_get_uvs(sprite_index, image_index);<br />
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br />
      draw_self();<br />
      shader_reset();</p><p class="dropspot"> 함수 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a> 스프라이트와 인덱스를 사용하고 각 모서리의 좌표, 최적화를 위해 자른 픽셀 수 등과 같은 수많은 정보가 포함된 배열을 반환합니다. 이 값 중 왼쪽 및 오른쪽 좌표에 관심이 있습니다. 에 저장되어 있는 스프라이트의 <span class="inline">uv[0]</span> 그리고 <span class="inline">uv[2]</span> 각기. 프래그먼트 셰이더에서 이제 이 값을 사용하여 다음과 같이 정규화된 수평 위치를 계산합니다.</p><p class="code">// Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      uniform vec2 u_uv;<br />
      <br />
      vec3 hsv2rgb(vec3 c) <br />
      {<br />
          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br />
          vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br />
          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br />
      }<br />
      <br />
      void main()<br />
      {<br />
          float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br />
          vec3 col = vec3(pos, 1.0, 1.0);<br />
          float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br />
          gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br />
      }
    </p><p class="dropspot"> 여기에서 Create Event에서 사용한 것과 동일한 이름을 가진 파일 상단에 uniform 변수를 추가합니다. 다음으로 현재를 변환하여 정규화된 수평 위치를 계산합니다. <span class="inline">x</span> 원점에 대한 좌표( <span class="inline">v_vTexcoord.x - u_uv[0]</span> ) 그런 다음 스프라이트의 너비로 나누어 0에서 1까지의 범위를 만듭니다(<span class="inline">u_uv[1] - u_uv[0]</span> ).</p><p class="dropspot"> 결과는 다음과 같습니다.</p><p class="dropspot"><img alt="Rainbow Overlay Shader Improved" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Rainbow_Overlay_Improved.gif" /> 우리는 거기에 갈! 이것이 바로 우리가 원했던 것입니다. 우리는 스프라이트 안에 있는 스펙트럼의 모든 색상을 볼 수 있습니다.</p><p class="dropspot"> 당신은 그것에 만족할 수도 있지만, 우리는 이 셰이더로 좀 더 즐겁게 보낼 수 있습니다. 움직임을 생성하기 위해 시간을 기준으로 색상에 오프셋을 추가하면 어떻게 될까요? 이렇게 하려면 <strong>속도</strong> 와 <strong>시간</strong> 에 대한 두 개의 추가 변수가 필요합니다. 또한 새 변수 각각에 대해 하나씩 두 개의 유니폼이 더 필요하므로 Create Event가 다음과 같이 됩니다.</p><p class="code">// Create Event<br />
      _uniUV    = shader_get_uniform(shdrRainbow, &quot;u_uv&quot;);<br />
      _uniTime  = shader_get_uniform(shdrRainbow, &quot;u_time&quot;);<br />
      _uniSpeed = shader_get_uniform(shdrRainbow, &quot;u_speed&quot;);<br />
      _time  = 0;<br />
      _speed = 1.0;</p><p class="dropspot"> 또한 매 프레임 시간을 늘려야 하므로 단계 이벤트에서 다음을 추가합니다.</p><p class="code">// Step Event<br />
      _time += 1 / room_speed;</p><p class="dropspot"> 이제 이 유니폼을 셰이더로 보내기 위해 그리기 이벤트로 이동해 보겠습니다.</p><p class="code">// Draw Event<br />
      shader_set(shdrRainbow);<br />
      var uv = sprite_get_uvs(sprite_index, image_index);<br />
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br />
      shader_set_uniform_f(_uniSpeed, _speed);<br />
      shader_set_uniform_f(_uniTime, _time);<br />
      draw_self();<br />
      shader_reset();</p><p class="dropspot"> 마지막으로 이제 이 변수를 실제로 사용하기 위해 셰이더로 돌아가겠습니다. 우리가 할 일은 속도에 시간을 곱하고 다음과 같이 위치에 추가하는 것입니다.</p><p class="code">// Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      uniform vec2 u_uv;<br />
      uniform float u_speed;<br />
      uniform float u_time;<br />
      <br />
      vec3 hsv2rgb(vec3 c) <br />
      {<br />
          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br />
        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br />
          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br />
      }<br />
      <br />
      void main()<br />
      {<br />
          float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br />
          vec3 col = vec3((u_time * u_speed) + pos, 1.0, 1.0);<br />
          float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br />
          gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br />
      }
    </p><p class="dropspot"> 모든 작업을 올바르게 수행했다면 다음과 같이 표시되어야 합니다.</p><p class="dropspot"><img alt="Rainbow Shader Overlay Moving With Time" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Rainbow_Overlay_Final.gif" /> 이 셰이더를 완성하기 위해 유니폼을 몇 개 더 추가하여 더욱 커스터마이징할 것입니다. 처음 두 가지는 채도와 밝기를 제어하는 것입니다. 다음에 &quot;섹션&quot;이라고 부를 것이며 그 기능은 사용자가 0과 1 사이의 숫자를 전달하여 한 번에 전체 스펙트럼의 몇 퍼센트를 볼 수 있는지 결정할 수 있도록 하는 것입니다. 마지막으로 &quot;mix&quot;라는 변수를 추가합니다. 이 변수는 셰이더 색상을 원본 텍스처 색상과 얼마나 혼합할지 지정합니다(1.0은 모두 무지개, 0.0은 전체 텍스처). 항상 그렇듯이 Create Event에 변수를 추가하는 것으로 시작하겠습니다.</p><p class="code">// Create Event<br />
      _uniUV         = shader_get_uniform(shdrRainbow, &quot;u_uv&quot;);<br />
      _uniTime       = shader_get_uniform(shdrRainbow, &quot;u_time&quot;);<br />
      _uniSpeed      = shader_get_uniform(shdrRainbow, &quot;u_speed&quot;);<br />
      _uniSection    = shader_get_uniform(shdrRainbow, &quot;u_section&quot;);<br />
      _uniSaturation = shader_get_uniform(shdrRainbow, &quot;u_saturation&quot;); <br />
      _uniBrightness = shader_get_uniform(shdrRainbow, &quot;u_brightness&quot;);<br />
      _uniMix        = shader_get_uniform(shdrRainbow, &quot;u_mix&quot;);<br />
      <br />
      _time  = 0;<br />
      _speed = 1.0;<br />
      _section = 0.5;<br />
      _saturation = 0.7;<br />
      _brightness = 0.8;<br />
      _mix = 0.5;
    </p><p class="dropspot"> 추첨 이벤트는 다음과 같이 유니폼을 포함하도록 변경됩니다.</p><p class="code">// Draw Event<br />
      shader_set(shdrRainbow);<br />
      var uv = sprite_get_uvs(sprite_index, image_index);<br />
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br />
      shader_set_uniform_f(_uniSpeed, _speed);<br />
      shader_set_uniform_f(_uniTime, _time);<br />
      shader_set_uniform_f(_uniSaturation, _saturation);<br />
      shader_set_uniform_f(_uniBrightness, _brightness);<br />
      shader_set_uniform_f(_uniSection, _section);<br />
      shader_set_uniform_f(_uniMix, _mix);<br />
      draw_self();<br />
      shader_reset();</p><p class="dropspot"> 셰이더의 경우 색상에 채도와 밝기를 전달해야 하며, 이는 도우미 함수에 의해 생성된 색상에 영향을 미칩니다. 범위를 줄이려면 섹션에 우리의 위치를 곱해야 합니다. 또한 전체 텍스처 색상을 가져오므로 텍스처 색상을 색상의 RGB 변환과 혼합하여 최종 색상을 계산할 수 있습니다. mix 함수의 마지막 매개변수는 추가하려는 두 번째 색상의 양을 결정합니다. 이것은 우리의 최종 셰이더 코드입니다:</p><p class="code">// Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      uniform vec2 u_uv;<br />
      uniform float u_speed;<br />
      uniform float u_time;<br />
      uniform float u_saturation;<br />
      uniform float u_brightness;<br />
      uniform float u_section;<br />
      Uniform float u_mix;<br />
      <br />
      vec3 hsv2rgb(vec3 c) <br />
      {<br />
          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br />
          vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br />
          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br />
      }<br />
      <br />
      void main()<br />
      {<br />
          float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          <br />
          vec3 col = vec3(u_section * ((u_time * u_speed) + pos), u_saturation, u_brightness);<br />
        vec4 finalCol = mix(texColor, vec4(hsv2rgb(col), texColor.a), u_mix);<br />
          <br />
          gl_FragColor = v_vColour * finalCol;<br />
      }
    </p><p class="dropspot"> 그리고 우리의 최종 결과는 이것입니다!</p><p class="dropspot"><img alt="Rainbow Shader Final" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Rainbow_Final.gif" /></p><p class="dropspot"></p></div><p></p><p> 이것이 이 짧은 가이드의 끝이며 이제 셰이더가 작동하는 방식과 셰이더를 사용할 수 있는 일부 용도에 대해 더 잘 이해해야 합니다. 이 가이드에 따라 생성한 셰이더를 사용하여 시간을 내어 다른 작업을 시도해 보십시오. 블러 셰이더 또는 게임보이 스타일의 흑백 화면을 만드는 셰이더를 만드는 것은 어떻습니까? - 셰이더는 게임에 시각적 복잡성과 스타일을 추가할 수 있는 매우 강력한 도구이기 때문입니다.</p><p class="note"> 이 안내서를 복제할 수 있도록 허락해 주신 <a href="https://twitter.com/AleHitti">Alejandro Hitti</a> 와 <strong>Amazon</strong> 에 감사드립니다. <a href="https://developer.amazon.com/es/blogs/appstore/post/acefafad-29ba-4f31-8dae-00805fda3f58/intro-to-shaders-and-surfaces-with-gamemaker-studio-2">Amazon 개발자 블로그</a> 에서 원본 버전을 찾을 수 있습니다.</p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="Additional_Information.htm">추가 정보</a></div><div style="float:right"> 다음: <a href="Guide_To_Primitives_And_Vertex_Building.htm">프리미티브 및 버텍스 빌딩 가이드</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
Using Shaders
Shader Guide
Guide To Using Shaders
-->
  <!-- TAGS
using_shaders
-->
</body>
</html>