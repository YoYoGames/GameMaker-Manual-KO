<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>입자 사용 가이드</title>
    <meta name="generator" content="Adobe RoboHelp 2020"/>
    <link rel="stylesheet" href="../assets/css/default.css" type="text/css"/>
    <script src="../assets/scripts/main_script.js"></script>
    <meta name="rh-authors" content="Mark Alexander"/>
    <meta name="topic-comment" content="파티클을 설정하고 사용하는 방법을 설명하는 페이지"/>
    <meta name="rh-index-keywords" content="입자 사용 가이드"/>
    <meta name="search-keywords" content="입자,입자 가이드,입자 설정"/>
  </head>
  <body><!--<div class="body-scroll" style="top: 150px;">--><h1> 입자 사용 가이드</h1><p> 이 가이드는 <strong>파티클</strong> 을 사용하고 만드는 방법을 이해하려는 사람들을 위한 것입니다. 이 페이지에서는 파티클에 대한 <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">GameMaker 언어 기능</a> 과 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Particle_Actions.htm">GML 시각적 작업</a> 을 모두 다루므로 이전에 파티클을 사용한 적이 없다면 이 가이드가 매우 유용하고 재미있게 만들 수 있으므로 시작하는 데 도움이 되길 바랍니다.</p><p> 더 진행하기 전에 입자가 실제로 무엇인지 설명해야 합니다... 기본적으로 입자는 <strong>입자 시스템</strong> 에 의해 정의되는 특정 속성을 가진 그래픽 리소스입니다. 이러한 속성은 <em>개별</em> 입자에 대해 직접 조작할 수 없지만 속한 시스템을 정의하는 데 사용되는 코드 또는 작업을 통해 집합적으로 변경됩니다. 인스턴스를 사용하는 CPU 오버헤드가 없는 게임에서 아름답고 화려한 효과 또는 미묘하고 신중한 효과를 만드는 데 매우 유용합니다.</p><p> 입자 시스템에 대해 언급했으므로 계속하기 전에 이것이 무엇인지 설명하겠습니다. 파티클 시스템을 사용할 준비가 된 파티클을 보관하는 데 사용할 컨테이너와 같이 생각하십시오. 코드나 작업을 사용하여 입자의 시각적 측면을 정의한 다음 나중에 필요할 때 언제 어디서나 사용할 수 있도록 &quot;컨테이너&quot;(입자 시스템)에 배치됩니다.</p><p> 시스템을 설정하고 파티클을 생성하기 전에 몇 가지 사항을 아는 것이 중요합니다... 먼저 대부분의 파티클 시스템 코드는 <strong>게임에서 한 번만 호출</strong> 되며 일반적으로 첫 번째 방이나 레벨에 있는 일부 유형의 컨트롤러 개체에서 호출됩니다. - 항상 그런 것은 아니지만, 파티클을 사용하는 가장 일반적인 방법이므로 간단하게 하기 위해 이 시나리오를 다음 간단한 가이드에 사용할 것입니다. 파티클 시스템은 한 번 생성되면 메모리에 남아 언제든지 사용할 수 있기 때문에 이렇게 하는 것입니다. 따라서 두 번 이상 생성하면 메모리 사용량이 빠르게 증가하고 심각한 지연이 발생할 수 있으며 잠재적으로 게임 충돌. 이 가이드의 단순성을 위해 게임의 모든 인스턴스에서 언제든지 사용할 수 있는 <strong>전역</strong> 입자 시스템을 만듭니다.</p><p></p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">파티클 시스템 만들기</a></p><div class="droptext" data-targetname="drop-down"><p class="dropspot"> 시작하려면 입자 시스템을 정의하고 사용할 수 있도록 이름을 지정해야 합니다. 이것은 모든 개체가 사용할 수 있는 전역 시스템이 될 것이기 때문에 컨트롤러 개체 또는 게임 시작 시 실행되는 초기화 기능에서 이 작업을 수행합니다. GML은 다음과 같습니다.</p><p class="code">global.P_System = part_system_create_layer(&quot;Instance_Layer&quot;, false);</p><p class="dropspot"> 그리고 GML Visual을 사용하여:</p><p class="dropspot"><img alt="Create Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CreateSystem.png"/> 제공된 레이어 이름은 시스템이 사용될 공간의 유효한 레이어여야 합니다. 그렇지 않으면 파티클이 표시되지 않습니다. 또한 &quot;지속적&quot; 플래그(코드 및 GML Visual 모두에서)를 false로 설정했습니다. 영구 입자 시스템은 각 방에 대해 이를 파괴하고 다시 만들 필요 없이 방 전체에 &quot;지속&quot;되는 시스템입니다. 그러나 이 가이드에서는 간단하게 유지하기 위해 지속성을 사용하지 않을 것입니다.</p><p class="dropspot"> 이것이 시스템이 생성된 것입니다. 그러나 입자는 어떻습니까? 우리는 그것들도 정의해야 합니다. 그렇지 않으면 시스템이 쓸모없고 아무 것도 하지 않습니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">입자 유형 정의</a></p><div class="droptext" data-targetname="drop-down1"><p class="dropspot"> 시스템에서 입자를 사용하려면 먼저 일반 속성을 정의해야 합니다. 이는 개체 속성과 비슷하지만 개별 입자에만 <em>일반적인</em> 방식으로 적용됩니다. 이것이 의미하는 바는 입자에 최소 이동 속도를 1로 지정하고 최대 이동 속도를 2로 지정하면 시스템에서 생성된 모든 입자는 단계당 1~2픽셀 사이의 임의 속도를 가지며 전체적으로 평균 속도 1.5. 시스템을 만드는 데 사용한 동일한 개체에서 다음 GML을 사용하여 시스템에 첫 번째 입자의 이름을 지정하고 추가해야 합니다.</p><p class="code">global.Particle1 = part_type_create();</p><p class="dropspot"> 그리고 GML Visual을 사용하는 분들을 위해:</p><p class="dropspot"><img alt="Create Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Type.png"/> GML Visual을 사용하여 <strong>혼합</strong> 옵션도 선택합니다. 이것은 우리가 조금 더 아래에서 논의할 입자에 대한 <strong>첨가제 혼합</strong> 을 가능하게 합니다.</p><p class="dropspot"> 이제 시스템과 입자를 넣을 수 있지만 아직 뛰어난 효과를 만들 준비가 되지 않았습니다! 여전히 파티클의 속성을 정의해야 합니다. 예: 모양 - 속도, 회전, 알파 등... 파티클 효과를 정의하는 데 사용할 수 있는 세부 정보가 많이 있으므로 아래는 개요입니다. 가장 중요한 설정과 그 모든 것을 사용하는 코드 스니펫 및 GML Visual:</p><ul class="dropspotlist"><li class="dropspot"> <strong>shape</strong>: 파티클의 모양은 사용할 내장 스프라이트이며 기본값은 상수입니다. <span class="inline">pt_shape_pixel</span>. 필요한 경우 사용자 정의 입자를 추가하는 기능도 있습니다.<a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm"><span class="inline">part_type_sprite()</span></a> - 또는 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Sprite.htm">Set Particle Sprite</a> 작업.</li><li class="dropspot"> <strong>크기</strong>: 입자 유형에 대한 크기 매개변수를 설정합니다. 각 단계에서 최소 시작 크기, 최대 시작 크기 및 크기 증가를 지정합니다(크기 감소에는 음수 사용). 이것은 기본 이미지 x/y 스케일을 동일하게 수정하는 스칼라 값입니다.</li><li class="dropspot"> <strong>color</strong>: 단일 색상이 사용되는 경우 입자의 색상을 설정합니다. 2개 또는 3개의 색상이 제공되면 색상이 혼합되어 수명 동안 하나에서 다른 색상으로 혼합됩니다.</li><li class="dropspot"> <strong>alpha</strong>: 입자의 알파 값을 0과 1 사이의 값으로 설정합니다. 단일 값이 전달되면 이 값이 입자의 알파가 되고, 두 개 또는 세 개의 값이 전달되면 알파가 이 값 사이에서 혼합됩니다. 입자의 수명.</li><li class="dropspot"> <strong>속도</strong>: 입자 유형에 대한 속도 속성을 설정합니다. 최소 및 최대 속도를 지정하고 파티클이 생성될 때 주어진 경계 사이의 임의 값이 선택됩니다. 각 단계에서 속도 증가를 나타낼 수 있으며 음수를 사용하여 입자를 느리게 할 수도 있습니다(속도는 0보다 작아지지 않음).</li><li class="dropspot"> <strong>방향</strong>: 입자 유형에 대한 방향 속성을 설정합니다. 다시 방향 범위를 지정합니다(반시계 방향 각도로 - 0은 오른쪽으로의 움직임을 나타내고, 90은 위쪽으로의 움직임을 나타냄 등...). 예를 들어 입자가 임의의 방향으로 움직이도록 하려면 최소 0과 최대 360을 값으로 선택합니다. 각 단계에 대한 방향 증가도 지정할 수 있습니다(음수일 수도 있음).</li><li class="dropspot"> <strong>방향</strong>: 입자 유형에 대한 방향 각도 속성을 설정합니다. 최소 각도, 최대 각도 및 각 단계의 증가를 지정합니다. 또한 주어진 각도가 현재 모션 방향을 기준으로 해야 하는지 아니면 절대적인 방향이어야 하는지를 나타낼 수 있습니다. 예를 들어 모든 값을 0으로 설정하지만 true를 기준으로 하면 입자 방향이 입자의 경로를 정확하게 따를 것입니다.</li><li class="dropspot"> <strong>혼합</strong>: 입자 유형에 대해 <strong>추가</strong> 혼합 또는 <strong>일반</strong> 혼합을 사용할지 여부를 설정합니다. 이것은 GML을 사용할 때 함수에서 설정되고 GML Visual을 사용할 때 입자 초기화의 일부로 설정됩니다. 첨가제 혼합은 입자가 <span class="inline">bm_add</span> 블렌드 모드, 겹치는 위치에 &quot;빛나는&quot; 모양을 제공하고 아래에 그려진 모든 것과 블렌딩(스프라이트, 배경, 타일 등...) - 불 및 마법 효과(예:)에 매우 유용하지만 왼쪽이 가장 좋습니다. 연기 같은 것을 위해 떨어져. 차이점을 확인하기 위해 실험하십시오! 이 옵션을 활성화하면 파티클이 생성될 때 텍스처 일괄 처리가 중단되므로 이를 그리는 데 단계당 더 많은 일괄 처리가 필요합니다. 이는 특히 모바일에서 성능에 영향을 미칠 수 있으므로 고려해야 할 사항입니다.</li><li class="dropspot"> <strong>life</strong>: 입자 유형에 대한 단계(게임 프레임)로 수명 범위를 설정합니다. 이전 설정과 마찬가지로 최소값과 최대값이 있으며 입자는 이 값 내에서 임의의 수의 단계를 지속합니다. 따라서 수명이 30분 및 최대 30이면 입자가 정확히 30단계 동안 존재하지만 수명이 20분 및 최대 60이면 각 입자가 20에서 60 사이의 임의의 수의 단계에 대해 존재합니다.</li></ul><p class="dropspot"> 이제 파티클을 정의하는 코드를 제시하기 전에 잠시 &quot; <strong>wiggle</strong> &quot;에 대해 이야기하겠습니다... 믿거나 말거나 &quot;wiggle&quot;은 파티클 속성이며 위의 많은 설정에 대해 개별적으로 설정할 수 있습니다. 입자 기능 또는 동작에 대한 인수로 &quot;흔들림&quot;을 볼 때 1에서 20 사이의 숫자를 배치하면 입자가 속성의 최소값과 최대값 사이에서 &quot;흔들거린다&quot;(1은 a). 느린 흔들기와 20은 매우 빠릅니다. 따라서 최소 2에서 최대 5의 입자 속도와 20의 흔들림이 생성된 각 입자의 수명 동안 최소/최대 속도 사이에서 매우 빠르게 진동합니다.</p><p class="note"> <strong>참고</strong>: 여기에서 다루지 않는 다른 사소한 입자 속성도 있습니다. 가능한 한 간단하게 시작할 수 있도록 하기 위해서입니다. 입자 속성에 대한 자세한 내용은 해당 페이지를 참조하십시오.</p><p class="dropspot"> 이제 파티클을 정의하는 몇 가지 코드를 살펴보겠습니다.</p><p class="code">// This defines the particle&#39;s shape
        <br/>
        part_type_shape(global.Particle1,pt_shape_pixel);
        <br/>
        <br/>
        // This is for the size
        <br/>
        part_type_size(global.Particle1,1,1,0,2);
        <br/>
        <br/>
        // This sets its colour. There are three different codes for this
        <br/>
        part_type_color1(global.Particle1,c_white);
        <br/>
        <br/>
        // This is its alpha. There are three different codes for this
        <br/>
        part_type_alpha1(global.Particle1,1);
        <br/>
        <br/>
        // The particles speed
        <br/>
        part_type_speed(global.Particle1,0.50,2,-0.10,0);
        <br/>
        <br/>
        // The direction
        <br/>
        part_type_direction(global.Particle1,0,359,0,20);
        <br/>
        <br/>
        // This changes the rotation of the particle
        <br/>
        part_type_orientation(global.Particle1,0,0,0,0,true);
        <br/>
        <br/>
        // This is the blend mode, either additive or normal
        <br/>
        part_type_blend(global.Particle1,1);
        <br/>
        <br/>
        // This is its lifespan in steps
        <br/>
        part_type_life(global.Particle1,5,30); </p><p class="dropspot"> GML Visual에서 이와 동일한 입자 정의를 생성하려면 다음 작업이 필요합니다.</p><p class="dropspot"><img alt="Define Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Define_Particle.png"/> 그게 다야! 이제 입자를 정의했으며 사용할 준비가 되었습니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">게임 내에서 직접 파티클 생성</a></p><div class="droptext" data-targetname="drop-down2"><p class="dropspot"> 입자를 만드는 방법에는 몇 가지가 있으며 각각 장단점이 있습니다. <strong>방사체</strong> 를 사용하여 입자를 <strong>버스트</strong> 또는 <strong>스트리밍</strong> 하거나 한 지점에서 <strong>직접</strong> 입자를 만들 수 있습니다. 어떤 것을 사용하느냐는 달성하려는 것과 만들고자 하는 효과에 따라 다르지만, 입자를 직접 만드는 두 가지 중 가장 쉬운 것부터 시작하겠습니다. GML에서는 다음 함수를 사용합니다.</p><p class="code">part_particles_create(global.P_System, x, y, global.Particle1, 10);</p><p class="dropspot"> GML Visual에서는 다음과 같습니다.</p><p class="dropspot"><img alt="Create Particles At A Position" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Burst.png"/> 위의 단일 코드/액션은 글로벌 시스템에서 &quot;Particle1&quot; 유형의 지정된 x/y 좌표에 10개의 입자를 생성합니다. 단순한! 해당 코드/액션 라인의 가장 큰 장점은 소란 없이 어디서나 사용할 수 있다는 것입니다. 예를 들어 개체의 마우스에 대한 <strong>Global Left Pressed</strong> 이벤트에 배치하고 mouse_x/y 위치의 x/y 값을 변경하면 버튼을 누를 때마다 마우스 위치에 입자가 생성됩니다. 또는 로켓이 있는 경우 이를 단계 이벤트에 배치하고 모든 단계에서 연기 입자가 발생하도록 할 수 있습니다(1 또는 2가 10보다 나을 수 있음). x/y 좌표를 임의로 변경하여 영역 전체에 입자를 생성하도록 할 수도 있습니다. 예를 들면 다음과 같습니다.</p><p class="code">repeat(50)
        <br/>
        {
        <br/>
        var xx = x + 20 - random(40);
        <br/>
        var yy = y + 20 - random(40);
        <br/>
        part_particles_create(global.P_System, xx, yy, global.Particle1, 1);
        <br/>
        }</p><p class="dropspot"><img alt="Create Particles Over A Random Area" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Particles.png"/> 위의 코드는 40px 정사각형 영역 내의 임의의 위치에 50개의 입자를 생성합니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">이미터로 파티클 생성</a></p><div class="droptext" data-targetname="drop-down3"><p class="dropspot"> 파티클을 만드는 쉬운 방법을 설명했으므로 이제 <strong>이미터</strong> 를 사용하는 약간 더 복잡한 방법을 살펴보겠습니다. 에미터는 사용하기 전에 정의해야 하는 파티클 시스템의 또 다른 부분이므로 시스템 및 파티클에 대해 했던 것과 동일한 전역 에미터를 만들 것입니다. 우리는 또한 정적(움직이지 않는) 에미터를 가질지 여부와 입자를 <strong>버스트</strong> 하거나 <strong>스트리밍</strong> 할지 여부를 결정해야 하며, 에미터를 사용할 영역과 분포의 종류를 결정해야 합니다..</p><p class="dropspot"> 그게 다 무슨 뜻이야? 음, <strong>정적</strong> 에미터는 게임이 진행되는 동안 아무데도 움직이지 않을 것이기 때문에 한 번 정의하고 잊어버릴 수 있는 것입니다. 정적이지만 불덩어리는 <strong>동적</strong> 방사체가 필요하고 화면을 가로질러 이동합니다. 버스트 또는 스트리밍의 경우 버스트는 입자의 일회성 폭발인 반면 스트림은 모든 단계에서 일정한 입자 스트림입니다. 면적 및 분포의 경우 이미터를 사용하여 입자 방출 영역(사각형, 타원, 다이아몬드 또는 선일 수 있음)과 분포 곡선(가우스, 역 가우스 또는 선형)을 정의할 수 있습니다.</p><p class="dropspot"> 다음 이미지는 이미터에 사용할 수 있는 다양한 유형의 영역 모양을 보여줍니다. </p><p class="dropspot"></p><center><img alt="Rectangle Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Rectangular.gif"/><img alt="Line Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Line.gif"/></center><center><img alt="Ellipse Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Ellipse.gif"/><img alt="Diamond Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Diamond.gif"/></center><p class="dropspot"><br/> 그리고 분포 곡선(선형, 가우스 및 역 가우스)은 다음과 같습니다.</p><p><img alt="Particle distribution" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Distribution.png"/></p><p class="dropspot"> 아래는 일반적으로 파티클 시스템을 정의한 직후 컨트롤러 오브젝트의 <strong>이벤트 생성</strong> 에 들어가는 두 이미터를 정의하는 데 필요한 코드/액션의 예입니다. 하나는 정적이고 전체 방 영역에 걸쳐 입자를 스트리밍하는 반면 다른 하나는 동적이며 마우스를 따라 작은 타원에서 30단계마다 버스트합니다.</p><p></p><p class="code">global.Particle1_Emitter1 = part_emitter_create(global.P_System);
        <br/>
        global.Particle1_Emitter2 = part_emitter_create(global.P_System);
        <br/>
        <br/>
        // Set up the area that will emit particles
        <br/>
        part_emitter_region(global.P_System, global.Particle1_Emitter1, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear);
        <br/>
        part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x-10, mouse_x+10, mouse_y-10, mouse_y+10, ps_shape_ellipse, ps_distr_gaussian);
        <br/>
        <br/>
        // Set the first to stream 10 particles every step
        <br/>
        part_emitter_stream(global.P_System, global.Particle1_Emitter1, global.Particle1, 10);
        <br/>
        <br/>
        // This can now be forgotten as it will function until told to stop...
        <br/>
        // Set the alarm[0] event to burst the emitter2 particles...
        <br/>
        alarm[0] = 30; </p><p class="dropspot"><img alt="Define Particle Emitters" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Emitter.png"/> 따라서 여기서는 처음에 만든 입자 시스템에 할당된 두 개의 입자 이미터를 만듭니다. 이 에미터를 생성하는 기능/액션을 통해 방에서 파티클을 방출할 영역을 정의할 수 있을 뿐만 아니라 방출할 파티클 유형과 정의된 영역 내에서 사용할 모양 및 분포를 지정할 수 있습니다. 함수/액션은 이미터 ID 값인 숫자 값을 반환하고 이를 변수에 저장하여 추가 이미터 기능을 사용하여 해당 이미터를 대상으로 지정할 수 있습니다.</p><p class="dropspot"> 이제 파티클을 스트리밍하는 코드/GML Visual이 있지만(이 파티클은 다른 작업 없이 모든 게임 단계에서 방출됨) 특정 간격으로 파티클을 버스트하는 <strong>A</strong> <strong>larm[0]</strong> <strong>이벤트</strong> 도 추가하려고 합니다.</p><p class="code">part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x - 10, mouse_x + 10, mouse_y - 10, mouse_y + 10, ps_shape_ellipse, ps_distr_gaussian);
        <br/>
        part_emitter_burst(global.P_System, global.Particle1_Emitter2, global.Particle1, 30);
        <br/>
        alarm[0] = 30;</p><p class="dropspot"><img alt="Burst Particles From Emitter" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Set_Emitter.png"/> 파티클 버스트는 매 게임 단계마다 파티클이 일정하게 흐르는 것이 아니라 이미터에서 파티클이 일회성으로 폭발하는 것입니다.</p><p class="dropspot"> 그러나 여러 개체가 입자를 방출하도록 하려면 어떻게 해야 합니까? 전역 이미터는 한 번에 한 위치에만 있을 수 있으므로 각 개체에 <em>로컬</em> 이미터를 만들어야 합니다. 이 에미터는 여전히 전역 입자 시스템과 그 안에 있는 모든 입자를 사용하지만 모양과 크기가 다르고 개체와 함께 이동할 수 있으므로 로켓이나 총알 또는 사물에 이상적입니다. 사용할 코드는 위와 완전히 동일하지만 이미터 이름 앞에 &quot;전역&quot; 접두사가 없습니다.</p><p class="dropspot"> 그것은 처리된 입자의 생성이지만 매우 중요한 것이 한 가지 더 있습니다... 작업이 끝나면 정리합니다.</p><p class="dropspot"></p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">청소</a></p><div class="droptext" data-targetname="drop-down4"><p class="dropspot"> 처음에 언급했듯이 파티클 시스템(및 파티클, 이미터 등)은 일단 생성되면 즉시 사용할 수 있도록 메모리에 저장됩니다. 좋습니다. 하지만 게임을 다시 시작하면 어떻게 됩니까? 아니면 플레이어가 죽고 방을 다시 시작한다면? 글쎄, 게임을 올바르게 관리하지 않으면 <strong>메모리 누수</strong> 가 발생합니다. 이것은 무언가가 생성되어 메모리를 사용하지만 GameMaker가 더 이상 액세스할 수 없음을 의미하는 &quot;역참조&quot;된 경우입니다. 이런 종류의 일은 천천히 메모리를 소모하고 게임에 지연을 일으키거나 심지어 컴퓨터를 차단하여 게임이 충돌하도록 하며, 파티클 시스템을 처음 사용하는 사람들에게 매우 흔한 문제입니다.</p><p class="dropspot"> 이것을 어떻게 피합니까? 음, <span data-keyref="GameMaker Name">GameMaker</span> 에는 사용하지 않을 때 메모리에서 파티클 시스템과 해당 이미터 및 파티클을 삭제하는 GML 코드 기능과 GML 시각적 작업이 있으며 다음 코드/작업을 사용할 때 약간의 계획을 세우면 이 잠재적인 문제를 쉽게 방지할 수 있습니다.</p><p class="dropspot"> 가장 먼저 해야 할 일은 시스템을 생성할 위치와 사용 방법을 결정하는 것입니다. 첫 번째 방에 있는 개체의 <strong>게임 시작 이벤트</strong> 에서 전역 시스템을 만들 수 있지만(예: 메뉴 또는 타이틀 화면), 이는 다음을 사용하여 게임을 다시 시작하면 <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_restart.htm"><span class="inline">game_restart()</span></a> 함수가 다시 생성되어 메모리 누수가 발생합니다. 또는 방의 인스턴스에서 로컬 시스템을 만들 수 있지만 다시 한 번, 방을 나가면 시스템에 액세스할 수 없고 메모리 누수가 발생합니다. 이를 방지하려면 <a href="../The_Asset_Editors/Object_Properties/Other_Events.htm"><strong>게임 종료 이벤트</strong></a> 또는 개체의 <a href="../The_Asset_Editors/Object_Properties/Object_Events.htm"><strong>정리</strong></a> 이벤트에 다음과 같은 항목이 있어야 합니다.</p><p class="code">part_type_destroy(global.Particle1);
        <br/>
        part_emitter_destroy(global.P_System, global.Particle1_Emitter);
        <br/>
        part_emitter_destroy(global.P_System, global.Particle2_Emitter);
        <br/>
        part_system_destroy(global.P_System);</p><p class="dropspot"><img alt="Clean Up Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CleanUp.png"/> 이렇게 하면 정의된 파티클, 이미터 및 시스템이 메모리에서 제거되어 게임을 다시 시작하거나 방을 변경할 수 있습니다. 시스템을 생성하기에 가장 적합한 위치를 생각한 후 시스템을 파괴하기에 가장 적합한 위치가 어디인지 생각하십시오!</p><p class="dropspot"></p></div><p></p><p> 이제 파티클, 파티클 시스템 및 이미터에 대한 기본 사항을 알았으므로 이제 게임에 추가할 수 있습니다! 그러나 서둘러서 모든 것에 파티클 효과를 추가하기 전에 파티클은 인스턴스보다 CPU 사용량이 적지만 한 번에 수천 개의 파티클이 있는 경우 지연을 유발할 수 있으므로 모든 것에 대한 솔루션이 아니라는 점에 유의하십시오. 가장 좋은 방법은 실험하고 신중하게 사용하여 시각적으로 게임을 &quot;살짝 빼&quot;고 과도하게 하지 않고 약간 더 눈에 띄게 만드는 것입니다. </p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="Additional_Information.htm">추가 정보</a></div><div style="float:right"> 다음: <a href="Guide_To_Using_Shaders.htm">셰이더 사용 가이드</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
    </div>
    <!-- KEYWORDS
Vectors
Vector Maths
--><!-- TAGS
vector_maths
--></body>
</html>