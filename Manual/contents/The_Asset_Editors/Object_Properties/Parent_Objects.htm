<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>상위 개체</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="개체 양육을 자세히 설명하는 페이지" />
  <meta name="rh-index-keywords" content="개체 - 상위" />
  <meta name="search-keywords" content="parent,어린이,계승,객체 양육" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 상위 개체</h1><p> <span data-keyref="GameMaker Name">GameMaker</span> IDE에서 개체로 작업할 때 <strong>상위</strong> /하위 계층을 설정할 수 있습니다. 이것은 개체 편집기에서 &quot;상위&quot; 버튼을 클릭한 다음 자산 브라우저에서 편집 중인 개체의 &quot;상위&quot;가 될 다른 개체를 선택하면 됩니다.</p><p><img alt="Adding A Parent" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Parent.png" /> 따라서 게임 프로젝트의 모든 개체는 상위 개체를 가질 수 있지만 이것이 의미하는 바는 무엇입니까? 객체에 부모가 할당되면 해당 부모와 코드, 작업 및 이벤트를 공유할 수 있습니다. 이 공유를 &quot;상속&quot;이라고 하며 부모가 있는 개체를 &quot;자식&quot; 개체라고 합니다. 자식은 부모와 코드를 공유할 수 있을 뿐만 아니라 검사를 수행하고 부모 개체에 대해 코드를 실행할 수 있으며 자식 개체도 자동으로 포함하므로 많은 시간과 에너지를 절약할 수 있습니다.</p><p> 복잡하게 들린다면 상위 개체를 보는 또 다른 방법은 개체를 같은 우산 아래 함께 &quot;그룹화&quot;하고 고유한 정체성을 잃지 않고 특정 항목을 공유하도록 하는 방법입니다. 아마도 여전히 상황이 너무 명확하지 않을 수 있으므로 몇 가지 예를 들어 보겠습니다.</p><p> &quot;플레이어&quot; 개체와 4개의 다른 &quot;적&quot; 개체가 있다고 가정합니다. 이제 플레이어가 이 4개의 개체 중 하나를 만지면 플레이어가 죽기를 원합니다. 그러면 일반적으로 적 개체 각각에 대해 하나씩 4개의 서로 다른 작업 또는 코드 세트가 있는 4개의 서로 다른 충돌 이벤트가 수반됩니다. 그러나 모든 적에 대해 부모 개체를 만들면 부모 개체로만 하나의 충돌 이벤트를 만들 수 있으며 네 개의 &quot;자식&quot; 적 개체 중 어느 것이 플레이어와 접촉하든 상관없이 트리거됩니다. 편리한 물건! 실제 <span data-keyref="GameMaker Name">GameMaker</span> 개체에서 다음과 같은 것을 볼 수 있습니다.</p><p><img alt="Parenting For Collisions" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_ParentCollision.png" /> 왼쪽에는 4개의 개별 충돌 이벤트가 있고 오른쪽에는 단일 충돌 이벤트가 있습니다. &quot;부모&quot; 개체를 만들고 여기에 모든 적 개체를 할당했기 때문입니다. 상위 개체에는 이벤트나 코드가 없어도 됩니다.</p><p> 육아의 또 다른 예는 10가지 다른 모양의 개체를 만들고 모두 같은 방식으로 동작하도록 하는 게임이 있는 경우입니다. 이를 위해 하나의 상위 개체를 만들고 여기에는 필요한 이벤트에 모든 동작 작업이나 코드가 포함된 다음 작업이나 코드가 없지만 다른 스프라이트가 있는 10개의 개체를 만들고 부모 개체를 할당합니다. 이제 이러한 인스턴스를 방에 배치하면 모두 동일하게 동작하지만 부모의 이벤트를 &quot;상속&quot;하기 때문에 다르게 보입니다.</p><p> 마지막으로 양육을 사용하여 사건과 행동을 &quot;믹스 앤 매치&quot;할 수 있습니다. 마지막 예를 하나 들어 설명하겠습니다... 두 개의 몬스터를 원한다고 가정해 보겠습니다. 하나는 위아래로 움직이고 다른 하나는 왼쪽과 오른쪽으로 움직이지만 두 몬스터의 체력도 같게 하고 싶다면 플레이어와 충돌하면 플레이어를 다치게 합니다. 이 경우 움직임을 제어하는 한두 가지를 제외하고 거의 모든 이벤트가 동일한 동작을 가져야 함을 알 수 있습니다. 따라서 다시 한 개체를 다른 개체의 부모로 만들 수 있지만 이 경우에는 자식 개체에 대한 특정 이벤트도 정의합니다. 이러한 이벤트는 상위 이벤트를 &quot;재정의&quot;합니다. 즉, 하위 개체의 이벤트에 작업이 포함될 때마다 상위 이벤트에 포함된 작업 대신 이러한 이벤트가 실행됩니다. 부모 이벤트도 실행하려면 함수를 사용하여 소위 &quot;상속된&quot; 이벤트를 호출할 수 있습니다. <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a> 또는 GML 시각적 작업 <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">호출 상위 이벤트</a>.</p><p><img alt="Inheriting Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_InheritEvents.png" /> 위의 왼쪽에는 5개의 이벤트가 있는 부모 개체가 있고 오른쪽에는 &quot;자식&quot; 개체가 있습니다. 자식 개체에도 5개의 이벤트가 있지만 그 중 2개는 부모로부터 상속된 이벤트( <strong>Step</strong> 및 <strong>Draw</strong> 이벤트)를 재정의하고 나머지 3개는 부모로부터 상속된 이벤트이므로 회색으로 표시됩니다. 상속된 이벤트에는 이벤트 편집기에서 옆에 &quot;상위 재정의&quot; 아이콘도 있습니다.</p><p><img alt="Parent Override" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_ParentOverride.png" /> 클릭하면<img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png" /> 상속된 이벤트에서 코드 편집기를 열어 상속된 상위 코드를 표시하지만 상위 개체 자체에서만 편집할 수 있으므로 이 코드를 편집할 수 없습니다. 마우스 오른쪽 버튼을 클릭할 수 있습니다<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"
    /> 상위 이벤트에서 다음 옵션 메뉴를 열 수 있습니다.</p><p><img alt="Parent Event RMB Menu" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_Parent_Menu.png" /> 여기에서 두 개의 상위 이벤트 <strong>열기</strong> 를 선택하여 코드를 검사하거나 이벤트 <strong>상속</strong> 또는 이벤트 <strong>재정의</strong> 를 선택할 수 있습니다. <strong>상속</strong> 을 선택하면 코드 편집기가 함수와 함께 열립니다. <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a> 이미 추가되었습니다(또는 GML Visual을 사용하는 경우 <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">상위 이벤트 호출</a> 작업). 이 이벤트에 추가하는 모든 코드는 이제 상위 개체에 있는 코드와 함께 실행됩니다. 이벤트 <strong>재정의</strong> 를 선택하면 코드 창이 열리지만 지금은 <span class="inline">event_inherited()</span> 함수가 호출되지 않으므로 여기에 추가한 모든 항목은 상위 개체의 코드 <em>대신</em> 실행됩니다.</p><p class="note"> <strong>참고</strong>: 코드 편집기에서 마우스 오른쪽 버튼을 클릭하여 상위 개체로 빠르게 이동할 수 있습니다.<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /> 팝업 메뉴에서 <strong>개체로 이동을</strong> 선택하거나(이벤트가 재정의된 경우) <strong>상속된 이벤트 열기</strong> 를 선택하여 상위 이벤트 코드가 있는 코드 편집기로 직접 이동할 수 있습니다.</p><p> 코드에서 상위 개체를 대상으로 할 때마다 코드는 상위 개체의 &quot;자식&quot;에도 적용됩니다. 이것은 작업에서 특정 개체의 인스턴스에 작업을 적용해야 한다고 표시하고 코드에서는 다음을 사용할 때 발생합니다. <a href="../../GameMaker_Language/GML_Overview/Language_Features/with.htm"><span class="inline">with()</span></a> 성명. 다음과 같은 코드 함수를 호출할 때도 이와 같이 작동합니다. <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm"><span class="inline">instance_position()</span></a>, <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>, 등... 여기서 - 상위 개체를 제공하는 경우 - 상위 <em>및</em> 하위 인스턴스의 모든 인스턴스가 검사에 포함됩니다. 마지막으로, 위의 몬스터 예와 같이 다른 개체의 변수를 참조할 때도 육아가 작동합니다. 적 1의 속도를 10으로 설정하면 적 1의 자식 개체이므로 적 2의 속도도 10이 됩니다.</p><p> 일반적으로 대부분의 경우 하나의 기본 상위 개체를 만들고 이 기본 개체에 모든 기본 동작을 포함하지만 게임에서 해당 인스턴스를 사용하지 않는 것이 좋은 방법으로 간주됩니다. 오히려 모든 자식 객체를 사용하고 위에서 설명한 것과 같은 상황에서만 부모를 사용하십시오. 충돌, 변수 참조 등... 또한 부모도 부모를 가질 수 있음을 알아야 합니다! 분명히 &quot;부모 1은 부모 2의 자식이고 부모 1의 자식은 부모 1&quot;이라는 주기를 만들 수는 없지만 &quot;부모3은 부모2의 <em>자식</em> 이고 부모1의 <em>자식</em> &quot;인 &quot;개체 <em>계층</em> &quot;을 만들 수는 있습니다. 이것은 게임을 구조화하는 데 매우 유용하며 이 메커니즘을 사용하는 방법을 배우는 것이 좋습니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Objects.htm">개체 편집기</a></div><div style="float:right"> 다음: <a href="Physics_Objects.htm">물리학 개체</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
Parent Objects
Child Objects
parent
child
inheritance
-->
  <!-- TAGS
parent_objects
-->
</body>
</html>