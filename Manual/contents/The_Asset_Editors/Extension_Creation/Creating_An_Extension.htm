<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>확장 만들기</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="일반 확장을 만드는 방법을 자세히 설명하는 페이지" />
  <meta name="rh-index-keywords" content="확장 - 확장 만들기" />
  <meta name="search-keywords" content="확장 만들기" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 확장 만들기</h1><p> 확장 프로그램을 만들려면 먼저 마우스 오른쪽 버튼을 클릭해야 합니다.<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /> <a href="../../Introduction/The_Asset_Browser.htm">자산 브라우저</a> 내 아무 곳이나 선택하고 <strong>만들기 -&gt; 확장</strong> 을 선택합니다. 이렇게 하면 작업 공간에서 새로 생성된 자산에 대한 확장 속성이 열립니다.</p><p><img alt="Extension Properties" class="center" height="519" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" width="486" /> 이 항목이 표시되지 않으면 자산 브라우저에서 확장 자산을 두 번 클릭하여 속성 창을 열거나 이미 열려 있을 때 해당 자산에 집중할 수 있습니다.</p><p> 이제 필요한 파일과 기능을 추가할 준비가 되었으며 여기에 확장자 이름을 지정할 수도 있습니다(문자/숫자만 사용하고 밑줄 &quot;_&quot;을 제외한 특수 기호는 사용하지 않는 일반적인 규칙에 따름). 원하는 경우 확장의 버전 번호를 설정할 수도 있습니다.</p><p> &quot;복사 대상&quot;에서 이 확장을 내보낼 플랫폼을 선택할 수 있습니다. 간단한 GML 확장의 경우 모든 플랫폼에서 실행되므로 이에 대해 걱정할 필요가 없습니다. 그러나 플랫폼별 확장(예: Android용)을 생성하는 경우 해당 확장이 다른 플랫폼으로 내보내 <em>지지 않도록</em> 해야 합니다. -호환되는 플랫폼(iOS, 콘솔 등).</p><h2> 자리 표시자 파일</h2><p> 새 확장자에 파일을 추가하려면 메뉴 아이콘을 클릭해야 합니다.<img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" /> 자리 표시자 파일(&quot;자리 표시자 추가&quot;)을 선택하거나 대상 플랫폼에 필요한 실제 파일을 가져옵니다(&quot;파일 추가&quot;).</p><p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" /></p><p> &quot;일반&quot; 자리 표시자는 특정 플랫폼에서 요구하는 것을 제외하고 모든 유형이 될 수 있는 파일입니다(따라서 <span class="inline">DLL</span> 또는 <span class="inline">SO </span> 예를 들어, 파일), 주어진 확장으로 함수 또는 상수 집합을 연결하는 &quot;링커&quot; 파일을 제외하고는 사용되지 않습니다(일반적으로 섹션에서 설명하는 iOS 및 Android 확장에만 사용됩니다. 해당 대상에 대해서는 아래 참조). 보다 구체적인 사용을 위해 &quot;GML&quot; 및 &quot;JS&quot; 자리 표시자 파일을 추가할 수도 있습니다.</p><h2> 파일 추가</h2><p> 일반적으로 iOS 및 Android용으로 빌드하지 않는 한 자리 표시자를 사용할 필요가 없으므로 &quot;파일 추가&quot; 옵션을 선택하여 대상 플랫폼에 따라 다음 파일 중 하나를 추가합니다.</p><ul class="colour"><li class="dropspot"><span class="inline">.gml</span>: GameMaker Language로만 제작된 파일로 모든 플랫폼과 호환됩니다.</li><li class="dropspot"><span class="inline">.js</span>: 이것은 JavaScript 확장 형식이며 HTML5 대상과만 호환됩니다.</li><li class="dropspot"><span class="inline">.dll</span>: 이것은 동적 연결 라이브러리 확장 형식이며 Windows, UWP 및 Xbox 대상과만 호환됩니다(각 대상에는 서로 다른 <span class="inline">*.dll</span> 사양과 호환되는 파일).</li><li class="dropspot"><span class="inline">.dylib</span>: 이것은 DLL에 해당하는 Mac이며 Mac 대상(iOS 아님)과만 호환됩니다.</li><li class="dropspot"><span class="inline">.so</span>: 이것은 DLL에 해당하는 Linux이며 Ubuntu(Linux) 대상과만 호환됩니다.</li><li class="dropspot"><span class="inline">.prx</span>: PlayStation 대상에 기능을 추가하기 위한 파일 형식입니다(대상마다 다른 <span class="inline">*.prx</span> 사양과 호환되는 파일).</li></ul><p> 설정이 약간 다르기 때문에 <strong>Android</strong> 또는 <strong>iOS용</strong> 파일 형식이 없음을 알 수 있습니다. 더 아래에서 설정 방법에 대한 설명을 찾을 수 있지만 먼저 모든 대상 플랫폼에 대해 프로세스가 동일하기 때문에 대상 플랫폼에 대한 일반 GML 확장을 만드는 방법을 살펴보겠습니다.</p><h2> GML 확장 만들기</h2><p> 시작하려면 사용할 파일을 만들어야 합니다. GML 확장자의 경우 이것은 텍스트 파일입니다( <span class="inline">.gml</span> 확장자) 다음과 같은 형식이 됩니다.</p><p class="code">#define c_alice_blue<br />
    return make_color_rgb(240,248,255);<br />
    <br />
    <br />
    #define instance_create_colour<br />
    var i = instance_create_layer(argument0, argument1, argument2, argument3);<br />
    with (i)<br />
    {<br />
        image_blend = argument3;<br />
    }<br />
    return i;
  </p><p> 보시다시피 각 섹션은 다음으로 시작합니다. <span class="inline">#define</span> 위의 예에서 두 함수를 정의하는 데 사용되는 호출입니다. 정의된 함수의 각 부분을 살펴보겠습니다.</p><ul class="colour"><li> 그만큼 <span class="inline">#define</span> 문은 주어진 이름으로 새 함수를 정의하는 데 사용됩니다.</li><li> 그 명령문 뒤에는 다음을 사용하는 함수 코드가 옵니다. <span class="inline">argument0</span>, <span class="inline">argument1</span> 등. 함수가 호출될 때 함수에 전달된 인수에 액세스하기 위한 변수;</li><li> 마지막에는 확장에서 함수가 호출된 GML 코드로 데이터를 반환하는 데 사용되는 <a href="../../GameMaker_Language/GML_Overview/Language_Features/return.htm"><span class="notranslate">return</span></a> 문이 있습니다.</li></ul><p> 당신이 쓰고 있었다면 <span class="inline">DLL</span> 또는 JavaScript 확장명을 사용하는 경우 프로세스는 유사하지만 확장명의 파일 형식에 대한 올바른 언어입니다.</p><p> 이 작업을 마치면 &quot;파일 추가&quot; 옵션을 사용하여 파일을 확장에 추가해야 파일 속성의 확장 속성에 새 창을 연결할 수 있습니다.</p><p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050" /></p><p> 여기에서 확장에 대한 대상 플랫폼을 선택하고(GML의 경우 모두 선택) 확장 파일의 이름을 바꾸고 몇 가지 다른 세부 사항을 설정합니다. 이에 대해서는 잠시 후에 다루겠습니다.</p><p class="note"> <strong>참고</strong>: 확장 프로그램에 파일을 추가하면 파일이 프로젝트 디렉토리에 복사됩니다. 즉, 게임 내에서 볼 수 있으려면 해당 복사본을 추가로 변경해야 합니다. 자산 브라우저에서 확장을 마우스 오른쪽 버튼으로 클릭하고 &quot;탐색기에서 열기&quot;를 선택하여 사본을 찾을 수 있습니다.</p><h2> 기능 추가</h2><p> 편집기는 GML 파일에 포함된 기능으로 자동 채워지지만 그렇지 않은 경우 기능 메뉴 버튼을 클릭하여 수동으로 추가할 수 있습니다.<img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" /> 필요한 항목 선택:</p><p class="dropspot"><img alt="Add functions/Constants To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_AddFunctions.png" /></p><p> &quot;기능 추가&quot;를 선택하면 내장 기능과 마찬가지로 <span data-keyref="GameMaker Name">GameMaker</span> 에서 호출할 수 있는 확장 기능에 기능을 추가할 수 있습니다. <span>함수가 추가되면 함수 속성을 정의할 수 있는 다음 창이 열립니다(또는 함수를 두 번 클릭하여 열 수 있음).</span></p><p class="dropspot"><img alt="Function Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FunctionEditor.png" /></p><p> 위의 이미지에서 함수에 대한 세부 정보로 함수 편집기를 채웠습니다. <span class="inline">instance_create_colour()</span> GML 확장 파일에서 정의한 것입니다(이 함수 편집기 창은 GML 함수를 정의하기 위한 것이 아니라 모든 확장 유형에서 동일합니다). 함수에 대해 정의할 수 있는 각 옵션을 살펴보겠습니다.</p><ul class="colour"><li> 프로젝트에서 함수를 호출할 때 사용할 <em>이름</em> 인 함수를 제공했음을 알 수 있습니다. 이 이름은 확장에 사용된 이름과 일치할 필요가 없습니다. 원하는 이름을 지정한 다음 <em>외부 이름</em> 필드를 사용하여 확장에 정의된 실제 이름에 연결할 수 있습니다.<img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FunctionNames.png" /></li><li> 그 아래에는 코드 완성 팝업에 표시될 텍스트와 코드 편집기 하단의 도우미 텍스트인 <em>도움말</em> 텍스트를 정의하는 섹션이 있습니다.</li><li> 다음으로 <strong>Double</strong> (실수 <a class="glossterm" data-glossterm="부동 소수점" href="#">부동 소수점</a> 값) 또는 <strong>문자열</strong> 일 수 있는 <em>반환 유형</em> 을 정의할 수 있습니다. 외부 함수에서 아무 것도 반환하지 않으면 이는 문제가 되지 않습니다.</li><li> 그 아래에서 함수가 취할 인수를 정의합니다. 이러한 인수는 <strong>double</strong> 또는 <strong>string</strong> 일 수 있으며 추가 버튼을 클릭하여 추가할 수 있습니다.<img alt="Add Argument Icon" class="icon" height="18" src="../../assets/Images/Icons/Icon_AddArgument.png" width="18" /> 제거 버튼을 클릭하여 제거하십시오.<img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png" />.<br /><br /> 함수가 다양한 양의 인수를 사용할 수 있는 경우(즉, 일부 선택적 인수가 있음을 의미) 하단의 &quot;가변 길이 인수&quot; 확인란을 선택해야 합니다.</li></ul><p class="note"> <strong>참고</strong>: 기능이 Windows, Mac 또는 Ubuntu용 기본 확장의 일부인 경우(<span class="inline">dll</span>, <span class="inline">dylib</span> 또는<span class="inline">so</span> 각각) 4개 이상의 인수가 있는 경우 <strong>모든 인수는 동일한 유형이어야 합니다</strong>.</p><p> 모든 작업을 완료하면 해당 기능을 프로젝트에서 사용할 준비가 된 것입니다. 이제 자동 완성에 표시되고 색상으로 구분됩니다.</p><p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_GMLFunctionExample.png" /> 정의된 함수는 <strong>Init Functions</strong> 또는 <strong>Final Functions</strong> 로도 설정할 수 있습니다. 즉, 게임이 시작될 때(Init), 게임이 끝날 때(Final) 자동으로 호출됩니다.</p><p class="note"> <strong>중요한!</strong> 모든 플랫폼은 Init 함수 호출을 지원 <strong>하지만 모든 플랫폼이 Final 함수 호출을 수행하는 것은 아닙니다.</strong> 특정 플랫폼에서는 이 함수가 호출될 때까지 알림이나 시간을 주지 않고 단순히 앱을 종료하기 때문입니다. 이것의 영향을 가장 많이 받는 플랫폼은 <strong>iOS</strong>, <strong>Android</strong>, <strong>HTML5</strong>, <strong>PlayStation</strong> 및 <strong>Xbox</strong> 입니다.</p><h2> 매크로</h2><p> 다른 옵션은 <strong>매크로</strong> 를 만드는 것입니다. 매크로는 <a class="glossterm" data-glossterm="끊임없는" href="#">상수</a> 값 또는 짧은 코드 조각일 수 있습니다(매크로에 대한 자세한 내용은 <a href="../../GameMaker_Language/GML_Overview/Variables/Constants.htm">여기</a> 참조). 예를 들어<span class="inline">c_alice_blue</span> 이전에 정의한 GML 확장의 함수를 대신 매크로로 만듭니다. 매크로를 만들려면 확장 속성에서 &quot;매크로&quot; 버튼을 클릭하면 됩니다. 그러면 다음 창이 열립니다.</p><p class="dropspot"><img alt="Macro Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_MacroEditor.png" /></p><p> 여기 편집기는 거의 설명이 필요 없습니다. 매크로 이름과 해당 상수 값 또는 짧은 코드 줄을 지정하면 됩니다. 매크로가 코드 <strong>줄이면 매크로가 호출될 때마다 평가됩니다</strong>.</p><h2 id="h1"> 확장 옵션 생성</h2><p> 확장 옵션을 생성하거나 수정하려면 &quot; <strong>확장 옵션</strong> &quot; 옆에 있는 톱니바퀴 아이콘을 클릭하십시오.</p><p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_OpenExtensionOptions.png" /> 확인 프롬프트에서 &quot; <strong>예</strong> &quot;를 클릭하면 새 확장 옵션을 추가할 수 있는 새 창이 표시됩니다.</p><p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Options_Edit.png" /> 각 확장 옵션에 이름, 기본값 및 데이터 유형을 지정할 수 있습니다. 이름은 옵션 값을 검색하기 위해 확장 코드에서 내부적으로 사용하는 것입니다.</p><p> &quot;옵션 추가&quot;를 사용하여 옵션을 추가하는 것 외에도 &quot;섹션 추가&quot;를 사용하여 섹션을 추가할 수도 있습니다. 섹션은 옵션이 <strong>아니라</strong> 기본 Extension Editor 창에 표시되는 제목일 뿐입니다. 옵션이 많고 최종 사용자에게 표시되는 옵션 목록을 정리하려는 경우 이 옵션을 사용합니다.</p><p> 다음 유형의 옵션을 만들 수 있습니다.</p><ul class="colour"><li> <strong>Boolean</strong>: true/false 체크박스를 생성합니다.</li><li> <strong>숫자</strong>: 이것은 실수입니다.</li><li> <strong>문자열</strong>: 텍스트 문자열입니다.</li><li> <strong>FilePath</strong>: 파일의 경로입니다. OS의 탐색기를 사용하여 파일을 탐색할 수 있습니다.</li><li> <strong>FolderPath</strong>: 폴더/디렉토리의 경로입니다. OS의 탐색기를 사용하여 폴더를 탐색할 수 있습니다.</li><li> <strong>목록</strong>: 미리 정의된 항목 목록에서 단일 항목을 선택할 수 있는 드롭다운입니다.</li></ul><p> 다음을 클릭할 수도 있습니다.<img class="icon" src="../../assets/Images/Icons/Icon_Cog.png" /> 옵션 옆에 있는 톱니바퀴 아이콘을 클릭하면 선택적 <strong>표시 이름</strong> 및 <strong>설명</strong> (표시 이름을 가리키면 도구 설명으로 표시됨)을 지정할 수 있습니다.</p><p> 추가 기능 창에서 이 옵션을 게임과 함께 번들로 제공되는 <strong>options.ini</strong> 파일로 내보내도록 선택할 수도 있습니다.</p><p> 마지막으로 편집기에서 옵션을 숨기도록 선택하여 확장을 사용하는 최종 사용자에게 보이지 않게 할 수 있습니다.</p><h3> 확장 옵션 사용</h3><p> <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Extensions/Extensions.htm">확장 기능</a> 을 사용하여 런타임에 확장 옵션의 값을 검색할 수 있습니다.</p><p> <span class="inline"> <strong>dll </strong>>YYEXTOPT_&lt;ExtensionName&gt;_&lt;OptionName&gt;</span> 이름을 사용하여 <a data-xref="{title}" href="../../Settings/Runner_Details/Compiler_Batch_Files.htm">컴파일러 배치 파일/스크립트</a> 에서 확장 옵션을 검색할 수도 있습니다.</p><p> 확장에 런타임에 사용되는 기능이 있는 경우에만 확장 옵션을 런타임에 사용할 수 있습니다. 그러나 옵션은 확장 사용에 관계없이 항상 INI 파일(옵션이 활성화된 경우) 및 배치 스크립트로 내보내집니다.</p><h2> 프록시 파일</h2><p> 여러 대상 플랫폼으로 작업할 때 <em>모든</em> 플랫폼에서 작동하는 단 하나의 기능/매크로 집합으로 단일 확장을 만들 수 있다는 점에 주목할 가치가 있습니다. 이는 링크 라이브러리 중 하나만 게임에 확장으로 추가하고 다른 하나를 <strong>확장 속성</strong> 창의 <strong>프록시 파일</strong> 목록에 배치하면 가능합니다.</p><p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_ProxyFiles.png" /> 예를 들어,<span class="inline">Haggis.dll</span> &quot; <span class="inline"> <strong>dll</strong></span> &quot;. 당신은 단순히 이것을 복제할 것입니다 <span class="inline"> <strong>DyLib</strong></span> 맥으로<span class="inline"><strong>libHaggis.dylib</strong></span>, 이름을 &quot; <span class="inline"> <strong>dll</strong></span> &quot; 내부 함수 이름이 원래 Windows의 이름과 일치하는지 확인합니다. <span class="inline">DyLib</span>. 이것<strong><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></strong> 그런 다음 프록시 파일에 추가되고 게임이 Mac 대상에서 실행될 때 내보내도록 설정되며, 확장 기능이 호출될 때 <span data-keyref="GameMaker Name">GameMaker</span> 는 자동으로 이를 사용합니다.</p><p> 프록시 파일을 추가하려면 간단히<img alt="Add Argument Icon" class="icon" height="18" src="../../assets/Images/Icons/Icon_AddArgument.png" width="18" /> 선택한 리소스 파일의 속성 창에서 버튼을 누르고 파일 위치를 찾습니다. 추가되면 적절한 모듈을 추가하기 위해 확장의 대상을 업데이트해야 할 수 있으며 다음에 게임을 실행할 때 해당 플랫폼에 대한 프록시로 포함됩니다. 클릭하여 프록시 파일도 제거할 수 있습니다.<img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png" /> 선택한 프록시 파일을 제거하는 버튼입니다.</p><p> 프록시 파일을 추가하면 프로젝트의 Extensions 폴더에 복사됩니다.<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /> 확장 <em>에서 Open in Explorer</em> 를 선택), 따라서 편집해야 하는 경우 <span data-keyref="GameMaker Name">GameMaker</span> 가 프로젝트에 있는 파일을 사용하므로 가져온 소스 파일이 아니라 게임과 함께 번들로 제공되는 복사된 파일을 편집해야 합니다. 컴파일.</p><h2 id="h"> 명명 규칙</h2><p> <span data-keyref="GameMaker Name">GameMaker</span> 가 이러한 이름을 구문 분석하고 확장자와 이름에 따라 파일의 대상 모듈을 할당하고 자동으로 파일을 연결하므로 프록시 파일이 아래 나열된 명명 규칙을 따르는 것이 매우 중요합니다. 이러한 규칙을 따르지 않으면 <span data-keyref="GameMaker Name">GameMaker</span> 가 사용할 파일을 찾지 못해 파일을 제대로 로드하지 못하기 때문에 런타임에 게임이 작동하지 않을 수 있습니다.</p><p> 각 대상 플랫폼에 대한 명명 규칙은 다음과 같습니다. </p><table><colgroup><col style="width: 173px;" /><col style="width: 715px;" /></colgroup><tbody><tr><th> 플랫폼</th><th> 이름</th></tr><tr><td> Windows 32비트 런타임</td><td><span class="inline">&lt;<em>N</em><em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td></tr><tr><td> Windows 64비트 런타임</td><td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span></td></tr><tr><td> UWP</td><td><span class="inline"><span class="inline"><em>Name</em></span> &gt;_win8_x86.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_win8_arm.dll, 라이브러리&lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_win8_x86.dll, 라이브러리&lt;<span class="inline">&lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_win8_arm.dll</td></tr><tr><td> 우분투(리눅스)</td><td><span class="inline"><span class="inline"><em>Name</em></span> &gt;.그래서, 리브&lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;.그래서,<br /> &lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_linux.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_linux.so,<br /><br /> &lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_arm.so, 라이브러리&lt; <span class="inline">lib&lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_arm.so,<br /><span class="inline"><span class="inline"><em>Name</em></span> &gt;_linux_arm.so,<br /><br /> &lt; <em>이름</em> &gt;_arm64.so, lib&lt; <em>이름</em> &gt;_arm64.so, lib&lt; <em>이름</em> &gt;_linux_arm64.so,<br /><br /> &lt; <em>이름</em> &gt;_arm64-v8.so,<br /> lib&lt; <em>이름</em> &gt;_arm64-v8.so, lib&lt;이름&gt;_linux_arm64-v8.so,<br /><br /> &lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span> &gt;_armeabi-v7a.so, lib&lt;<span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span> &gt;_linux_armeabi-v7a.so</td></tr><tr><td> 맥 OS</td><td><span class="inline">&lt;<em>Name</em>&gt;.js</span></td></tr><tr><td> HTML5</td><td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps4.prx, lib&lt;<em>Name</em>&gt;_ps4.prx</span></td></tr><tr><td> PS4</td><td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps5.prx, lib&lt;<em>Name</em>&gt;_ps5.prx</span></td></tr><tr><td> PS5</td><td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span></td></tr><tr><td> 엑스박스 원</td><td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span> &lt; <em>이름</em> &gt;_xboxone.dll</td></tr><tr><td> Xbox 시리즈 X|S</td><td> <span class="inline">&lt;<em>Name</em>&gt;</span> &lt; <em>이름</em> &gt;_xboxseriesxs.dll</td></tr></tbody></table><p> 위의 규칙을 사용하여<span class="inline"></span> 프록시 파일을 추가할 기본 파일의 이름 부분입니다. </p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Extensions.htm">확장 편집기</a></div><div style="float:right"> 다음: <a href="Android_Extensions.htm">안드로이드 확장</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->
</body>
</html>