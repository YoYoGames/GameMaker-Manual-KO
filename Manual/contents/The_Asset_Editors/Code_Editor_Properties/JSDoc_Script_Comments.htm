<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>JSDoc 스크립트 주석</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="JSDoc 스크립트 주석의 작동 방식을 설명하는 페이지" />
  <meta name="rh-index-keywords" content="코드 편집기 - JSDoc 주석,JSDoc" />
  <meta name="search-keywords" content="JSDoc,JSDoc 주석" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> JSDoc 스크립트 주석</h1><p> 사용자 정의 함수에 코드 완성 기능이 있고 코드 편집기에서 특정 방식으로 필요한 인수를 표시하려면 일부 <a href="https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html">JSDoc 스타일</a> 주석을 추가해야 합니다. 이 주석은 자동 완성 기능에 함수를 어떻게 사용하고 <a href="../Scripts.htm">스크립트 편집기</a> 에서 작성해야 하는지 알려주는 데 사용됩니다.</p><p> 일반적인 함수 헤더의 형식은 함수 이름, 함수 설명, 함수가 취하는 다양한 인수(매개변수) 목록을 포함하고 각 줄을 삼중 백슬래시로 시작하는 것입니다.<span class="inline">///</span> &quot;는 <span data-keyref="GameMaker Name">GameMaker</span> 가 주석을 JSDoc 스타일로 구문 분석하도록 지시합니다. 대안으로 JSDoc 주석을 다음으로 래핑할 수 있습니다. <span class="inline">/**</span>...<span class="inline">*/</span>, 이랑 <span class="inline">/**</span> 자신의 라인에 있습니다.</p><p> 주석 자체에 식별자를 부여해야 합니다(앞에 &quot;<span class="inline">@</span> &quot;) 및 콘텐츠, 사용 가능한 식별자는 다음과 같습니다. </p><table><colgroup><col style="width: 306px;" /><col style="width: 488px;" /><col style="width: 487px;" /></colgroup><tbody><tr><th> 식별자</th><th> 콘텐츠</th><th> 통사론</th></tr><tr><td><span class="inline">@function</span> / <span class="inline">@func</span></td><td> 인수를 포함한 전체 함수 이름</td><td><span class="inline">@func my_func(args)</span></td></tr><tr><td><span class="inline">@description</span> / <span class="inline">@desc</span></td><td> 함수가 하는 일에 대한 일반적인 설명</td><td><span class="inline">@desc &lt;Description goes&gt;</span></td></tr><tr><td><span class="inline">@param</span> / <span class="inline">@</span><span class="inline">parameter</span> / <span class="inline">@arg</span> / <span class="inline">@argument</span></td><td> 선택적 <a href="Feather_Data_Types.htm"><span class="notranslate">type</span></a> 이 있는 인수에 대한 정보</td><td><span class="inline">@param <em>{type}</em> name &lt;Parameter description&gt;</span></td></tr><tr><td><span class="inline">@return / @returns</span></td><td> 함수가 반환하는 데이터 <a href="Feather_Data_Types.htm">유형</a></td><td><span class="inline">@return {type} &lt;Return description&gt;</span></td></tr><tr><th colspan="3"> <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">깃털</a> 만</th></tr><tr><td><span class="inline">@pure</span></td><td> 함수를 <a class="glossterm" data-glossterm="순수한" href="#">순수</a> 로 표시 </td><td><span class="inline">@pure</span></td></tr><tr><td style=""><span class="inline">@ignore</span></td><td style=""> Feather의 자동 완성 기능을 숨깁니다. </td><td><span class="inline">@ignore</span></td></tr><tr><td style=""><span class="inline">@deprecated</span></td><td style=""> 더 이상 사용되지 않는 기능으로 표시 </td><td><span class="inline">@deprecated</span></td></tr><tr><td style=""><span class="inline">@context / @self</span></td><td style=""> Feather 자동 완성이 컨텍스트 정보를 제공하는 데 사용하는 함수의 컨텍스트를 설정합니다. 객체 또는 생성자가 될 수 있습니다.</td><td><span class="inline">@self &lt;object&gt;</span></td></tr></tbody></table><p> 인수 또는 반환 값의 유형을 지정하지 않고 <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a> 를 사용하는 경우 함수 본문에 따라 자동으로 데이터 유형을 가정합니다.</p><p> 에 대한 데이터 유형에 대한 정보를 참조하십시오. <span class="inline">@param</span> 그리고 <span class="inline">@return</span> <a href="Feather_Data_Types.htm">깃털 데이터 유형</a>.</p><h2> 예</h2><p> 고유한 함수를 작성할 때 이것이 어떻게 작동하는지 알아보기 위해 다음 기본 예를 들어보겠습니다.</p><p class="code">function is_same_object(_id, _obj)<br />
    {<br />
        if (_id.object_index == _obj)<br />
        {<br />
            return true;<br />
        }<br />
        else return false;<br />
    }</p><p> 이 스크립트가 하는 일은 인스턴스가 동일한지 확인하는 것입니다. <span class="inline">object_index</span> 주어진 객체로 다음과 같이 간단히 호출됩니다.</p><p class="code">if is_same_object(id, obj_Player)<br />
    {<br />
        instance_destroy()<br />
    }</p><p> 그러나 이를 코드 편집기에 작성하면 인수 변수 이름이 직접 표시됩니다(<span class="inline">_id</span> 그리고 <span class="inline">_obj</span> ) 대부분의 경우 그다지 설명적이지 않습니다. JSDoc을 사용하여 함수에 대한 정보와 함께 사용자 정의 인수 이름 및 설명을 정의할 수 있습니다.</p><p class="code">/// @function                is_same_object(inst_id, object_id)<br />
    /// @description             Check if the given instance belongs to the given object.<br />
    /// @param {Id.Instance}     inst_id    The unique instance ID value of the instance to check.<br />
    /// @param {Asset.GMObject}  object_id  The object index to be checked against.<br />
    /// @return {Bool}<br />
    <br />
    function is_same_object(_inst_id, _object_id)<br />
    {<br />
        return _inst_id.object_index == _object_id;<br />
    }
  </p><p> 이제 프로젝트의 아무 곳에서나 이 함수를 호출할 때 JSDoc 주석에 입력된 새 인수 이름을 볼 수 있습니다.</p><p><img alt="JSDoc Example" class="center" height="652" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Example.png" width="672" /> 위 이미지에서 상단 부분은 자동 완성 기능을 보여주고 하단 부분은 하단의 인수 도우미가 어떻게 작동하는지 보여줍니다. 선택적 &quot;유형&quot;과 필수 &quot;설명&quot; 부분 모두 <span class="inline">@param</span> IDE 코드 완료 시 기본적으로 표시되지 않으며 이를 보려면 <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/GML_Code_Preferences.htm">GML 기본 설정</a> 에서 옵션을 활성화해야 합니다.</p><p> <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a> 를 사용할 때 마우스를 해당 기능 위로 가져가면 기능에 대한 자세한 정보가 표시됩니다.</p><p><img class="center" src="../../assets/Images/Asset_Editors/JSDoc_Feather_Info.png" /> 인수 이름을 줄 바꿈할 수 있습니다. <span class="inline">[]</span> 선택 사항임을 나타내는 대괄호. 그러면 코드 편집기는 최소 필수 인수와 총 인수 수 사이의 인수 수를 예상합니다.</p><p> 예를 들어 다음 함수를 참조하십시오.</p><p class="code">/// @function    animate_position(end_x, end_y, start_x, start_y)<br />
    /// @desc        Animates the instance to ending point, from optional starting point<br />
    /// @arg end_x<br />
    /// @arg end_y<br />
    /// @arg [start_x]<br />
    /// @arg [start_y]<br />
    <br />
    function animate_position (x1, y1, x2, y2)<br />
    {<br />
        // Function code<br />
    }
  </p><p> 그만큼 <span class="inline">start_x</span> 그리고 <span class="inline">start_y</span> 인수는 선택 사항으로 표시됩니다. 즉, 경고 메시지에서 볼 수 있듯이 코드 편집기는 이제 2~4개의 인수를 예상합니다.</p><p><img class="center" height="150" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Optional.png" width="537" /></p><p class="note"> <span class="note">참고</span> 함수 선언에서 선택적 인수를 사용하는 경우 동일한 동작을 얻게 됩니다. 자세한 내용은 <a href="../../GameMaker_Language/GML_Overview/Script_Functions.htm">스크립트 기능</a> 을 참조하십시오.</p><p> 스크립트에는 여러 기능이 있을 수 있으므로 선언 전에 각각에 대한 JSDoc 주석을 추가할 수 있습니다. </p><p><img alt="Multiple Functions With JSDoc Comments Example" class="center" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_MultipleFunctions.png" /></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../Scripts.htm">스크립트 편집기</a></div><div style="float:right"> 다음: <a data-xref="{title}" href="Feather_Data_Types.htm">깃털 데이터 유형</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
JSDoc Script Comments
-->
  <!-- TAGS
jsdoc_comments
-->
</body>
</html>