<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>충돌 모양인 경우</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="If Collision Shape 액션을 설명하는 페이지" />
  <meta name="rh-index-keywords" content="GML 비주얼 액션 - 충돌 형태인 경우" />
  <meta name="search-keywords" content="충돌 모양인 경우" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1><img alt="If Collision Shape Icon" class="icon" height="32" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Collisions/i_Collision_Shape.png" width="32" /> 충돌 모양인 경우</h1><p> 이 작업은 주어진 모양의 영역 내에서 또는 선을 따라 주어진 개체의 인스턴스와 충돌이 있는지 확인하고 확인하는 데 사용됩니다. 모양(사각형, 타원 또는 선), 확인할 개체를 제공한 다음 사용 중인 모양의 왼쪽 위 및 오른쪽 아래 모서리에 대한 좌표를 제공하거나 선의 경우 시작 및 끝 위치. 이는 게임 룸 내의 절대 위치이거나 작업을 수행하는 인스턴스와 관련된 위치일 수 있습니다. 아래 이미지에서 이것이 어떻게 작동하는지 확인할 수 있습니다.</p><p><img alt="Example of different collision shapes" class="center" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Collisions/collision_shape_example.png" /> 보시다시피 결과 <i>는</i> 확인 중인 인스턴스의 충돌 마스크에 따라 달라집니다. <span class="inline">sprite_index</span>, 또는 할당된 스프라이트 <span class="inline">mask_index</span>. 그렇지 않으면 스프라이트를 그리는지 여부에 관계없이 이러한 함수에서 감지되지 않습니다. 타원 또는 직사각형 모양에 대해 설정된 경계 내에 완전히 속하는 모든 인스턴스도 충돌을 반환한다는 점에 유의할 가치가 있습니다. 작업은 다음으로 평가됩니다. <span class="inline">true</span> 충돌이 감지되거나 <span class="inline">false</span> 그렇지 않으면 <b>Not</b> 플래그를 확인하여 주어진 모양의 영역과 충돌이 <i>없는지</i> 확인할 수도 있지만 작업은 다음과 같이 평가됩니다. <span class="inline">true</span> 충돌이 발견 <i>되지</i> 않으면 다음과 같이 평가됩니다. <span class="inline">false</span>. 충돌 검사에서 호출 인스턴스를 제외하도록 <b>Exclude Self</b> 옵션을 설정할 수도 있습니다.</p><p> 다음으로 <b>Return List</b> 옵션을 선택/선택 취소할 수 있습니다. 이 항목을 선택하면 작업이 <a href="../Data_Structures/Data_Structure_Actions.htm">목록</a> 을 만들고 채웁니다.<span> </span><i>모든</i> 인스턴스가 모양과 충돌하는 데이터 구조를 만들고 <b>Target</b> 변수를 DS 목록 ID로 설정합니다. 선택하지 않으면 충돌이 감지되지 않은 경우에만 <b>Target</b> 변수를 0보다 작은 값으로 설정하거나 충돌에 있는 인스턴스 <i>중 하나</i> 의 고유 ID 값으로 설정합니다(여러 인스턴스가 충돌하는 경우 목록을 사용하지 않을 때 반환될 인스턴스 ID를 알고 있음).</p><p> 목록을 반환하도록 선택하고 Target 변수가 <b>Temp</b> 로 설정 <i>되지 않은</i> 경우 <b>Free Target</b> 옵션을 선택할 수도 있습니다. 로 설정하면 <span class="inline">true</span>, 그러면 대상 변수에 포함된 목록이 삭제되고 작업을 호출할 때마다 새 목록이 생성되고 대상 변수로 반환됩니다. 이런 식으로 메모리 누수에 대해 걱정하지 않고 동일한 변수를 재사용할 수 있습니다. <b>Free Target</b> 옵션을 선택하지 <i>않으면</i> 액션에서 변수를 다시 사용하기 전에 목록을 파괴하는 책임이 있기 때문입니다. 이 옵션이 선택되었는지 여부에 <i>관계없이</i> 작업을 <b>Return List</b> 로 설정한 경우 대상 변수에는 <i>항상 목록 ID가 포함</i> 되므로 인스턴스가 파괴되거나 방 끝(예를 들어 <a href="../Data_Structures/Free_Data_Structure.htm">Free Data Structure</a> 와 함께 <a href="../../../The_Asset_Editors/Object_Properties/Object_Events.htm"><b>Clean Up</b></a> 이벤트를 사용할 수 있습니다.<span> </span>동작). 미리 정의된 변수 또는 표현식을 사용하도록 <b>자유 대상</b> 옵션을 설정할 수 있으므로 변수를 다른 곳에 설정하여(또는 표현식에 대해 다른 결과를 갖는) 목록 데이터 구조가 해제되는 시기를 제어할 수 있다는 점은 주목할 가치가 있습니다. 평가하다 <span class="inline">true</span> /<span class="inline">false</span>.</p><p> 마지막으로 반환된 값 또는 목록 ID를 보유하려는 <b>대상</b> 변수를 제공합니다. 반환된 값을 <b>임시</b> (로컬) 변수로 유지하도록 Target 변수에 플래그를 지정하면 작업은 이벤트가 끝날 때 <i>까지만</i> 반환 값을 유지하도록 이 변수를 생성합니다. 이 경우 Free Target 옵션은 아무 작업도 수행하지 않고 해당 옵션이 선택된 경우 DS 목록을 파기할 책임이 있습니다. 대상 변수가 제공되지 않고 목록 <b>반환</b> 옵션이 선택되어 있으면 목록이 생성되지 않습니다.</p><p class="note"> <b>중요한!</b> 충돌은 유효한 충돌 마스크가 있는 인스턴스에 대해서만 등록됩니다. 예: 인스턴스에 할당된 스프라이트가 있습니다. <span class="inline">sprite_index</span>, 또는 할당된 스프라이트 <span class="inline">mask_index</span>. 이 작업에서 검사 중인 개체의 인스턴스에 충돌 마스크가 없으면 해당 인스턴스가 그 당시에 무엇을 그리는지에 관계없이 충돌이 감지되지 않습니다.</p><p> &quot;에 작업을 추가하려면<span class="inline">if</span> &quot; 블록은 아래 이미지와 같이 작업 <i>옆</i> 에 놓아야 합니다.</p><p><img alt="If Collision Shape drop actions" class="center" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Collisions/If_Collision_Shape.png" /></p><p></p><h4> 동작 구문:</h4><p><img alt="If Collision Shape Action" class="center" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Collisions/a_Collision_Shape.png" /></p><h4> 인수:</h4><table><tbody><tr><th> 논쟁</th><th> 설명</th></tr><tr><td> <span class="notranslate">Shape</span></td><td> 사용할 모양</td></tr><tr><td> <span class="notranslate">Object</span></td><td> 인스턴스를 확인할 개체</td></tr><tr><td> <span class="notranslate">x1</span></td><td> 시작할 x 위치</td></tr><tr><td> <span class="notranslate">y1</span></td><td> 시작할 y 위치</td></tr><tr><td> <span class="notranslate">x2</span></td><td> 끝나는 x 위치</td></tr><tr><td> <span class="notranslate">y2</span></td><td> 끝나는 y 위치</td></tr><tr><td> <span class="notranslate">Free Target</span></td><td> 변수 또는 표현식으로 설정하거나 다음으로 설정할 수 있습니다. <span class="inline">true</span> /<span class="inline">false</span> 목록 변수를 재사용할 때 목록 메모리 해제를 제어하기 위해</td></tr><tr><td> <span class="notranslate">Target</span></td><td> 작업의 반환 값을 대상으로 하는 변수</td></tr></tbody></table><p></p><h4> 예시:</h4><p><img alt="If Collision Shape Example" class="center" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Collisions/e_Collision_Shape.png" /> 위의 작업 블록 코드는 개체의 모든 인스턴스와 충돌을 확인합니다. <span class="inline">obj_Enemy</span> &quot; 호출하는 인스턴스 위치 주변의 100px 원 내. 이 작업은 충돌하는 것으로 확인된 모든 인스턴스의 목록을 생성하고 목록 ID를 Target 변수에 저장합니다. 작업이 다음으로 평가되는 경우 <span class="inline">true</span> 그런 다음 목록이 반복되고 목록에 저장된 ID가 있는 각 인스턴스에는 &quot;<span class="inline">hp</span> &quot; 변수가 1만큼 감소합니다. 그러면 DS 목록이 해제됩니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="Collision_Actions.htm">충돌 동작</a></div><div style="float:right"> 다음: <a href="If_Collision_Point.htm">충돌 지점인 경우</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
Action - If Collision Shape
-->
  <!-- TAGS
action_if_collision_shape
-->
</body>
</html>