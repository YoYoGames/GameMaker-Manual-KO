<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>액션 블록 스크립트 기능</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="액션 블록 스크립트 기능을 만드는 방법을 설명하는 기사" />
  <meta name="rh-index-keywords" content="GML 시각적 개요 - 작업 블록 스크립트 함수" />
  <meta name="search-keywords" content="GML 비주얼 스크립트" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> 액션 블록 스크립트 기능</h1><p> <a href="../../Introduction/The_Asset_Browser.htm">자산 브라우저</a> 에서 가장 중요한 자산 중 하나는 <a href="../../The_Asset_Editors/Scripts.htm">스크립트</a> 자산입니다. 스크립트는 본질적으로 사용자 정의 함수의 &quot;컨테이너&quot;이며 실제로 게임에서 직접 호출되지 않는다는 점에서 특별한 자산입니다. 모든 스크립트는 범위가 <strong>전역적</strong> 이며 게임이 시작될 때 GameMaker에 의해 자동으로 실행되므로 이를 사용하여 게임 전체에서 사용하려는 전역 변수 및 기능을 정의할 수 있습니다.</p><p> 각 GML Visual 스크립트에는 하나 이상의 사용자 정의 함수가 추가될 수 있으며 이러한 함수는 <a href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a> 작업을 사용하여 생성됩니다.</p><p><img alt="Declare A New Function Syntax" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Common/a_Common_Declare_Function.png" /> 여기에서 정의하는 <a class="glossterm" data-glossterm="논쟁" href="#">함수</a> 는 범위가 전역적이며 내장된 GML Visual 작업과 매우 유사하게 작동 <span class="glossextra">합니다</span>. 값을 반환하거나 필요에 따라 아무것도 반환하지 않습니다. 그런 다음 <a href="../Drag_And_Drop_Reference/Common/Function_Call.htm">함수 호출</a> 을 사용하여 게임에서 함수를 호출합니다.<img alt="Function Call Icon" class="icon" height="24" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/i_Execute_Function.png" width="24" /> 액션은 다음과 같습니다.</p><p><img alt="Function Call Syntax" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Common_Execute_Function.png" /> GML Visual 스크립트를 생성하려면 마우스 오른쪽 버튼을 사용하기만 하면 됩니다.<img alt="RMB Icon" class="icon" height="24" src="../../assets/Images/Icons/Icon_RMB.png" width="21" /> 자산 브라우저의 아무 곳이나 선택하고 <strong>만들기</strong> 를 선택한 다음 <strong>스크립트</strong> 를 선택합니다. 그러면 새 GML Visual 스크립트가 생성되고 편집기 창이 열립니다.</p><p><img alt="D&amp;D Script editor" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Scripts.png" /> 마우스 오른쪽 버튼을 클릭하여 스크립트 이름을 지정할 수 있습니다.<img alt="RMB Icon" class="icon" height="24" src="../../assets/Images/Icons/Icon_RMB.png" width="21" /> 자산 브라우저에서 <strong>이름 바꾸기</strong> 를 선택하거나 느린 두 번 왼쪽 클릭을 사용하여<img alt="LMB Icon" class="icon" height="24" src="../../assets/Images/Icons/Icon_LMB.png" width="21" /> ) 그러나 스크립트 이름은 자산에 대한 일반 규칙을 따라야 하므로 문자로 시작하고 문자, 숫자 또는 &quot;_&quot; 밑줄 기호만 포함해야 합니다. 스크립트는 또한 <strong>Declare A New Function</strong> 액션으로 미리 채워져 채울 준비가 되며, 필요에 따라 더 많은 함수 선언을 추가할 수 있습니다(단일 스크립트는 여러 기능을 보유할 수 있으므로 유사한 기능을 가진 함수를 그룹화하는 데 유용합니다. 또는 함께 연결된 사용).</p><p> 위에서 언급했듯이 함수에 여러 인수를 전달할 수 있으며 이를 사용하여 작성한 작업을 수행합니다. 이것을 더 잘 이해하려면 예를 들어 내장된 조치를 취하고 작동 방식에 대해 생각하십시오... 이벤트에 배치하고 여러 값을 제공하면 인스턴스가 무언가를 수행하게 됩니다. 사용자 정의 함수는 <em>사용자</em> 가 작성한다는 점만 다를 뿐 완전히 동일합니다.</p><p> 새 함수를 정의할 때 이름을 지정하고 필요한 경우 인수의 이름도 정의합니다(함수는 인수를 사용하지 않거나 필요한 항목에 따라 여러 인수를 사용할 수 있음). 인수 이름을 지정하면 함수가 함수 입력 값을 보유하는 <strong>로컬 변수</strong> 로 호출하는 작업에 사용됩니다.</p><p> <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">JS Doc 규칙</a> 에 따라 동작을 설명하는 주석을 추가하는 것도 좋은 방법입니다. 예를 들어 다음 기능을 고려하십시오. <span class="inline">set_vec()</span>:</p><p><img alt="D&amp;D Function Example With Comments" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_FunctionExample.png" /> 위의 스크립트를 호출하려면 다음과 같이 <strong>함수 호출</strong> 작업을 사용하면 됩니다.</p><p><img alt="Call A Function From A Script" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Declare_Function_2.png" /> 함수에 인수를 전달할 수 있을 뿐만 아니라 함수에 값을 반환하도록 요청할 수도 있습니다( <a href="../Drag_And_Drop_Reference/Common/Return.htm">Return</a><img alt="Return Action Icon" class="icon" height="24" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/i_Return.png" width="24" /> action), 따라서 그것들을 사용하여 (예를 들어) 계산 방법을 구축하거나 복잡한 충돌 감지 또는 여러 가지 후에 인스턴스 ID를 반환할 수 있습니다. 그러나 return을 사용 <strong>하면 함수가 종료</strong> 되므로 사용한 후에 수행된 작업은 실행되지 않으며 이는 함수가 어떻게 구성되는지에 대해 어느 정도 생각해야 함을 의미합니다.</p><p> 다음은 값을 반환하는 GML Visual 함수입니다.</p><p><img alt="D&amp;D Script Return Example" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Script_Example_Return.png" /></p><p> 위의 함수는 단순히 방의 모든 인스턴스를 확인하여 <span class="inline">object_index</span> 이고 그 중 하나가 플레이어 객체인 경우 함수가 반환합니다. <span class="inline">true</span> (함수 호출 종료) 또는 <span class="inline">false</span>. 이 함수를 다음과 같이 호출합니다.</p><p><img alt="Call D&amp;D Script With Return Value" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Overview/DnD_Script_Call_Return.png" /> 따라서 함수를 호출하고 반환된 값을 저장할 임시(로컬) 변수를 생성하도록 합니다(이 경우 <span class="inline">true</span> 또는 <span class="inline">false</span> ) 그런 다음 이 변수를 확인하고 조치를 취합니다.</p><p> 인수를 선택 사항으로 만들고 기본값을 정의할 수도 있으므로 함수 호출에서 제공되지 않는 경우 기본값이 대신 사용됩니다. 자세한 내용은 작업의 <a data-xref="{text}" href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm#h">확장된 예 2</a> 를 참조하세요.</p><p> GML Visual 스크립트에 대한 함수를 만들 때 개체 이벤트에 작업을 추가할 때와 동일한 모든 작업을 사용할 수 있으며 함수 내에서 함수를 호출할 수도 있으며 이러한 방식으로 더 많은 &quot;모듈식&quot; 작업 코드를 만들 수 있습니다. 이러한 방식으로 함수를 사용하여 스크립트를 작성하면 동일한 작업 시퀀스를 만드는 데 많은 시간을 절약할 수 있으며 작업 시퀀스를 더 읽기 쉽고 디버그하기 쉽게 만들 수도 있습니다. </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a href="../../Content.htm">인덱스</a></div><div style="float:right"> 다음: <a href="Changing_DnD_To_Code.htm">GML 시각적 개체를 코드로 변경</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 판권 소유</span></h5>
  </div>
  <!-- KEYWORDS
GML Visual Scripts
-->
  <!-- TAGS
drag_and_drop_scripts
-->
</body>
</html>