<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>명령줄을 통한 빌드</title>
    <meta name="generator" content="Adobe RoboHelp 2020"/>
    <link rel="stylesheet" href="../assets/css/default.css" type="text/css"/>
    <script src="../assets/scripts/main_script.js"></script>
    <meta name="rh-authors" content="Gurpreet S. Matharoo"/>
    <meta name="topic-comment" content="CLI를 통해 프로젝트를 컴파일하고 테스트하는 방법을 설명하는 페이지"/>
    <meta name="rh-index-keywords" content="명령줄을 통한 빌드"/>
    <meta name="search-keywords" content="짓다,명령줄,클리,시,이고르,지속적인 통합"/>
  </head>
  <body><!--<div class="body-scroll" style="top: 150px;">--><h1 id="h"> 명령줄을 통한 빌드</h1><p class="note"> <span class="note"><strong>참고</strong></span> 명령줄을 통한 실행 패키지 빌드는 특정 라이선스에서만 사용할 수 있으므로 <a href="https://help.yoyogames.com/hc/en-us/articles/115002637011" title="나에게 적합한 라이선스는 무엇입니까?">이 페이지</a> 에서 라이선스가 지원하는지 알아보십시오. 다른 모든 라이선스의 경우 제한 없이 명령줄을 통해 프로젝트를 실행하고 디버그할 수 있습니다.</p><p> IDE를 통해 프로젝트를 빌드하는 것 <span data-keyref="GameMaker Name"><span data-keyref="GameMaker Name">외에도 GameMaker</span></span> 를 사용하면 아래에 설명된 많은 옵션과 명령을 사용하여 명령줄 인터페이스를 통해 프로젝트를 빌드할 수 있습니다. 이를 사용하여 프로젝트를 빌드하고 테스트하고 하나의 배치 파일을 실행하여 여러 플랫폼에 배포하고 <a href="https://www.jenkins.io/" title="젠킨스">Jenkins</a> 와 같은 자동화 서버를 통해 지속적 통합을 설정할 수 있습니다.</p><p> 이것은 다음을 실행하여 수행됩니다. <span class="inline">Igor.exe</span> 실행 파일은 런타임 폴더에 있고 이 페이지에 나열된 옵션과 명령을 전달합니다. Windows에서는<span class="inline">C:\ProgramData\GameMaker\Cache\runtimes\runtime-[version]\bin</span> 폴더 및 Mac에서 <span class="inline">/Users/Shared/GameMaker/Cache/runtimes/runtime-[version]/bin</span>.</p><p></p><h1> 이고르 CI 빌딩</h1><h2> 설정</h2><p> 머신에서 CI 구축을 설정하려면 다음을 수행해야 합니다.</p><ul class="colour"><li> <span data-keyref="GameMaker Name">GameMaker</span> 및 필요한 런타임 설치</li><li> 필요한 대상에 대해 IDE를 통해 프로젝트를 빌드하여 제대로 작동하는지 확인합니다.</li><li> 명령줄에서 빌드 테스트(아래 예 참조)</li><li> 작업 내에서 필요한 빌드를 수행할 배치 파일을 만듭니다(명령줄에서 테스트).</li><li> CI 환경 설정(게임 구축 방법에 따라 다름) <a href="https://www.jenkins.io/" title="젠킨스">Jenkins</a> 를 사용하는 것이 좋습니다.</li><li> CI 작업을 설정하고 모든 전제 조건이 설정되었는지 확인합니다(즉, 프로젝트에 대한 소스 제어 동기화).</li><li> 배치 파일을 CI 작업에 연결하고 Jenkins 환경 내에서 테스트</li></ul><h2> 메모</h2><ul class="colour"><li> 일부 플랫폼은 파일 경로 길이에 문제가 있을 수 있으며, 이 경우 다음을 수행해야 합니다. <span class="inline"><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst" title="subst documentation">subst</a></span> 명령에 전달하기 전에 PC의 가상 드라이브(IDE처럼)</li><li> 일부 플랫폼(특히 Android)은 자동으로<span class="inline">subst</span> 빌드하는 동안 드라이브이므로 오류 발생 시 수동으로 정리해야 할 수 있습니다.</li></ul><h2> 옵션</h2><p> <strong>Igor</strong> 실행 파일을 실행하는 동안 사용할 수 있는 옵션은 다음과 같습니다.</p><table><colgroup><col style="width: 316px;"/><col/></colgroup><tbody><tr><th style=""> 옵션</th><th style=""> 설명</th></tr><tr><td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td><td style=""> 라이선스 정보 검색에 사용되는 사용자 폴더<br/><br/> Windows에서는 다음과 같습니다.<span class="inline"><span>%appdata%\GameMaker\&lt;user_name&gt;_&lt;number&gt;</span><br/> macOS에서는 다음과 같습니다. <span class="inline"><span>~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;</span></td></tr><tr><td style=""><span class="inline">/rp=[runtime_root]</span></td><td style=""> 런타임의 루트 폴더</td></tr><tr><td style=""><span class="inline">/project=[project_YYP_file]</span></td><td style=""> 프로젝트의 전체 경로 <span class="inline">.yyp</span> 파일</td></tr><tr><td style=""><span class="inline">/cache=[cache_dir_path]</span></td><td style=""> 사용할 캐시 디렉토리(기본값은 <span class="inline">\cache</span> 현재 디렉토리에서)</td></tr><tr><td style=""><span class="inline">/temp=[temp_dir_path]</span></td><td style=""> 사용할 임시 디렉토리(기본값은 <span class="inline">c:\temp</span> )</td></tr><tr><td style=""><span class="inline">/of=[output_folder_filename]</span></td><td style=""> 빌드가 추출될 출력 디렉토리. 후행 항목은 항상 제거되므로 디렉토리만 지정하지 마십시오(예: <span class="inline">d:\game\output</span> 게임 파일을 <span class="inline">d:\game</span> )<br/><br/> 지정하지 않으면 다음과 같은 디렉토리가 지정됩니다. <span class="inline">output</span> 와 같은 디렉토리에 생성됩니다. <span class="inline">.bat</span> 추출된 빌드 파일이 포함된 파일(또는 명령이 실행되는 위치)</td></tr><tr><td style=""><span class="inline">/tf=[target_file]</span></td><td style=""> 생성된 ZIP 파일 또는 NSIS 설치 프로그램의 실제 파일 이름</td></tr><tr><td style=""><span class="inline">/config=[configName]</span></td><td style=""> 사용할 구성의 이름(기본값은 <span class="inline">Default</span> )</td></tr><tr><td style=""><span class="inline">/runtime=YYC|VM</span></td><td style=""> 출력 유형(YYC 또는 VM), 기본값은 VM</td></tr><tr><td style=""><span class="inline">/j=[NumCPUs]</span></td><td style=""> 빌드 프로세스 동안 사용할 CPU 수</td></tr><tr><td style=""><span class="inline">/device=[device_name_from_IDE]</span></td><td style=""> IDE에 설정된 대상 장치의 이름</td></tr></tbody></table><h2> 예</h2><p> 아래에서 모든 플랫폼에 대한 빌드 명령의 예를 찾을 수 있습니다.</p><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">오페라 GX</a></p><div class="droptext" data-targetname="drop-down12"><p> Opera GX 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Clean</p><p> 오페라 GX 실행:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Run</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">창</a></p><div class="droptext" data-targetname="drop-down"><p> Windows 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean</p><p> Windows용 VM 구축 -- <span class="inline">Run</span>, <span class="inline">PackageZip </span> 그리고 <span class="inline">PackageNsis</span>:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Run</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Windows PackageZip</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Windows PackageNsis</p><p> Windows용 YYC 구축-- <span class="inline">Run</span>, <span class="inline">PackageZip </span> 그리고 <span class="inline">PackageNsis</span>:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /platform=YYC -- Windows Run</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Windows PackageZip</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Windows PackageNsis</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">맥 OS</a></p><div class="droptext" data-targetname="drop-down1"><p> macOS 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Mac Clean</p><p> Mac에서 macOS용 VM 빌드:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Mac Package</p><p> Mac에서 <strong>Igor</strong> 를 실행하려면 모노를 사용해야 하므로 다음을 작성해야 합니다. <span class="inline"><strong>mono</strong></span> 모든 명령 전에, 예:<span class="inline">mono Igor.exe [options]</span></p><p> PC에서 macOS용 VM 빌드:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Mac Package</p><p> Mac에서 macOS용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Mac Package</p><p> PC에서 macOS용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Mac Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">리눅스 / 우분투</a></p><div class="droptext" data-targetname="drop-down2"><p> Linux 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Linux Clean</p><p> PC에서 Linux용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Linux Package</p><p> PC에서 Linux용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Linux Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">HTML5</a></p><div class="droptext" data-targetname="drop-down3"><p> HTML5 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- HTML5 Clean</p><p> HTML5 폴더 만들기(다음으로 대상 폴더를 지정해야 합니다. <span class="inline">/tf)</span>:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_folder] -- HTML5 folder</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">iOS</a></p><div class="droptext" data-targetname="drop-down4"><p> Mac에서 iOS용 VM 빌드:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- ios Package</p><p> PC에서 iOS용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ios Package</p><p> Mac에서 iOS용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- ios Package</p><p> PC에서 iOS용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ios Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">기계적 인조 인간</a></p><div class="droptext" data-targetname="drop-down5"><p> Android 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean</p><p> VM을 사용하여 Android APK 빌드:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Android Package</p><p> YYC를 사용하여 Android APK 빌드:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Android Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">tvOS</a></p><div class="droptext" data-targetname="drop-down6"><p> tvOS 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- tvos Clean</p><p> Mac에서 tvOS용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- tvos Package</p><p> PC에서 tvOS용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- tvos Package</p><p> Mac에서 tvOS용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- tvos Package</p><p> PC에서 tvOS용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- tvos Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">PS4</a></p><div class="droptext" data-targetname="drop-down7"><p> PS4 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps4 Clean</p><p> PC에서 PS4용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps4 Package</p><p> PC에서 PS4용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ps4 Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">PS5</a></p><div class="droptext" data-targetname="drop-down10"><p> PS5 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps5 Clean</p><p> PC에서 PS5용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps5 Package</p><p> PC에서 PS5용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ps5 Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">엑스박스 원</a></p><div class="droptext" data-targetname="drop-down8"><p> Xbox One 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOne Clean</p><p> PC에서 Xbox One용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOne Package</p><p> PC에서 Xbox One용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- XBoxOne Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Xbox 시리즈 X/S</a></p><div class="droptext" data-targetname="drop-down11"><p> Xbox Series X/S 프로젝트 청소:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOneSeriesXS Clean</p><p> Xbox Series X/S용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOneSeriesXS Package</p><p> Xbox Series X/S용 YYC 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- XBoxOneSeriesXS Package</p></div><p> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">스위치</a></p><div class="droptext" data-targetname="drop-down9"><p> 청소 스위치 프로젝트:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Switch Clean</p><p> PC에서 Switch용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Switch Package</p><p> PC에서 YYC용 VM 구축:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Switch Package</p></div><p></p><h1> 이고르 런타임</h1><p> Igor 런타임과 함께 사용할 수 있는 옵션은 다음과 같습니다.</p><table><tbody><tr><th style=""> 옵션</th><th style=""> 설명</th></tr><tr><td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td><td style=""> <span data-keyref="GameMaker Name">GameMaker</span> 가 설치할 수 있는 모듈을 알 수 있도록 라이선스 정보 검색에 사용되는 사용자 폴더를 설정합니다.</td></tr><tr><td style=""><span class="inline">/lf=[license_file]</span></td><td style=""> 라이센스 파일에 대한 직접 경로를 설정하고 사용자 폴더를 설정하는 대신 사용할 수 있습니다(<span class="inline">/uf</span> )</td></tr><tr><td style=""><span class="inline">/ru=[runtime_url]</span></td><td style=""> 런타임 정보를 가져올 URL 설정(기본값은 안정적인 릴리스)</td></tr><tr><td style=""><span class="inline">/rp=[runtime_root]</span></td><td style=""> 설치된 런타임을 나열하거나 새 런타임을 설치하도록 로컬 런타임 설치 폴더를 설정합니다.</td></tr></tbody></table><p> 다음은 Igor 런타임과 함께 사용할 수 있는 명령입니다.</p><h4> 통사론: </h4><p class="code">Igor.exe [command]</p><table><colgroup><col style="width: 237px;"/><col style="width: 537px;"/></colgroup><tbody><tr><th style=""> 명령</th><th style=""> 설명</th></tr><tr><td style=""><span class="inline">Runtime List</span></td><td style=""> 피드에서 사용 가능한 런타임을 나열합니다(버전 번호, 빌드 날짜/시간).</td></tr><tr><td style=""><span class="inline">Runtime ListInstalled [directory]</span></td><td style=""> 현재 폴더(<span class="inline">directory</span> = 폴더의 전체 경로)<br/><br/> 검색할 디렉토리를 지정할 수 있지만 지정하지 않으면 기본적으로 현재 디렉토리가 사용됩니다.<br/><br/> 가 있는지 여부도 확인합니다. <span class="inline">receipt.json</span> 파일과 <span class="inline">manifest</span> 디렉토리 내부의 폴더(실제로 런타임인지 확인)</td></tr><tr><td style=""><span class="inline">Runtime Info [version]</span></td><td style=""> 주어진 피드의 가장 최근 런타임에 대한 정보를 출력합니다. 또한 사용자가 사용할 수 있는 모듈에 대한 정보를 표시하려면 라이센스 파일이 필요합니다.<br/><br/> <span class="inline">version</span> 피드 제목을 검색하는 데 사용되는 문자열(예: <span class="inline">&quot;739&quot;</span> 버전 번호에 739가 포함된 모든 빌드에 대한 정보를 표시하거나 <span class="inline">all</span> 모든 피드에 대한 정보 표시<br/><br/> 다음과 함께 모듈을 나열합니다. <span class="inline">.zip</span> 각 모듈의 파일 이름</td></tr><tr><td style=""><span class="inline">Runtime Install [version]</span></td><td style=""> 지정된 피드를 사용하여 지정된 피드에서 최신 런타임을 설치합니다. <span class="inline">version</span> 검색 필터로; 지정하지 않으면 기본적으로 최신 버전이 사용됩니다. 사용자가 라이센스에 가지고 있는 모든 모듈을 가져옵니다.</td></tr><tr><td style=""><span class="inline">Runtime Verify [folder=.]</span></td><td style=""> 설치된 모든 파일의 체크섬을 계산하고 매니페스트에 작성된 체크섬과 비교합니다. <span class="inline">folder</span>. 확인할 폴더를 지정할 수 있지만 지정하지 않으면 기본적으로 현재 디렉터리가 사용됩니다.<br/><br/> 이것은 체크섬이 일치하지 않는 모든 파일, 누락된 파일 및 존재해서는 안 되는 파일에 플래그를 지정합니다.<br/><br/> 매니페스트 파일 자체는 확인되지 않으며 사용자는 설치된 파일과 일치하도록 매니페스트 파일을 변경할 수 있습니다.</td></tr></tbody></table><p></p><h1> 이고르 테스트</h1><p> 다음은 Igor로 빌드를 테스트하는 데 사용할 수 있는 옵션입니다.</p><table><tbody><tr><th style=""> 옵션</th><th style=""> 설명</th></tr><tr><td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td><td style=""> <span data-keyref="GameMaker Name">GameMaker</span> 가 설치할 수 있는 모듈을 알 수 있도록 라이선스 정보 검색에 사용되는 사용자 폴더를 설정합니다.</td></tr><tr><td style=""><span class="inline">/lf=[license_file]</span></td><td style=""> 라이선스 파일에 대한 직접 경로를 설정하고 사용자 폴더를 설정하는 대신 사용할 수 있습니다(<span class="inline">/uf</span> )</td></tr><tr><td style=""><span class="inline">/df=[device_file]</span></td><td style=""> 직접 경로 설정 <span class="inline">devices.json</span> 파일, 사용자 폴더 설정 대신 사용할 수 있습니다(<span class="inline">/uf</span> )</td></tr><tr><td style=""><span class="inline">/timeout=[number_of_seconds_to_wait]</span></td><td style=""> 테스트에 사용할 시간 제한(초), 기본값은 120초입니다. 이 시간 초과 후 테스트가 중지되고 실패한 것으로 표시됩니다.</td></tr><tr><td style=""><span class="inline">/waittime=[number_of_seconds_to_wait]</span></td><td style=""> 테스트를 통과했다고 선언하기 전에 기본 루프에서 대기하는 시간(초), 기본값은 30초입니다.</td></tr><tr><td style=""><span class="inline">/device=[device_name]</span></td><td style=""> 사용자 폴더의 장치 이름을 조회하는 데 사용됩니다. <span class="inline">devices.json</span> 파일</td></tr><tr><td style=""><span class="inline">/target=[list_of_targets]</span></td><td style=""> 쉼표로 구분된 대상 목록 <span class="inline">PLATFORM|DEVICE</span> 형식, 예: <span class="inline">/target=&quot;Windows|Local,HTML|Firefox&quot;</span><br/><br/> <strong>all</strong> 을 지정하면 테스트는 다음의 모든 장치에 대해 실행을 시도합니다. <span class="inline">devices.json</span> 파일</td></tr></tbody></table><p> Igor로 테스트를 실행하는 데 사용할 수 있는 명령이 하나 있습니다.</p><p class="code">Igor.exe Tests RunTests [test_directory/test_filename]</p><p> 테스트 디렉토리 또는 테스트 파일 이름을 지정해야 합니다.</p><ul class="colour"><li> 디렉토리라면 Igor는 다음과 같은 파일을 찾습니다. <span class="inline">tests.json</span> 디렉토리에서<ul><li> 파일 <strong>을 찾을 수 없으면</strong> Igor는 재귀적으로 다음을 검색합니다. <span class="inline">.yyz</span> 그리고 <span class="inline">.yyp</span> 디렉토리의 파일<ul><li> 발견된 각 프로젝트는 Windows에서 빌드되고 실행됩니다.</li><li> 주자가 메인 루프에 도달할 때까지 대기합니다.<ul><li> 대기 시간 후에도 러너가 계속 실행 중이면 테스트 통과</li><li> 프로젝트가 제한 시간 내에 컴파일되지 않거나 대기 시간이 끝나기 전에 충돌하는 경우 테스트가 실패합니다.</li></ul></li></ul></li><li> 만약<span class="inline">tests.json</span> 파일 <strong>이 발견</strong> 되면 Igor는 파일에 설명된 테스트를 실행합니다(아래 예 참조).</li></ul></li><li> 또는 직접 경로를 제공할 수 있습니다. <span class="inline">tests.json</span> 디렉토리 대신 파일</li></ul><p></p><h1> Tests.json 파일</h1><h2> 체재</h2><p> 그만큼 <span class="inline">tests.json</span> 파일 형식은 다음과 같아야 합니다.</p><ul class="colour"><li> JSON 파일에는 객체 배열이 포함되어야 합니다.</li><li> 각 개체는 하나의 테스트를 설명해야 합니다.<ul><li> 테스트 개체에는 다음 키가 포함되어야 합니다.<ul><li><span class="inline">name</span>: 테스트의 합격/불합격 여부를 알려주는 이름</li><li><span class="inline">path</span>: 로 가는 길 <span class="inline">.yyp</span>, <span class="inline">.yyz</span>, <span class="inline">.gml</span>, <span class="inline">.js</span> 테스트용 파일 또는 폴더</li><li><span class="inline">command</span>: 테스트를 위한 Igor 명령(<span class="inline">Run</span>, <span class="inline">CreatePackage</span> 등)</li></ul></li><li> 테스트 개체에는 다음 키도 포함될 수 있습니다.<ul><li><span class="inline">platform</span>: 테스트를 위해 이고르에게 직접 전달</li><li><span class="inline">device</span>: 장치 이름 <span class="inline">devices.json</span> 파일</li><li><span class="inline">target</span>: &quot;의 대상<span class="inline">PLATFORM|TARGET&quot;</span> 형식, 예: &quot;<span class="inline">Windows|Local&quot;</span></li><li><span class="inline">timeout</span>: 컴파일 및 실행을 포함한 전체 테스트에 대한 시간 초과; 초과하면 테스트가 중지되고 실패한 것으로 표시됩니다.</li><li><span class="inline">waittime</span>: 메인 루프 진입 후 테스트 통과 여부를 판단하기까지 대기하는 시간</li><li><span class="inline">owner</span>: 이 테스트가 실패할 경우 이메일을 받을 사용자의 이메일 주소</li></ul></li></ul></li></ul><h2> 예시</h2><p> 다음은 <span class="inline">tests.json</span> 파일: </p><p class="code">[
      <br/>
      {
      <br/>
      &quot;name&quot; : &quot;Game Idea Windows&quot;,
      <br/>
      &quot;path&quot; : &quot;C:/scratch/GameIdea.yyz&quot;,
      <br/>
      &quot;platform&quot; : &quot;Windows&quot;,
      <br/>
      &quot;command&quot; : &quot;Run&quot;,
      <br/>
      &quot;timeout&quot; : &quot;500&quot;,
      <br/>
      &quot;waittime&quot; : &quot;30&quot;
      <br/>
      },
      <br/>
      {
      <br/>
      &quot;name&quot; : &quot;Platformer Game Windows&quot;,
      <br/>
      &quot;path&quot; : &quot;C:/Users/&lt;MY USERNAME&gt;/Documents/GameMaker/Platformer Game/PlatformerGame.yyp&quot;,
      <br/>
      &quot;target&quot; : &quot;Windows|Local,HTML5|selenium:firefox,PS4|Default&quot;,
      <br/>
      &quot;command&quot; : &quot;Run&quot;
      <br/>
      },
      <br/>
      {
      <br/>
      &quot;name&quot; : &quot;Puzzle Game Windows&quot;,
      <br/>
      &quot;path&quot; : &quot;C:/Users/&lt;MY USERNAME&gt;/Documents/GameMaker/Puzzle Game/PuzzleGame.yyp&quot;,
      <br/>
      &quot;platform&quot; : &quot;HTML5&quot;,
      <br/>
      &quot;command&quot; : &quot;Run&quot;,
      <br/>
      &quot;device&quot; : &quot;selenium:chrome&quot;
      <br/>
      }
      <br/>
      ]</p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left"> 뒤로: <a data-xref="{title}" href="Runner_Details/Runner_Details.htm">러너 및 컴파일러</a></div><div style="float:right"> 다음: <a data-xref="{title}" href="Runner_Details/Compiler_Batch_Files.htm">컴파일러 배치 파일/스크립트</a></div></div></div><h5> <span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
    </div>
    <!-- KEYWORDS
Building via Command Line
CLI
Command Line Interface
CI
Continuous Integration
--><!-- TAGS
building_via_command_line
--></body>
</html>